{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"chezmoi Manage your dotfiles across multiple diverse machines, securely. With chezmoi, pronounced /\u0283e\u026a mwa/ (shay-moi), you can install chezmoi and your dotfiles from your GitHub dotfiles repo on a new, empty machine with a single command: $ sh -c \" $( curl -fsLS chezmoi.io/get ) \" -- init --apply $GITHUB_USERNAME Updating your dotfiles on any machine is a single command: $ chezmoi update Getting started Install chezmoi then read the quick start guide . The user guide covers most common tasks. For a full description of chezmoi, consult the reference . Considering using chezmoi? You can browse other people's dotfiles that use chezmoi on GitHub and on GitLab , read articles, listen to podcasts, and watch videos about chezmoi and see how chezmoi compares to other dotfile managers .","title":"chezmoi"},{"location":"#chezmoi","text":"Manage your dotfiles across multiple diverse machines, securely. With chezmoi, pronounced /\u0283e\u026a mwa/ (shay-moi), you can install chezmoi and your dotfiles from your GitHub dotfiles repo on a new, empty machine with a single command: $ sh -c \" $( curl -fsLS chezmoi.io/get ) \" -- init --apply $GITHUB_USERNAME Updating your dotfiles on any machine is a single command: $ chezmoi update","title":"chezmoi"},{"location":"#getting-started","text":"Install chezmoi then read the quick start guide . The user guide covers most common tasks. For a full description of chezmoi, consult the reference .","title":"Getting started"},{"location":"#considering-using-chezmoi","text":"You can browse other people's dotfiles that use chezmoi on GitHub and on GitLab , read articles, listen to podcasts, and watch videos about chezmoi and see how chezmoi compares to other dotfile managers .","title":"Considering using chezmoi?"},{"location":"comparison-table/","text":"Comparison table chezmoi dotbot rcm vcsh yadm bare git Distribution Single binary Python package Multiple files Single script or package Single script - Install method Many git submodule Many Many Many Manual Non-root install on bare system \u2705 \u2049\ufe0f \u2049\ufe0f \u2705 \u2705 \u2705 Windows support \u2705 \u2705 \u274c \u274c \u2705 \u2705 Bootstrap requirements None Python, git Perl, git sh, git git git Source repos Single Single Multiple Multiple Single Single dotfiles are... Files Symlinks Files Files Files Files Config file Optional Required Optional None Optional Optional Private files \u2705 \u274c \u274c \u274c \u2705 \u274c Show differences without applying \u2705 \u274c \u274c \u2705 \u2705 \u2705 Whole file encryption \u2705 \u274c \u274c \u274c \u2705 \u274c Password manager integration \u2705 \u274c \u274c \u274c \u274c \u274c Machine-to-machine file differences Templates Alternative files Alternative files Branches Alternative files, templates \u2049\ufe0f Custom variables in templates \u2705 \u274c \u274c \u274c \u274c \u274c Executable files \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 File creation with initial contents \u2705 \u274c \u274c \u2705 \u274c \u274c Externals \u2705 \u274c \u274c \u274c \u274c \u274c Manage partial files \u2705 \u274c \u274c \u2049\ufe0f \u2705 \u2049\ufe0f File removal \u2705 \u274c \u274c \u2705 \u2705 \u274c Directory creation \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Run scripts \u2705 \u2705 \u2705 \u2705 \u2705 \u274c Run once scripts \u2705 \u274c \u274c \u2705 \u2705 \u274c Machine-to-machine symlink differences \u2705 \u274c \u274c \u2049\ufe0f \u2705 \u2049\ufe0f Shell completion \u2705 \u274c \u274c \u2705 \u2705 \u2705 Archive import \u2705 \u274c \u274c \u2705 \u274c \u2705 Archive export \u2705 \u274c \u274c \u2705 \u274c \u2705 Implementation language Go Python Perl POSIX Shell Bash C \u2705 Supported, \u2049\ufe0f Possible with significant manual effort, \u274c Not supported For more comparisons, visit dotfiles.github.io/utilities .","title":"Comparison table"},{"location":"comparison-table/#comparison-table","text":"chezmoi dotbot rcm vcsh yadm bare git Distribution Single binary Python package Multiple files Single script or package Single script - Install method Many git submodule Many Many Many Manual Non-root install on bare system \u2705 \u2049\ufe0f \u2049\ufe0f \u2705 \u2705 \u2705 Windows support \u2705 \u2705 \u274c \u274c \u2705 \u2705 Bootstrap requirements None Python, git Perl, git sh, git git git Source repos Single Single Multiple Multiple Single Single dotfiles are... Files Symlinks Files Files Files Files Config file Optional Required Optional None Optional Optional Private files \u2705 \u274c \u274c \u274c \u2705 \u274c Show differences without applying \u2705 \u274c \u274c \u2705 \u2705 \u2705 Whole file encryption \u2705 \u274c \u274c \u274c \u2705 \u274c Password manager integration \u2705 \u274c \u274c \u274c \u274c \u274c Machine-to-machine file differences Templates Alternative files Alternative files Branches Alternative files, templates \u2049\ufe0f Custom variables in templates \u2705 \u274c \u274c \u274c \u274c \u274c Executable files \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 File creation with initial contents \u2705 \u274c \u274c \u2705 \u274c \u274c Externals \u2705 \u274c \u274c \u274c \u274c \u274c Manage partial files \u2705 \u274c \u274c \u2049\ufe0f \u2705 \u2049\ufe0f File removal \u2705 \u274c \u274c \u2705 \u2705 \u274c Directory creation \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Run scripts \u2705 \u2705 \u2705 \u2705 \u2705 \u274c Run once scripts \u2705 \u274c \u274c \u2705 \u2705 \u274c Machine-to-machine symlink differences \u2705 \u274c \u274c \u2049\ufe0f \u2705 \u2049\ufe0f Shell completion \u2705 \u274c \u274c \u2705 \u2705 \u2705 Archive import \u2705 \u274c \u274c \u2705 \u274c \u2705 Archive export \u2705 \u274c \u274c \u2705 \u274c \u2705 Implementation language Go Python Perl POSIX Shell Bash C \u2705 Supported, \u2049\ufe0f Possible with significant manual effort, \u274c Not supported For more comparisons, visit dotfiles.github.io/utilities .","title":"Comparison table"},{"location":"install/","text":"Install The latest version of chezmoi is 2.17.0. One-line binary install Install the correct binary for your operating system and architecture in ./bin with a single command: curl wget PowerShell sh -c \" $( curl -fsLS chezmoi.io/get ) \" sh -c \" $( wget -qO- chezmoi.io/get ) \" ( irm -useb https :// chezmoi . io / get . ps1 ) | powershell -c - Hint If you already have a dotfiles repo using chezmoi on GitHub at https://github.com/$GITHUB_USERNAME/dotfiles then you can install chezmoi and your dotfiles with the single command: sh -c \" $( curl -fsLS chezmoi.io/get ) \" -- init --apply $GITHUB_USERNAME One-line package install Install chezmoi with your package manager with a single command: Linux macOS Windows FreeBSD OpenIndiana snap Linuxbrew asdf Alpine Arch Guix Nix / NixOS Void snap install chezmoi --classic brew install chezmoi asdf plugin add chezmoi && asdf install chezmoi 2 .17.0 apk add chezmoi pacman -S chezmoi guix install chezmoi nix-env -i chezmoi xbps-install -S chezmoi Homebrew MacPorts Nix asdf brew install chezmoi port install chezmoi nix-env -i chezmoi asdf plugin add chezmoi && asdf install chezmoi 2 .17.0 Chocolatey Scoop choco install chezmoi scoop install chezmoi pkg install chezmoi pkg install application/chezmoi Download a pre-built Linux package Download a package for your distribution and architecture. deb rpm apk amd64 arm64 armel i386 mips64 mips64le ppc64 ppc64le riscv64 s390x aarch64 armhfp i686 mips64 mips64le ppc64 ppc64le s390x riscv64 x86_64 386 amd64 arm arm64 mips64 mips64le ppc64 ppc64le riscv64 s390x Download a pre-built binary Download an archive for your operating system and architecture containing a pre-built binary and shell completions. Linux macOS Windows FreeBSD OpenBSD Illumos Solaris amd64 arm arm64 i386 mips64 mips64le ppc64 ppc64le riscv64 s390x amd64 (glibc) amd64 (musl) amd64 arm64 amd64 arm arm64 i386 amd64 arm arm64 i386 amd64 arm arm64 i386 amd64 amd64 Install from source Download, build, and install chezmoi for your system with Go 1.17 or later: $ git clone https://github.com/twpayne/chezmoi.git $ cd chezmoi $ make install","title":"Install"},{"location":"install/#install","text":"The latest version of chezmoi is 2.17.0.","title":"Install"},{"location":"install/#one-line-binary-install","text":"Install the correct binary for your operating system and architecture in ./bin with a single command: curl wget PowerShell sh -c \" $( curl -fsLS chezmoi.io/get ) \" sh -c \" $( wget -qO- chezmoi.io/get ) \" ( irm -useb https :// chezmoi . io / get . ps1 ) | powershell -c - Hint If you already have a dotfiles repo using chezmoi on GitHub at https://github.com/$GITHUB_USERNAME/dotfiles then you can install chezmoi and your dotfiles with the single command: sh -c \" $( curl -fsLS chezmoi.io/get ) \" -- init --apply $GITHUB_USERNAME","title":"One-line binary install"},{"location":"install/#one-line-package-install","text":"Install chezmoi with your package manager with a single command: Linux macOS Windows FreeBSD OpenIndiana snap Linuxbrew asdf Alpine Arch Guix Nix / NixOS Void snap install chezmoi --classic brew install chezmoi asdf plugin add chezmoi && asdf install chezmoi 2 .17.0 apk add chezmoi pacman -S chezmoi guix install chezmoi nix-env -i chezmoi xbps-install -S chezmoi Homebrew MacPorts Nix asdf brew install chezmoi port install chezmoi nix-env -i chezmoi asdf plugin add chezmoi && asdf install chezmoi 2 .17.0 Chocolatey Scoop choco install chezmoi scoop install chezmoi pkg install chezmoi pkg install application/chezmoi","title":"One-line package install"},{"location":"install/#download-a-pre-built-linux-package","text":"Download a package for your distribution and architecture. deb rpm apk amd64 arm64 armel i386 mips64 mips64le ppc64 ppc64le riscv64 s390x aarch64 armhfp i686 mips64 mips64le ppc64 ppc64le s390x riscv64 x86_64 386 amd64 arm arm64 mips64 mips64le ppc64 ppc64le riscv64 s390x","title":"Download a pre-built Linux package"},{"location":"install/#download-a-pre-built-binary","text":"Download an archive for your operating system and architecture containing a pre-built binary and shell completions. Linux macOS Windows FreeBSD OpenBSD Illumos Solaris amd64 arm arm64 i386 mips64 mips64le ppc64 ppc64le riscv64 s390x amd64 (glibc) amd64 (musl) amd64 arm64 amd64 arm arm64 i386 amd64 arm arm64 i386 amd64 arm arm64 i386 amd64 amd64","title":"Download a pre-built binary"},{"location":"install/#install-from-source","text":"Download, build, and install chezmoi for your system with Go 1.17 or later: $ git clone https://github.com/twpayne/chezmoi.git $ cd chezmoi $ make install","title":"Install from source"},{"location":"license/","text":"License The MIT License (MIT) Copyright (c) 2018-2022 Tom Payne Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"The MIT License (MIT) Copyright (c) 2018-2022 Tom Payne Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"migrating-from-another-dotfile-manager/","text":"Migrating from another dotfile manager Migrate from a dotfile manager that uses symlinks Many dotfile managers replace dotfiles with symbolic links to files in a common directory. If you chezmoi add such a symlink, chezmoi will add the symlink, not the file. To assist with migrating from symlink-based systems, use the --follow option to chezmoi add , for example: $ chezmoi add --follow ~/.bashrc This will tell chezmoi add that the target state of ~/.bashrc is the target of the ~/.bashrc symlink, rather than the symlink itself. When you run chezmoi apply , chezmoi will replace the ~/.bashrc symlink with the file contents.","title":"Migrating from another dotfile manager"},{"location":"migrating-from-another-dotfile-manager/#migrating-from-another-dotfile-manager","text":"","title":"Migrating from another dotfile manager"},{"location":"migrating-from-another-dotfile-manager/#migrate-from-a-dotfile-manager-that-uses-symlinks","text":"Many dotfile managers replace dotfiles with symbolic links to files in a common directory. If you chezmoi add such a symlink, chezmoi will add the symlink, not the file. To assist with migrating from symlink-based systems, use the --follow option to chezmoi add , for example: $ chezmoi add --follow ~/.bashrc This will tell chezmoi add that the target state of ~/.bashrc is the target of the ~/.bashrc symlink, rather than the symlink itself. When you run chezmoi apply , chezmoi will replace the ~/.bashrc symlink with the file contents.","title":"Migrate from a dotfile manager that uses symlinks"},{"location":"quick-start/","text":"Quick start Concepts chezmoi stores the desired state of your dotfiles in the directory ~/.local/share/chezmoi . When you run chezmoi apply , chezmoi calculates the desired contents and permissions for each dotfile and then makes any changes necessary so that your dotfiles match that state. Start using chezmoi on your current machine Assuming that you have already installed chezmoi , initialize chezmoi with: $ chezmoi init This will create a new git local repository in ~/.local/share/chezmoi where chezmoi will store its source state. By default, chezmoi only modifies files in the working copy. Manage your first file with chezmoi: $ chezmoi add ~/.bashrc This will copy ~/.bashrc to ~/.local/share/chezmoi/dot_bashrc . Edit the source state: $ chezmoi edit ~/.bashrc This will open ~/.local/share/chezmoi/dot_bashrc in your $EDITOR . Make some changes and save the file. See what changes chezmoi would make: $ chezmoi diff Apply the changes: $ chezmoi -v apply All chezmoi commands accept the -v (verbose) flag to print out exactly what changes they will make to the file system, and the -n (dry run) flag to not make any actual changes. The combination -n -v is very useful if you want to see exactly what changes would be made. Next, open a shell in the source directory, to commit your changes: $ chezmoi cd $ git add . $ git commit -m \"Initial commit\" Create a new repository on GitHub called dotfiles and then push your repo: $ git remote add origin git@github.com:username/dotfiles.git $ git branch -M main $ git push -u origin main Hint chezmoi can be configured to automatically add, commit, and push changes to your repo. chezmoi can also be used with GitLab , or BitBucket , Source Hut , or any other git hosting service. Finally, exit the shell in the source directory to return to where you were: $ exit These commands are summarized this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo H->>L: chezmoi init H->>W: chezmoi add <file> W->>W: chezmoi edit <file> W-->>H: chezmoi diff W->>H: chezmoi apply H-->>W: chezmoi cd W->>L: git add W->>L: git commit L->>R: git push W-->>H: exit Using chezmoi across multiple machines On a second machine, initialize chezmoi with your dotfiles repo: $ chezmoi init https://github.com/username/dotfiles.git This will check out the repo and any submodules and optionally create a chezmoi config file for you. Check what changes that chezmoi will make to your home directory by running: $ chezmoi diff If you are happy with the changes that chezmoi will make then run: $ chezmoi apply -v If you are not happy with the changes to a file then either edit it with: $ chezmoi edit $FILE Or, invoke a merge tool (by default vimdiff ) to merge changes between the current contents of the file, the file in your working copy, and the computed contents of the file: $ chezmoi merge $FILE On any machine, you can pull and apply the latest changes from your repo with: $ chezmoi update -v Alternatively, you can install your dotfiles on new machine with a single command: $ chezmoi init --apply https://github.com/username/dotfiles.git These commands are summarized in the this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <repo> W-->>H: chezmoi diff W->>H: chezmoi apply W->>W: chezmoi edit <file> W->>W: chezmoi merge <file> R->>H: chezmoi update Set up a new machine with a single command You can install your dotfiles on new machine with a single command: $ chezmoi init --apply https://github.com/username/dotfiles.git This command is summarized in the this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>H: chezmoi init --apply <repo> Next steps For a full list of commands run: $ chezmoi help chezmoi has much more functionality. Good starting points are reading articles about chezmoi adding more dotfiles, and using templates to manage files that vary from machine to machine and retrieve secrets from your password manager. Read the user guide to explore.","title":"Quick start"},{"location":"quick-start/#quick-start","text":"","title":"Quick start"},{"location":"quick-start/#concepts","text":"chezmoi stores the desired state of your dotfiles in the directory ~/.local/share/chezmoi . When you run chezmoi apply , chezmoi calculates the desired contents and permissions for each dotfile and then makes any changes necessary so that your dotfiles match that state.","title":"Concepts"},{"location":"quick-start/#start-using-chezmoi-on-your-current-machine","text":"Assuming that you have already installed chezmoi , initialize chezmoi with: $ chezmoi init This will create a new git local repository in ~/.local/share/chezmoi where chezmoi will store its source state. By default, chezmoi only modifies files in the working copy. Manage your first file with chezmoi: $ chezmoi add ~/.bashrc This will copy ~/.bashrc to ~/.local/share/chezmoi/dot_bashrc . Edit the source state: $ chezmoi edit ~/.bashrc This will open ~/.local/share/chezmoi/dot_bashrc in your $EDITOR . Make some changes and save the file. See what changes chezmoi would make: $ chezmoi diff Apply the changes: $ chezmoi -v apply All chezmoi commands accept the -v (verbose) flag to print out exactly what changes they will make to the file system, and the -n (dry run) flag to not make any actual changes. The combination -n -v is very useful if you want to see exactly what changes would be made. Next, open a shell in the source directory, to commit your changes: $ chezmoi cd $ git add . $ git commit -m \"Initial commit\" Create a new repository on GitHub called dotfiles and then push your repo: $ git remote add origin git@github.com:username/dotfiles.git $ git branch -M main $ git push -u origin main Hint chezmoi can be configured to automatically add, commit, and push changes to your repo. chezmoi can also be used with GitLab , or BitBucket , Source Hut , or any other git hosting service. Finally, exit the shell in the source directory to return to where you were: $ exit These commands are summarized this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo H->>L: chezmoi init H->>W: chezmoi add <file> W->>W: chezmoi edit <file> W-->>H: chezmoi diff W->>H: chezmoi apply H-->>W: chezmoi cd W->>L: git add W->>L: git commit L->>R: git push W-->>H: exit","title":"Start using chezmoi on your current machine"},{"location":"quick-start/#using-chezmoi-across-multiple-machines","text":"On a second machine, initialize chezmoi with your dotfiles repo: $ chezmoi init https://github.com/username/dotfiles.git This will check out the repo and any submodules and optionally create a chezmoi config file for you. Check what changes that chezmoi will make to your home directory by running: $ chezmoi diff If you are happy with the changes that chezmoi will make then run: $ chezmoi apply -v If you are not happy with the changes to a file then either edit it with: $ chezmoi edit $FILE Or, invoke a merge tool (by default vimdiff ) to merge changes between the current contents of the file, the file in your working copy, and the computed contents of the file: $ chezmoi merge $FILE On any machine, you can pull and apply the latest changes from your repo with: $ chezmoi update -v Alternatively, you can install your dotfiles on new machine with a single command: $ chezmoi init --apply https://github.com/username/dotfiles.git These commands are summarized in the this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <repo> W-->>H: chezmoi diff W->>H: chezmoi apply W->>W: chezmoi edit <file> W->>W: chezmoi merge <file> R->>H: chezmoi update","title":"Using chezmoi across multiple machines"},{"location":"quick-start/#set-up-a-new-machine-with-a-single-command","text":"You can install your dotfiles on new machine with a single command: $ chezmoi init --apply https://github.com/username/dotfiles.git This command is summarized in the this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>H: chezmoi init --apply <repo>","title":"Set up a new machine with a single command"},{"location":"quick-start/#next-steps","text":"For a full list of commands run: $ chezmoi help chezmoi has much more functionality. Good starting points are reading articles about chezmoi adding more dotfiles, and using templates to manage files that vary from machine to machine and retrieve secrets from your password manager. Read the user guide to explore.","title":"Next steps"},{"location":"what-does-chezmoi-do/","text":"What does chezmoi do? chezmoi helps you manage your personal configuration files (dotfiles, like ~/.gitconfig ) across multiple machines. chezmoi is helpful if you have spent time customizing the tools you use (e.g. shells, editors, and version control systems) and want to keep machines running different accounts (e.g. home and work) and/or different operating systems (e.g. Linux, macOS, and Windows) in sync, while still being able to easily cope with differences from machine to machine. chezmoi scales from the trivial (e.g. copying a few dotfiles onto a Raspberry Pi, development container, or virtual machine) to complex long-lived multi-machine development environments (e.g. keeping any number of home and work, Linux, macOS, and Windows machines in sync). In all cases you only need to maintain a single source of truth (a single branch in git) and getting started only requires adding a single binary to your machine (which you can do with curl , wget , or scp ). chezmoi has strong support for security, allowing you to manage secrets (e.g. passwords, access tokens, and private keys) securely and seamlessly using a password manager and/or encrypt whole files with your favorite encryption tool. If you do not personalize your configuration or only ever use a single operating system with a single account and none of your dotfiles contain secrets then you don't need chezmoi. Otherwise, read on... What are chezmoi's key features? Flexible You can share as much configuration across machines as you want, while still being able to control machine-specific details.Your dotfiles can be templates (using text/template syntax). Predefined variables allow you to change behavior depending on operating system, architecture, and hostname. chezmoi runs on all commonly-used platforms, like Linux, macOS, and Windows. It also runs on less commonly-used platforms, like FreeBSD, OpenBSD, and Termux. Personal and secure Nothing leaves your machine, unless you want it to. Your configuration remains in a git repo under your control. You can write the configuration file in the format of your choice. chezmoi can retrieve secrets from 1Password , Bitwarden , gopass , KeePassXC , Keeper , LastPass , pass , Vault , Keychain, Keyring , or any command-line utility of your choice. You can encrypt individual files with GnuPG or age . You can checkout your dotfiles repo on as many machines as you want without revealing any secrets to anyone. Transparent chezmoi includes verbose and dry run modes so you can review exactly what changes it will make to your home directory before making them. chezmoi's source format uses only regular files and directories that map one-to-one with the files, directories, and symlinks in your home directory that you choose to manage. If you decide not to use chezmoi in the future, it is easy to move your data elsewhere. Declarative and robust You declare the desired state of files, directories, and symbolic links in your source of truth and chezmoi updates your home directory to match that state. What you want is what you get. chezmoi updates all files and symbolic links atomically. You will never be left with incomplete files that could lock you out, even if the update process is interrupted. Fast and easy to use Using chezmoi feels like using git: the commands are similar and chezmoi runs in fractions of a second. chezmoi makes most day-to-day operations one line commands, including installation, initialization, and keeping your machines up-to-date. chezmoi can pull and apply changes from your dotfiles repo in a single command, and automatically commit and push changes.","title":"What does chezmoi do?"},{"location":"what-does-chezmoi-do/#what-does-chezmoi-do","text":"chezmoi helps you manage your personal configuration files (dotfiles, like ~/.gitconfig ) across multiple machines. chezmoi is helpful if you have spent time customizing the tools you use (e.g. shells, editors, and version control systems) and want to keep machines running different accounts (e.g. home and work) and/or different operating systems (e.g. Linux, macOS, and Windows) in sync, while still being able to easily cope with differences from machine to machine. chezmoi scales from the trivial (e.g. copying a few dotfiles onto a Raspberry Pi, development container, or virtual machine) to complex long-lived multi-machine development environments (e.g. keeping any number of home and work, Linux, macOS, and Windows machines in sync). In all cases you only need to maintain a single source of truth (a single branch in git) and getting started only requires adding a single binary to your machine (which you can do with curl , wget , or scp ). chezmoi has strong support for security, allowing you to manage secrets (e.g. passwords, access tokens, and private keys) securely and seamlessly using a password manager and/or encrypt whole files with your favorite encryption tool. If you do not personalize your configuration or only ever use a single operating system with a single account and none of your dotfiles contain secrets then you don't need chezmoi. Otherwise, read on...","title":"What does chezmoi do?"},{"location":"what-does-chezmoi-do/#what-are-chezmois-key-features","text":"","title":"What are chezmoi's key features?"},{"location":"what-does-chezmoi-do/#flexible","text":"You can share as much configuration across machines as you want, while still being able to control machine-specific details.Your dotfiles can be templates (using text/template syntax). Predefined variables allow you to change behavior depending on operating system, architecture, and hostname. chezmoi runs on all commonly-used platforms, like Linux, macOS, and Windows. It also runs on less commonly-used platforms, like FreeBSD, OpenBSD, and Termux.","title":"Flexible"},{"location":"what-does-chezmoi-do/#personal-and-secure","text":"Nothing leaves your machine, unless you want it to. Your configuration remains in a git repo under your control. You can write the configuration file in the format of your choice. chezmoi can retrieve secrets from 1Password , Bitwarden , gopass , KeePassXC , Keeper , LastPass , pass , Vault , Keychain, Keyring , or any command-line utility of your choice. You can encrypt individual files with GnuPG or age . You can checkout your dotfiles repo on as many machines as you want without revealing any secrets to anyone.","title":"Personal and secure"},{"location":"what-does-chezmoi-do/#transparent","text":"chezmoi includes verbose and dry run modes so you can review exactly what changes it will make to your home directory before making them. chezmoi's source format uses only regular files and directories that map one-to-one with the files, directories, and symlinks in your home directory that you choose to manage. If you decide not to use chezmoi in the future, it is easy to move your data elsewhere.","title":"Transparent"},{"location":"what-does-chezmoi-do/#declarative-and-robust","text":"You declare the desired state of files, directories, and symbolic links in your source of truth and chezmoi updates your home directory to match that state. What you want is what you get. chezmoi updates all files and symbolic links atomically. You will never be left with incomplete files that could lock you out, even if the update process is interrupted.","title":"Declarative and robust"},{"location":"what-does-chezmoi-do/#fast-and-easy-to-use","text":"Using chezmoi feels like using git: the commands are similar and chezmoi runs in fractions of a second. chezmoi makes most day-to-day operations one line commands, including installation, initialization, and keeping your machines up-to-date. chezmoi can pull and apply changes from your dotfiles repo in a single command, and automatically commit and push changes.","title":"Fast and easy to use"},{"location":"why-use-chezmoi/","text":"Why use chezmoi? Why should I use a dotfile manager? Dotfile managers give you the combined benefit of a consistent environment everywhere with an undo command and a restore from backup. As the core of our development environments become increasingly standardized (e.g. using git at both home and work), and we further customize them, at the same time we increasingly work in ephemeral environments like Docker containers, virtual machines, and GitHub Codespaces. In the same way that nobody would use an editor without an undo command, or develop software without a version control system, chezmoi brings the investment that you have made in mastering your tools to every environment that you work in. I already have a system to manage my dotfiles, why should I use chezmoi? Quote I\u2019ve been using Chezmoi for more than a year now, across at least 3 computers simultaneously, and I really love it. Most of all, I love how fast I can configure a new machine when I use it. In just a couple minutes of work, I can kick off a process on a brand-new computer that will set up my dotfiles and install all my usual software so it feels like a computer I\u2019ve been using for years. I also appreciate features like secrets management, which allow me to share my dotfiles while keeping my secrets safe. Overall, I love the way Chezmoi fits so perfectly into the niche of managing dotfiles. \u2014 @mike_kasberg Quote I had initially been turned off when I first encountered [chezmoi], because [chezmoi] seemed overkill for (what appeared to me) a simple task. But the problem of managing a relatively small number of dotfiles across a relatively small number of machines with small differences between them and keeping them up to date proved to be MUCH more complex than I imagined. Copy things around by hand, and then later distributing them via source control got hairy very quickly. I finally realized all those features were absolutely necessary to manage things sanely, and once I took some time to learn how to do things with chezmoi, I have never looked back. \u2014 njt Quote Regular reminder that chezmoi is the best dotfile manager utility I've used and you can too \u2014 @mbbroberg If you're using any of the following methods: A custom shell script. An existing dotfile manager like dotbot , rcm , homesick , vcsh , yadm , or GNU Stow . A bare git repo . Then you've probably run into at least one of the following problems. ...if coping with differences between machines requires extra effort If you want to synchronize your dotfiles across multiple operating systems or distributions, then you may need to manually perform extra steps to cope with differences from machine to machine. You might need to run different commands on different machines, maintain separate per-machine files or branches (with the associated hassle of merging, rebasing, or copying each change), or hope that your custom logic handles the differences correctly. chezmoi uses a single source of truth (a single branch) and a single command that works on every machine. Individual files can be templates to handle machine to machine differences, if needed. ...if you have to keep your dotfiles repo private Quote And regarding dotfiles, I saw that. It's only public dotfiles repos so I have to evaluate my dotfiles history to be sure. I have secrets scanning and more, but it was easier to keep it private for security, I'm ok mostly though. I'm using chezmoi and it's easier now \u2014 @sheldon_hull If your system stores secrets in plain text, then you must be very careful about where you clone your dotfiles. If you clone them on your work machine then anyone with access to your work machine (e.g. your IT department) will have access to your home secrets. If you clone it on your home machine then you risk leaking work secrets. With chezmoi you can store secrets in your password manager or encrypt them, and even store passwords in different ways on different machines. You can clone your dotfiles repository anywhere, and even make your dotfiles repo public, without leaving personal secrets on your work machine or work secrets on your personal machine. ...if you have to maintain your own tool Quote I've offloaded my dotfiles deployment from a homespun shell script to chezmoi. I'm quite happy with this decision. \u2014 @gotgenes Quote I discovered chezmoi and it's pretty cool, just migrated my old custom multi-machine sync dotfile setup and it's so much simpler now in case you're wondering I have written 0 code \u2014 @buritica Quote Chezmoi is like what you might get if you re-wrote my bash script in Go, came up with better solutions than diff for managing config on multiple machines, added in secrets management and other useful dotfile tools, and tweaked and perfected it over years. @mike_kasberg If your system was written by you for your personal use, then it probably has the functionality that you needed when you wrote it. If you need more functionality then you have to implement it yourself. chezmoi includes a huge range of battle-tested functionality out-of-the-box, including dry-run and diff modes, script execution, conflict resolution, Windows support, and much, much more. chezmoi is used by thousands of people and has a rich suite of both unit and integration tests. When you hit the limits of your existing dotfile management system, chezmoi already has a tried-and-tested solution ready for you to use. ...if setting up your dotfiles requires more than one short command If your system is written in a scripting language like Python, Perl, or Ruby, then you also need to install a compatible version of that language's runtime before you can use your system. chezmoi is distributed as a single stand-alone statically-linked binary with no dependencies that you can simply copy onto your machine and run. You don't even need git installed. chezmoi provides one-line installs, pre-built binaries, packages for Linux and BSD distributions, Homebrew formulae, Scoop and Chocolatey support on Windows, and a initial config file generation mechanism to make installing your dotfiles on a new machine as painless as possible.","title":"Why use chezmoi?"},{"location":"why-use-chezmoi/#why-use-chezmoi","text":"","title":"Why use chezmoi?"},{"location":"why-use-chezmoi/#why-should-i-use-a-dotfile-manager","text":"Dotfile managers give you the combined benefit of a consistent environment everywhere with an undo command and a restore from backup. As the core of our development environments become increasingly standardized (e.g. using git at both home and work), and we further customize them, at the same time we increasingly work in ephemeral environments like Docker containers, virtual machines, and GitHub Codespaces. In the same way that nobody would use an editor without an undo command, or develop software without a version control system, chezmoi brings the investment that you have made in mastering your tools to every environment that you work in.","title":"Why should I use a dotfile manager?"},{"location":"why-use-chezmoi/#i-already-have-a-system-to-manage-my-dotfiles-why-should-i-use-chezmoi","text":"Quote I\u2019ve been using Chezmoi for more than a year now, across at least 3 computers simultaneously, and I really love it. Most of all, I love how fast I can configure a new machine when I use it. In just a couple minutes of work, I can kick off a process on a brand-new computer that will set up my dotfiles and install all my usual software so it feels like a computer I\u2019ve been using for years. I also appreciate features like secrets management, which allow me to share my dotfiles while keeping my secrets safe. Overall, I love the way Chezmoi fits so perfectly into the niche of managing dotfiles. \u2014 @mike_kasberg Quote I had initially been turned off when I first encountered [chezmoi], because [chezmoi] seemed overkill for (what appeared to me) a simple task. But the problem of managing a relatively small number of dotfiles across a relatively small number of machines with small differences between them and keeping them up to date proved to be MUCH more complex than I imagined. Copy things around by hand, and then later distributing them via source control got hairy very quickly. I finally realized all those features were absolutely necessary to manage things sanely, and once I took some time to learn how to do things with chezmoi, I have never looked back. \u2014 njt Quote Regular reminder that chezmoi is the best dotfile manager utility I've used and you can too \u2014 @mbbroberg If you're using any of the following methods: A custom shell script. An existing dotfile manager like dotbot , rcm , homesick , vcsh , yadm , or GNU Stow . A bare git repo . Then you've probably run into at least one of the following problems.","title":"I already have a system to manage my dotfiles, why should I use chezmoi?"},{"location":"why-use-chezmoi/#if-coping-with-differences-between-machines-requires-extra-effort","text":"If you want to synchronize your dotfiles across multiple operating systems or distributions, then you may need to manually perform extra steps to cope with differences from machine to machine. You might need to run different commands on different machines, maintain separate per-machine files or branches (with the associated hassle of merging, rebasing, or copying each change), or hope that your custom logic handles the differences correctly. chezmoi uses a single source of truth (a single branch) and a single command that works on every machine. Individual files can be templates to handle machine to machine differences, if needed.","title":"...if coping with differences between machines requires extra effort"},{"location":"why-use-chezmoi/#if-you-have-to-keep-your-dotfiles-repo-private","text":"Quote And regarding dotfiles, I saw that. It's only public dotfiles repos so I have to evaluate my dotfiles history to be sure. I have secrets scanning and more, but it was easier to keep it private for security, I'm ok mostly though. I'm using chezmoi and it's easier now \u2014 @sheldon_hull If your system stores secrets in plain text, then you must be very careful about where you clone your dotfiles. If you clone them on your work machine then anyone with access to your work machine (e.g. your IT department) will have access to your home secrets. If you clone it on your home machine then you risk leaking work secrets. With chezmoi you can store secrets in your password manager or encrypt them, and even store passwords in different ways on different machines. You can clone your dotfiles repository anywhere, and even make your dotfiles repo public, without leaving personal secrets on your work machine or work secrets on your personal machine.","title":"...if you have to keep your dotfiles repo private"},{"location":"why-use-chezmoi/#if-you-have-to-maintain-your-own-tool","text":"Quote I've offloaded my dotfiles deployment from a homespun shell script to chezmoi. I'm quite happy with this decision. \u2014 @gotgenes Quote I discovered chezmoi and it's pretty cool, just migrated my old custom multi-machine sync dotfile setup and it's so much simpler now in case you're wondering I have written 0 code \u2014 @buritica Quote Chezmoi is like what you might get if you re-wrote my bash script in Go, came up with better solutions than diff for managing config on multiple machines, added in secrets management and other useful dotfile tools, and tweaked and perfected it over years. @mike_kasberg If your system was written by you for your personal use, then it probably has the functionality that you needed when you wrote it. If you need more functionality then you have to implement it yourself. chezmoi includes a huge range of battle-tested functionality out-of-the-box, including dry-run and diff modes, script execution, conflict resolution, Windows support, and much, much more. chezmoi is used by thousands of people and has a rich suite of both unit and integration tests. When you hit the limits of your existing dotfile management system, chezmoi already has a tried-and-tested solution ready for you to use.","title":"...if you have to maintain your own tool"},{"location":"why-use-chezmoi/#if-setting-up-your-dotfiles-requires-more-than-one-short-command","text":"If your system is written in a scripting language like Python, Perl, or Ruby, then you also need to install a compatible version of that language's runtime before you can use your system. chezmoi is distributed as a single stand-alone statically-linked binary with no dependencies that you can simply copy onto your machine and run. You don't even need git installed. chezmoi provides one-line installs, pre-built binaries, packages for Linux and BSD distributions, Homebrew formulae, Scoop and Chocolatey support on Windows, and a initial config file generation mechanism to make installing your dotfiles on a new machine as painless as possible.","title":"...if setting up your dotfiles requires more than one short command"},{"location":"developer/architecture/","text":"Architecture This document gives a high-level overview of chezmoi's source code for anyone interested in contributing to chezmoi. You can generate Go documentation for chezmoi's source code with go doc , for example: $ go doc -all -u github.com/twpayne/chezmoi/v2/pkg/chezmoi You can also browse chezmoi's generated documentation online . Directory structure The important directories in chezmoi are: Directory Contents assets/chezmoi.io/docs/ The documentation single source of truth. Help text, examples, and the chezmoi.io website are generated from the files in this directory pkg/chezmoi/ chezmoi's core functionality pkg/cmd/ Code for the chezmoi command pkg/cmd/testdata/scripts/ High-level tests of chezmoi's commands using testscript Key concepts As described in the reference manual , chezmoi evaluates the source state to compute a target state for the destination directory (typically your home directory). It then compares the target state to the actual state of the destination directory and performs any changes necessary to update the destination directory to match the target state. These concepts are represented directly in chezmoi's code. chezmoi uses the generic term entry to describe something that it manages. Entries can be files, directories, symlinks, scripts, amongst other things. pkg/chezmoi/ directory All of chezmoi's interaction with the operating system is abstracted through the System interface. A System includes functionality to read and write files and directories and execute commands. chezmoi makes a distinction between idempotent commands that can be run multiple times without modifying the underlying system and arbitrary commands that may modify the underlying system. The real underlying system is implemented via a RealSystem struct. Other System s are composed on top of this to provide further functionality. For example, the --debug flag is implemented by wrapping the RealSystem with a DebugSystem that logs all calls to the underlying RealSystem . --dry-run is implemented by wrapping the RealSystem with a DryRunSystem that allows reads to pass through but silently discards all writes. The SourceState struct represents a source state, including reading a source state from the source directory, executing templates, applying the source state (i.e. updating a System to match the desired source state), and adding more entries to the source state. Entries in the source state are abstracted by the SourceStateEntry interface implemented by the SourceStateFile and SourceStateDir structs, as the source state only consists of regular files and directories. A SourceStateFile includes a FileAttr struct describing the attributes parsed from its file name. Similarly, a SourceStateDir includes a DirAttr struct describing the directory attributes parsed from a directory name. SourceStateEntry s can compute their target state entries, i.e. what the equivalent entry should be in the target state, abstracted by the TargetStateEntry interface. Actual target state entries include TargetStateFile structs, representing a file with contents and permissions, TargetStateDir structs, representing a directory, TargetStateSymlink for symlinks, TargetStateRemove for entries that should be removed, and TargetStateScript for scripts that should be run. The actual state of an entry in the target state is abstracted via the ActualStateEntry interface, with ActualStateAbsent , ActualStateDir , ActualStateFile , ActualStateSymlink structs implementing this interface. Finally, an EntryState struct represents a serialization of an ActualEntryState for storage in and retrieval from chezmoi's persistent state. It stores a SHA256 of the entry's contents, rather than the full contents, to avoid storing secrets in the persistent state. With these concepts, chezmoi's apply command is effectively: Read the source state from the source directory. For each entry in the source state ( SourceStateEntry ), compute its TargetStateEntry and read its actual state in the destination state ( ActualStateEntry ). If the ActualStateEntry is not equivalent to the TargetStateEntry then apply the minimal set of changes to the ActualStateEntry so that they are equivalent. Furthermore, chezmoi stores the EntryState of each entry that it writes in its persistent state. chezmoi can then detect if a third party has updated a target since chezmoi last wrote it by comparing the actual state entry in the target state with the entry state in the persistent state. pkg/cmd/ directory pkg/cmd/*cmd.go contains the code for each individual command and pkg/cmd/*templatefuncs.go contain the template functions. Commands are defined as methods on the Config struct. The Config struct is large, containing all configuration values read from the config file, command line arguments, and computed and cached values. The Config.persistentPreRunRootE and Config.persistentPostRunRootE methods set up and tear down state for individual commands based on the command's Annotations field. Path handling chezmoi uses separate types for absolute paths ( AbsPath ) and relative paths ( RelPath ) to avoid errors where paths are combined (e.g. joining two absolute paths). A further type SourceRelPath is a relative path within the source directory and handles file and directory attributes. Internally, chezmoi normalizes all paths to use forward slashes with an optional upper-cased Windows volume so they can be compared with string comparisons. Paths read from the user may include tilde ( ~ ) to represent the user's home directory, use forward or backward slashes, and are treated as external paths ( ExtPath ). These are normalized to absolute paths. chezmoi is case-sensitive internally and makes no attempt to handle case-insensitive or case-preserving filesystems. Persistent state Persistent state is treated as a two-level key-value store with the pseudo-structure map[Bucket]map[Key]Value , where Bucket , Key , and Value are all []byte s. The PersistentState interface defines interaction with them. Sometimes temporary persistent states are used. For example, in dry run mode ( --dry-run ) the actual persistent state is copied into a temporary persistent state in memory which remembers writes but does not persist them to disk. Encryption Encryption tools are abstracted by the Encryption interface that contains methods of encrypting and decrypting files and []byte s. Implementations are the AGEEncryption and GPGEncryption structs. A DebugEncryption struct wraps an Encryption interface and logs the methods called. run_once_ and run_onchange_ scripts The execution of a run_once_ script is recorded by storing the SHA256 of its contents in the scriptState bucket in the persistent state. On future invocations the script is only run if no matching contents SHA256 is found in the persistent state. The execution of a run_onchange_ script is recorded by storing its target name in the entryState bucket along with its contents SHA256 sum. On future invocations the script is only run if its contents SHA256 sum has changed, and its contents SHA256 sum is then updated in the persistent state. Testing chezmoi has a mix of, unit, integration, and end-to-end tests. Unit and integration tests use the github.com/stretchr/testify framework. End-to-end tests use github.com/rogpeppe/go-internal/testscript with the test scripts themselves in pkg/cmd/testdata/scripts/$TEST_NAME.txt . You can run individual end-to-end tests with $ go test ./pkg/cmd -run = TestScript/ $TEST_NAME Tests should, if at all possible, run unmodified on all operating systems tested in CI (Linux, macOS, Windows, and FreeBSD). Windows will sometimes need special handling due to its path separator and lack of POSIX-style file permissions.","title":"Architecture"},{"location":"developer/architecture/#architecture","text":"This document gives a high-level overview of chezmoi's source code for anyone interested in contributing to chezmoi. You can generate Go documentation for chezmoi's source code with go doc , for example: $ go doc -all -u github.com/twpayne/chezmoi/v2/pkg/chezmoi You can also browse chezmoi's generated documentation online .","title":"Architecture"},{"location":"developer/architecture/#directory-structure","text":"The important directories in chezmoi are: Directory Contents assets/chezmoi.io/docs/ The documentation single source of truth. Help text, examples, and the chezmoi.io website are generated from the files in this directory pkg/chezmoi/ chezmoi's core functionality pkg/cmd/ Code for the chezmoi command pkg/cmd/testdata/scripts/ High-level tests of chezmoi's commands using testscript","title":"Directory structure"},{"location":"developer/architecture/#key-concepts","text":"As described in the reference manual , chezmoi evaluates the source state to compute a target state for the destination directory (typically your home directory). It then compares the target state to the actual state of the destination directory and performs any changes necessary to update the destination directory to match the target state. These concepts are represented directly in chezmoi's code. chezmoi uses the generic term entry to describe something that it manages. Entries can be files, directories, symlinks, scripts, amongst other things.","title":"Key concepts"},{"location":"developer/architecture/#pkgchezmoi-directory","text":"All of chezmoi's interaction with the operating system is abstracted through the System interface. A System includes functionality to read and write files and directories and execute commands. chezmoi makes a distinction between idempotent commands that can be run multiple times without modifying the underlying system and arbitrary commands that may modify the underlying system. The real underlying system is implemented via a RealSystem struct. Other System s are composed on top of this to provide further functionality. For example, the --debug flag is implemented by wrapping the RealSystem with a DebugSystem that logs all calls to the underlying RealSystem . --dry-run is implemented by wrapping the RealSystem with a DryRunSystem that allows reads to pass through but silently discards all writes. The SourceState struct represents a source state, including reading a source state from the source directory, executing templates, applying the source state (i.e. updating a System to match the desired source state), and adding more entries to the source state. Entries in the source state are abstracted by the SourceStateEntry interface implemented by the SourceStateFile and SourceStateDir structs, as the source state only consists of regular files and directories. A SourceStateFile includes a FileAttr struct describing the attributes parsed from its file name. Similarly, a SourceStateDir includes a DirAttr struct describing the directory attributes parsed from a directory name. SourceStateEntry s can compute their target state entries, i.e. what the equivalent entry should be in the target state, abstracted by the TargetStateEntry interface. Actual target state entries include TargetStateFile structs, representing a file with contents and permissions, TargetStateDir structs, representing a directory, TargetStateSymlink for symlinks, TargetStateRemove for entries that should be removed, and TargetStateScript for scripts that should be run. The actual state of an entry in the target state is abstracted via the ActualStateEntry interface, with ActualStateAbsent , ActualStateDir , ActualStateFile , ActualStateSymlink structs implementing this interface. Finally, an EntryState struct represents a serialization of an ActualEntryState for storage in and retrieval from chezmoi's persistent state. It stores a SHA256 of the entry's contents, rather than the full contents, to avoid storing secrets in the persistent state. With these concepts, chezmoi's apply command is effectively: Read the source state from the source directory. For each entry in the source state ( SourceStateEntry ), compute its TargetStateEntry and read its actual state in the destination state ( ActualStateEntry ). If the ActualStateEntry is not equivalent to the TargetStateEntry then apply the minimal set of changes to the ActualStateEntry so that they are equivalent. Furthermore, chezmoi stores the EntryState of each entry that it writes in its persistent state. chezmoi can then detect if a third party has updated a target since chezmoi last wrote it by comparing the actual state entry in the target state with the entry state in the persistent state.","title":"pkg/chezmoi/ directory"},{"location":"developer/architecture/#pkgcmd-directory","text":"pkg/cmd/*cmd.go contains the code for each individual command and pkg/cmd/*templatefuncs.go contain the template functions. Commands are defined as methods on the Config struct. The Config struct is large, containing all configuration values read from the config file, command line arguments, and computed and cached values. The Config.persistentPreRunRootE and Config.persistentPostRunRootE methods set up and tear down state for individual commands based on the command's Annotations field.","title":"pkg/cmd/ directory"},{"location":"developer/architecture/#path-handling","text":"chezmoi uses separate types for absolute paths ( AbsPath ) and relative paths ( RelPath ) to avoid errors where paths are combined (e.g. joining two absolute paths). A further type SourceRelPath is a relative path within the source directory and handles file and directory attributes. Internally, chezmoi normalizes all paths to use forward slashes with an optional upper-cased Windows volume so they can be compared with string comparisons. Paths read from the user may include tilde ( ~ ) to represent the user's home directory, use forward or backward slashes, and are treated as external paths ( ExtPath ). These are normalized to absolute paths. chezmoi is case-sensitive internally and makes no attempt to handle case-insensitive or case-preserving filesystems.","title":"Path handling"},{"location":"developer/architecture/#persistent-state","text":"Persistent state is treated as a two-level key-value store with the pseudo-structure map[Bucket]map[Key]Value , where Bucket , Key , and Value are all []byte s. The PersistentState interface defines interaction with them. Sometimes temporary persistent states are used. For example, in dry run mode ( --dry-run ) the actual persistent state is copied into a temporary persistent state in memory which remembers writes but does not persist them to disk.","title":"Persistent state"},{"location":"developer/architecture/#encryption","text":"Encryption tools are abstracted by the Encryption interface that contains methods of encrypting and decrypting files and []byte s. Implementations are the AGEEncryption and GPGEncryption structs. A DebugEncryption struct wraps an Encryption interface and logs the methods called.","title":"Encryption"},{"location":"developer/architecture/#run_once_-and-run_onchange_-scripts","text":"The execution of a run_once_ script is recorded by storing the SHA256 of its contents in the scriptState bucket in the persistent state. On future invocations the script is only run if no matching contents SHA256 is found in the persistent state. The execution of a run_onchange_ script is recorded by storing its target name in the entryState bucket along with its contents SHA256 sum. On future invocations the script is only run if its contents SHA256 sum has changed, and its contents SHA256 sum is then updated in the persistent state.","title":"run_once_ and run_onchange_ scripts"},{"location":"developer/architecture/#testing","text":"chezmoi has a mix of, unit, integration, and end-to-end tests. Unit and integration tests use the github.com/stretchr/testify framework. End-to-end tests use github.com/rogpeppe/go-internal/testscript with the test scripts themselves in pkg/cmd/testdata/scripts/$TEST_NAME.txt . You can run individual end-to-end tests with $ go test ./pkg/cmd -run = TestScript/ $TEST_NAME Tests should, if at all possible, run unmodified on all operating systems tested in CI (Linux, macOS, Windows, and FreeBSD). Windows will sometimes need special handling due to its path separator and lack of POSIX-style file permissions.","title":"Testing"},{"location":"developer/building-on-top-of-chezmoi/","text":"Building on top of chezmoi chezmoi is designed with UNIX-style composibility in mind, and the command line tool is semantically versioned. Building on top of chezmoi should primarily be done by executing the binary with arguments and the standard input and output configured appropriately. The chezmoi dump and chezmoi state commands allows the inspection of chezmoi's internal state. chezmoi's internal functionality is available as the Go module github.com/twpayne/chezmoi/v2 , however there are no guarantees whatsoever about the API stability of this module. The semantic version applies to the command line tool, and not to any Go APIs at any level.","title":"Building on top of chezmoi"},{"location":"developer/building-on-top-of-chezmoi/#building-on-top-of-chezmoi","text":"chezmoi is designed with UNIX-style composibility in mind, and the command line tool is semantically versioned. Building on top of chezmoi should primarily be done by executing the binary with arguments and the standard input and output configured appropriately. The chezmoi dump and chezmoi state commands allows the inspection of chezmoi's internal state. chezmoi's internal functionality is available as the Go module github.com/twpayne/chezmoi/v2 , however there are no guarantees whatsoever about the API stability of this module. The semantic version applies to the command line tool, and not to any Go APIs at any level.","title":"Building on top of chezmoi"},{"location":"developer/contributing-changes/","text":"Contributing changes Bug reports, bug fixes, and documentation improvements are always welcome. Please open an issue or create a pull request with your report, fix, or improvement. If you want to make a more significant change, please first open an issue to discuss the change that you want to make. Dave Cheney gives a good rationale as to why this is important. All changes are made via pull requests. In your pull request, please make sure that: All existing tests pass. You can ensure this by running make test . There are appropriate additional tests that demonstrate that your PR works as intended. The documentation is updated, if necessary. For new features you should add an entry in assets/chezmoi.io/docs/user-guide/ and a complete description in assets/chezmoi.io/docs/reference/ . See website for instructions on how to build and view a local version of the documentation. All generated files are up to date. You can ensure this by running make generate and including any modified files in your commit. The code is correctly formatted, according to gofumpt . You can ensure this by running make format . The code passes golangci-lint . You can ensure this by running make lint . The commit messages follow the conventional commits specification . chezmoi's release notes are generated directly from the commit messages. For trivial or user-invisible changes, please use the prefix chore: . Commits are logically separate, with no merge or \"fixup\" commits. The branch applies cleanly to master .","title":"Contributing changes"},{"location":"developer/contributing-changes/#contributing-changes","text":"Bug reports, bug fixes, and documentation improvements are always welcome. Please open an issue or create a pull request with your report, fix, or improvement. If you want to make a more significant change, please first open an issue to discuss the change that you want to make. Dave Cheney gives a good rationale as to why this is important. All changes are made via pull requests. In your pull request, please make sure that: All existing tests pass. You can ensure this by running make test . There are appropriate additional tests that demonstrate that your PR works as intended. The documentation is updated, if necessary. For new features you should add an entry in assets/chezmoi.io/docs/user-guide/ and a complete description in assets/chezmoi.io/docs/reference/ . See website for instructions on how to build and view a local version of the documentation. All generated files are up to date. You can ensure this by running make generate and including any modified files in your commit. The code is correctly formatted, according to gofumpt . You can ensure this by running make format . The code passes golangci-lint . You can ensure this by running make lint . The commit messages follow the conventional commits specification . chezmoi's release notes are generated directly from the commit messages. For trivial or user-invisible changes, please use the prefix chore: . Commits are logically separate, with no merge or \"fixup\" commits. The branch applies cleanly to master .","title":"Contributing changes"},{"location":"developer/developing-locally/","text":"Developing locally chezmoi is written in Go and development happens on GitHub . chezmoi is a standard Go project, using standard Go tooling. chezmoi requires Go 1.17 or later. Checkout chezmoi: $ git clone https://github.com/twpayne/chezmoi.git $ cd chezmoi Build chezmoi: $ go build Hint If you try to build chezmoi with an unsupported version of Go you will get the error: package github.com/twpayne/chezmoi/v2: build constraints exclude all Go files in /home/twp/src/github.com/twpayne/chezmoi Run all tests: $ go test ./... chezmoi's tests include integration tests with other software. If the other software is not found in $PATH the tests will be skipped. Running the full set of tests requires age , base64 , bash , gpg , perl , python3 , ruby , sed , sha256sum , unzip , xz , and zip . Run chezmoi: $ go run . Run a set of smoketests, including cross-compilation, tests, and linting: $ make smoketest","title":"Developing locally"},{"location":"developer/developing-locally/#developing-locally","text":"chezmoi is written in Go and development happens on GitHub . chezmoi is a standard Go project, using standard Go tooling. chezmoi requires Go 1.17 or later. Checkout chezmoi: $ git clone https://github.com/twpayne/chezmoi.git $ cd chezmoi Build chezmoi: $ go build Hint If you try to build chezmoi with an unsupported version of Go you will get the error: package github.com/twpayne/chezmoi/v2: build constraints exclude all Go files in /home/twp/src/github.com/twpayne/chezmoi Run all tests: $ go test ./... chezmoi's tests include integration tests with other software. If the other software is not found in $PATH the tests will be skipped. Running the full set of tests requires age , base64 , bash , gpg , perl , python3 , ruby , sed , sha256sum , unzip , xz , and zip . Run chezmoi: $ go run . Run a set of smoketests, including cross-compilation, tests, and linting: $ make smoketest","title":"Developing locally"},{"location":"developer/install-script/","text":"Install script chezmoi generates the install script from a single source of truth. You must run $ go generate if you change includes any of the following: Modifications to the install script template. Additions or modifications to the list of supported OSs and architectures. chezmoi's continuous integration verifies that all generated files are up to date. Changes to generated files should be included in the commit that modifies the source of truth.","title":"Install script"},{"location":"developer/install-script/#install-script","text":"chezmoi generates the install script from a single source of truth. You must run $ go generate if you change includes any of the following: Modifications to the install script template. Additions or modifications to the list of supported OSs and architectures. chezmoi's continuous integration verifies that all generated files are up to date. Changes to generated files should be included in the commit that modifies the source of truth.","title":"Install script"},{"location":"developer/packaging/","text":"Packaging If you're packaging chezmoi for an operating system or distribution: chezmoi has no build dependencies other than the standard Go toolchain. chezmoi has no runtime dependencies, but is usually used with git , so many packagers choose to make git an install dependency or recommended package. Please set the version number, git commit, and build time in the binary. This greatly assists debugging when end users report problems or ask for help. You can do this by passing the following flags to go build : -ldflags \"-X main.version=$VERSION -X main.commit=$COMMIT -X main.date=$DATE -X main.builtBy=$BUILT_BY\" $VERSION should be the chezmoi version, e.g. 1.7.3 . Any v prefix is optional and will be stripped, so you can pass the git tag in directly. Hint The command git describe --abbrev=0 --tags will return a suitable value for $VERSION . $COMMIT should be the full git commit hash at which chezmoi is built, e.g. 4d678ce6850c9d81c7ab2fe0d8f20c1547688b91 . Hint The command git rev-parse HEAD will return a suitable value for $COMMIT . $DATE should be the date of the build as a UNIX timestamp or in RFC3339 format. Hint The command git show -s --format=%ct HEAD returns the UNIX timestamp of the last commit, e.g. 1636668628 . The command date -u +%Y-%m-%dT%H:%M:%SZ returns the current time in RFC3339 format, e.g. 2019-11-23T18:29:25Z . $BUILT_BY should be a string indicating what system was used to build the binary. Typically it should be the name of your packaging system, e.g. homebrew . Please enable cgo, if possible. chezmoi can be built and run without cgo, but the .chezmoi.username and .chezmoi.group template variables may not be set correctly on some systems. chezmoi includes an upgrade command which attempts to self-upgrade. You can remove this command completely by building chezmoi with the noupgrade build tag. chezmoi includes shell completions in the completions directory. Please include these in the package and install them in the shell-appropriate directory, if possible. If the instructions for installing chezmoi in chezmoi's install guide are absent or incorrect, please open an issue or submit a PR to correct them.","title":"Packaging"},{"location":"developer/packaging/#packaging","text":"If you're packaging chezmoi for an operating system or distribution: chezmoi has no build dependencies other than the standard Go toolchain. chezmoi has no runtime dependencies, but is usually used with git , so many packagers choose to make git an install dependency or recommended package. Please set the version number, git commit, and build time in the binary. This greatly assists debugging when end users report problems or ask for help. You can do this by passing the following flags to go build : -ldflags \"-X main.version=$VERSION -X main.commit=$COMMIT -X main.date=$DATE -X main.builtBy=$BUILT_BY\" $VERSION should be the chezmoi version, e.g. 1.7.3 . Any v prefix is optional and will be stripped, so you can pass the git tag in directly. Hint The command git describe --abbrev=0 --tags will return a suitable value for $VERSION . $COMMIT should be the full git commit hash at which chezmoi is built, e.g. 4d678ce6850c9d81c7ab2fe0d8f20c1547688b91 . Hint The command git rev-parse HEAD will return a suitable value for $COMMIT . $DATE should be the date of the build as a UNIX timestamp or in RFC3339 format. Hint The command git show -s --format=%ct HEAD returns the UNIX timestamp of the last commit, e.g. 1636668628 . The command date -u +%Y-%m-%dT%H:%M:%SZ returns the current time in RFC3339 format, e.g. 2019-11-23T18:29:25Z . $BUILT_BY should be a string indicating what system was used to build the binary. Typically it should be the name of your packaging system, e.g. homebrew . Please enable cgo, if possible. chezmoi can be built and run without cgo, but the .chezmoi.username and .chezmoi.group template variables may not be set correctly on some systems. chezmoi includes an upgrade command which attempts to self-upgrade. You can remove this command completely by building chezmoi with the noupgrade build tag. chezmoi includes shell completions in the completions directory. Please include these in the package and install them in the shell-appropriate directory, if possible. If the instructions for installing chezmoi in chezmoi's install guide are absent or incorrect, please open an issue or submit a PR to correct them.","title":"Packaging"},{"location":"developer/releases/","text":"Releases Releases are managed with goreleaser . Testing To build a test release, without publishing, (Ubuntu Linux only) first ensure that the musl-tools and snapcraft packages are installed: $ sudo apt-get install musl-tools snapcraft Then run: $ make test-release Publishing Publish a new release by creating and pushing a tag, for example: $ git tag v1.2.3 $ git push --tags This triggers a GitHub Action that builds and publishes archives, packages, and snaps, creates a new GitHub Release , and deploys the website . Note Publishing Snaps requires a SNAPCRAFT_LOGIN repository secret . Snapcraft logins periodically expire. Create a new snapcraft login by running: $ snapcraft export-login --snaps = chezmoi --channels = stable,candidate,beta,edge --acls = package_upload - Note brew automation will automatically detect new releases of chezmoi within a few hours and open a pull request in github.com/Homebrew/homebrew-core to bump the version. If needed, the pull request can be created with: $ brew bump-formula-pr --tag = v1.2.3 chezmoi Note chezmoi is in Scoop 's Main bucket. Scoop's automation will automatically detect new releases within a few hours.","title":"Releases"},{"location":"developer/releases/#releases","text":"Releases are managed with goreleaser .","title":"Releases"},{"location":"developer/releases/#testing","text":"To build a test release, without publishing, (Ubuntu Linux only) first ensure that the musl-tools and snapcraft packages are installed: $ sudo apt-get install musl-tools snapcraft Then run: $ make test-release","title":"Testing"},{"location":"developer/releases/#publishing","text":"Publish a new release by creating and pushing a tag, for example: $ git tag v1.2.3 $ git push --tags This triggers a GitHub Action that builds and publishes archives, packages, and snaps, creates a new GitHub Release , and deploys the website . Note Publishing Snaps requires a SNAPCRAFT_LOGIN repository secret . Snapcraft logins periodically expire. Create a new snapcraft login by running: $ snapcraft export-login --snaps = chezmoi --channels = stable,candidate,beta,edge --acls = package_upload - Note brew automation will automatically detect new releases of chezmoi within a few hours and open a pull request in github.com/Homebrew/homebrew-core to bump the version. If needed, the pull request can be created with: $ brew bump-formula-pr --tag = v1.2.3 chezmoi Note chezmoi is in Scoop 's Main bucket. Scoop's automation will automatically detect new releases within a few hours.","title":"Publishing"},{"location":"developer/security/","text":"Security Supported versions Only the most recent version of chezmoi is supported with security updates. Reporting a vulnerability Please report vulnerabilities by opening a GitHub issue or sending an email to twpayne+chezmoi-security@gmail.com .","title":"Security"},{"location":"developer/security/#security","text":"","title":"Security"},{"location":"developer/security/#supported-versions","text":"Only the most recent version of chezmoi is supported with security updates.","title":"Supported versions"},{"location":"developer/security/#reporting-a-vulnerability","text":"Please report vulnerabilities by opening a GitHub issue or sending an email to twpayne+chezmoi-security@gmail.com .","title":"Reporting a vulnerability"},{"location":"developer/using-make/","text":"Building and installing with make chezmoi can be built with GNU make, assuming you have the Go toolchain installed. Running make will build a chezmoi binary in the current directory for the host OS and architecture. To embed version information in the binary and control installation the following variables are available: Variable Example Purpose $VERSION v2.0.0 Set version $COMMIT 3895680a ... Set the git commit at which the code was built $DATE 2019-11-23T18:29:25Z The time of the build $BUILT_BY homebrew The packaging system performing the build $PREFIX /usr Installation prefix $DESTDIR install-root Fake installation root Running make install will install the chezmoi binary in ${DESTDIR}${PREFIX}/bin .","title":"Using make"},{"location":"developer/using-make/#building-and-installing-with-make","text":"chezmoi can be built with GNU make, assuming you have the Go toolchain installed. Running make will build a chezmoi binary in the current directory for the host OS and architecture. To embed version information in the binary and control installation the following variables are available: Variable Example Purpose $VERSION v2.0.0 Set version $COMMIT 3895680a ... Set the git commit at which the code was built $DATE 2019-11-23T18:29:25Z The time of the build $BUILT_BY homebrew The packaging system performing the build $PREFIX /usr Installation prefix $DESTDIR install-root Fake installation root Running make install will install the chezmoi binary in ${DESTDIR}${PREFIX}/bin .","title":"Building and installing with make"},{"location":"developer/website/","text":"Website The website is generated with Material for MkDocs from the contents of the assets/chezmoi.io/docs/ directory. It hosted by GitHub pages from the gh-pages branch . Install Material for MkDocs and the required plugins with: $ pip3 install mkdocs-material mkdocs-mermaid2-plugin mkdocs-redirects mkdocs-simple-hooks Test the website locally by running: $ cd assets/chezmoi.io $ mkdocs serve and visiting https://127.0.0.1:8000/ . Deploy the website with: $ mkdocs gh-deploy","title":"Website"},{"location":"developer/website/#website","text":"The website is generated with Material for MkDocs from the contents of the assets/chezmoi.io/docs/ directory. It hosted by GitHub pages from the gh-pages branch . Install Material for MkDocs and the required plugins with: $ pip3 install mkdocs-material mkdocs-mermaid2-plugin mkdocs-redirects mkdocs-simple-hooks Test the website locally by running: $ cd assets/chezmoi.io $ mkdocs serve and visiting https://127.0.0.1:8000/ . Deploy the website with: $ mkdocs gh-deploy","title":"Website"},{"location":"links/articles-podcasts-and-videos/","text":"Articles, podcasts, and videos Tip Recommended article: Fedora Magazine: Take back your dotfiles with Chezmoi Tip Recommended video: chezmoi: manage your dotfiles across multiple, diverse machines, securely Tip Recommended podcast: Managing Dot Files and an Introduction to Chezmoi Date Version Format Link 2022-04-27 2.15.1 Video Easily moving Linux installs 2022-04-25 2.15.1 Text Easily moving Linux installs 2022-03-13 2.14.0 Text Tools I love: Chezmoi 2022-03-11 2.14.0 Audio The Real Python Podcast: Episode 101: Tools for Setting Up Python on a New Machine 2022-03-03 2.13.0 Text Local Environment-as-Code: Is It Possible Yet? 2022-02-22 2.12.1 Text (JP) chezmoi \u3092\u4f7f\u3063\u3066 VSCode devcontainer \u5bfe\u5fdc dotfiles \u3092\u4f5c\u308b 2022-02-17 2.12.0 Text (ES) Qu\u00e9 son y c\u00f3mo gestionar archivos dotfiles con chezmoi 2022-02-12 2.11.2 Text How To Manage Dotfiles With Chezmoi 2022-02-02 2.11.0 Text (FR) Controler ses dotfiles en environnement \u00e9ph\u00e9m\u00e8re 2022-02-01 2.10.1 Text (JP) chezmoi \u3067 dotfiles \u3092\u624b\u8efd\u306b\u67d4\u8edf\u306b\u30bb\u30ad\u30e5\u30a2\u306b\u7ba1\u7406\u3059\u308b 2022-01-26 2.10.1 Text (JP) chezmoi \u3067 dotfiles \u3092\u7ba1\u7406\u3059\u308b 2022-01-12 2.9.5 Text (IT) Come funzionano i miei Mac 2021-12-23 2.9.3 Text Use Chezmoi to guarantee idempotency of terminal 2021-12-20 2.9.3 Text How chezmoi Implements Cross-Platform CI 2021-12-13 2.9.3 Text Managing Dotfiles With Chezmoi 2021-12-08 2.9.3 Video How Go makes chezmoi possible 2021-12-04 2.9.2 Text Advanced features of Chezmoi 2021-12-01 2.9.1 Text Chezmoi 2 2021-11-27 2.8.0 Video (TH) Command \u0e44\u0e23 2021-11-27 : \u0e22\u0e49\u0e32\u0e22 dotfiles \u0e44\u0e1b chezmoi 2021-11-26 2.8.0 Text Weekly Journal 47 - chezmoi, neovim 2021-10-26 2.7.3 Text (RU) \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a 2021-10-25 2.7.3 Text Share credentials across machines using chezmoi and bitwarden 2021-09-18 2.1.2 Audio/text PBS 125 of X \u2014 Chezmoi on Multiple Computers 2021-09-14 2.2.0 Text Managing preference plists under Chezmoi 2021-09-06 2.2.0 Video chezmoi: Organize your dotfiles across multiple computers 2021-09-06 2.2.0 Text chezmoi dotfile management 2021-09-04 2.2.0 Text Configuration Management 2021-09-04 2.1.2 Audio/text PBS 124 of X \u2014 Chezmoi Templates 2021-08-22 2.1.2 Audio/text PBS 123 of X \u2014 Backing up and Syncing Dot Files with Chezmoi 2021-08-08 2.1.2 Audio/text PBS 122 of X \u2014 Managing Dot Files with Chezmoi 2021-08-04 2.1.2 Text (PT) Como instalar o Chezmoi, um gerenciador de dotfiles, no Ubuntu, Linux Mint, Fedora, Debian 2021-07-23 2.1.2 Audio/text PBS 121 of X \u2014 Managing Dot Files and an Introduction to Chezmoi 2021-07-15 2.1.2 Text (CN) \u4f7f\u7528Chezmoi\u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 2021-05-14 2.0.12 Text A brief history of my dotfile management 2021-05-12 2.0.12 Text My Dotfiles Story: A Journey to Chezmoi 2021-05-10 2.0.11 Text Development Environment (2021) 2021-04-08 2.0.9 Text (FR) Bienvenue chez moi 2021-04-01 2.0.7 Text ChezMoi 2021-02-17 1.8.11 Text (JP) chezmoi \u3067 dotfiles \u3092\u624b\u8efd\u306b\u67d4\u8edf\u306b\u30bb\u30ad\u30e5\u30a2\u306b\u7ba1\u7406\u3059\u308b 2021-02-07 1.8.10 Text (JP) chezmoi\u59cb\u3081\u305f 2021-02-06 1.8.10 Video chezmoi: manage your dotfiles across multiple, diverse machines, securely 2021-01-29 1.8.10 Text (CN) \u7528 Chezmoi \u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 2021-01-12 1.8.10 Text Automating the Setup of a New Mac With All Your Apps, Preferences, and Development Tools 2020-11-06 1.8.8 Text Chezmoi \u2013 Securely Manage dotfiles across multiple machines 2020-11-05 1.8.8 Text Using chezmoi to manage dotfiles 2020-10-05 1.8.6 Text Dotfiles with Chezmoi 2020-10-03 1.8.6 Text Chezmoi Merging 2020-08-13 1.8.3 Text Using BitWarden and Chezmoi to manage SSH keys 2020-08-09 1.8.3 Text Automating and testing dotfiles 2020-08-03 1.8.3 Text Automating a Linux in Windows Dev Setup 2020-07-06 1.8.3 Video Conf42: chezmoi: Manage your dotfiles across multiple machines, securely 2020-07-03 1.8.3 Text Feeling at home in a LXD container 2020-06-15 1.8.2 Text Dotfiles management using chezmoi - How I Use Linux Desktop at Work Part5 2020-04-27 1.8.0 Text Managing my dotfiles with chezmoi 2020-04-20 1.8.0 Text (FR) Gestion des dotfiles et des secrets avec chezmoi 2020-04-19 1.7.19 Text (FR) Git & dotfiles : versionner ses fichiers de configuration 2020-04-16 1.7.19 Text (FR) Chezmoi, visite guid\u00e9e 2020-04-17 1.7.17 Text (CN) \u7528 Chezmoi \u53d6\u56de\u4f60\u7684\u70b9\u6587\u4ef6 2020-04-03 1.7.17 Text Fedora Magazine: Take back your dotfiles with Chezmoi 2020-04-01 1.7.17 Text Managing dotfiles and secret with chezmoi 2020-03-12 1.7.16 Video Managing Dotfiles with ChezMoi 2019-11-20 1.7.2 Audio/video FLOSS weekly episode 556: chezmoi 2019-01-10 0.0.11 Text Linux Fu: The kitchen sync To add your article to this page please either open an issue or submit a pull request that modifies assets/chezmoi.io/docs/links/articles-podcasts-and-videos.md.yaml .","title":"Articles, podcasts, and videos"},{"location":"links/articles-podcasts-and-videos/#articles-podcasts-and-videos","text":"Tip Recommended article: Fedora Magazine: Take back your dotfiles with Chezmoi Tip Recommended video: chezmoi: manage your dotfiles across multiple, diverse machines, securely Tip Recommended podcast: Managing Dot Files and an Introduction to Chezmoi Date Version Format Link 2022-04-27 2.15.1 Video Easily moving Linux installs 2022-04-25 2.15.1 Text Easily moving Linux installs 2022-03-13 2.14.0 Text Tools I love: Chezmoi 2022-03-11 2.14.0 Audio The Real Python Podcast: Episode 101: Tools for Setting Up Python on a New Machine 2022-03-03 2.13.0 Text Local Environment-as-Code: Is It Possible Yet? 2022-02-22 2.12.1 Text (JP) chezmoi \u3092\u4f7f\u3063\u3066 VSCode devcontainer \u5bfe\u5fdc dotfiles \u3092\u4f5c\u308b 2022-02-17 2.12.0 Text (ES) Qu\u00e9 son y c\u00f3mo gestionar archivos dotfiles con chezmoi 2022-02-12 2.11.2 Text How To Manage Dotfiles With Chezmoi 2022-02-02 2.11.0 Text (FR) Controler ses dotfiles en environnement \u00e9ph\u00e9m\u00e8re 2022-02-01 2.10.1 Text (JP) chezmoi \u3067 dotfiles \u3092\u624b\u8efd\u306b\u67d4\u8edf\u306b\u30bb\u30ad\u30e5\u30a2\u306b\u7ba1\u7406\u3059\u308b 2022-01-26 2.10.1 Text (JP) chezmoi \u3067 dotfiles \u3092\u7ba1\u7406\u3059\u308b 2022-01-12 2.9.5 Text (IT) Come funzionano i miei Mac 2021-12-23 2.9.3 Text Use Chezmoi to guarantee idempotency of terminal 2021-12-20 2.9.3 Text How chezmoi Implements Cross-Platform CI 2021-12-13 2.9.3 Text Managing Dotfiles With Chezmoi 2021-12-08 2.9.3 Video How Go makes chezmoi possible 2021-12-04 2.9.2 Text Advanced features of Chezmoi 2021-12-01 2.9.1 Text Chezmoi 2 2021-11-27 2.8.0 Video (TH) Command \u0e44\u0e23 2021-11-27 : \u0e22\u0e49\u0e32\u0e22 dotfiles \u0e44\u0e1b chezmoi 2021-11-26 2.8.0 Text Weekly Journal 47 - chezmoi, neovim 2021-10-26 2.7.3 Text (RU) \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a 2021-10-25 2.7.3 Text Share credentials across machines using chezmoi and bitwarden 2021-09-18 2.1.2 Audio/text PBS 125 of X \u2014 Chezmoi on Multiple Computers 2021-09-14 2.2.0 Text Managing preference plists under Chezmoi 2021-09-06 2.2.0 Video chezmoi: Organize your dotfiles across multiple computers 2021-09-06 2.2.0 Text chezmoi dotfile management 2021-09-04 2.2.0 Text Configuration Management 2021-09-04 2.1.2 Audio/text PBS 124 of X \u2014 Chezmoi Templates 2021-08-22 2.1.2 Audio/text PBS 123 of X \u2014 Backing up and Syncing Dot Files with Chezmoi 2021-08-08 2.1.2 Audio/text PBS 122 of X \u2014 Managing Dot Files with Chezmoi 2021-08-04 2.1.2 Text (PT) Como instalar o Chezmoi, um gerenciador de dotfiles, no Ubuntu, Linux Mint, Fedora, Debian 2021-07-23 2.1.2 Audio/text PBS 121 of X \u2014 Managing Dot Files and an Introduction to Chezmoi 2021-07-15 2.1.2 Text (CN) \u4f7f\u7528Chezmoi\u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 2021-05-14 2.0.12 Text A brief history of my dotfile management 2021-05-12 2.0.12 Text My Dotfiles Story: A Journey to Chezmoi 2021-05-10 2.0.11 Text Development Environment (2021) 2021-04-08 2.0.9 Text (FR) Bienvenue chez moi 2021-04-01 2.0.7 Text ChezMoi 2021-02-17 1.8.11 Text (JP) chezmoi \u3067 dotfiles \u3092\u624b\u8efd\u306b\u67d4\u8edf\u306b\u30bb\u30ad\u30e5\u30a2\u306b\u7ba1\u7406\u3059\u308b 2021-02-07 1.8.10 Text (JP) chezmoi\u59cb\u3081\u305f 2021-02-06 1.8.10 Video chezmoi: manage your dotfiles across multiple, diverse machines, securely 2021-01-29 1.8.10 Text (CN) \u7528 Chezmoi \u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 2021-01-12 1.8.10 Text Automating the Setup of a New Mac With All Your Apps, Preferences, and Development Tools 2020-11-06 1.8.8 Text Chezmoi \u2013 Securely Manage dotfiles across multiple machines 2020-11-05 1.8.8 Text Using chezmoi to manage dotfiles 2020-10-05 1.8.6 Text Dotfiles with Chezmoi 2020-10-03 1.8.6 Text Chezmoi Merging 2020-08-13 1.8.3 Text Using BitWarden and Chezmoi to manage SSH keys 2020-08-09 1.8.3 Text Automating and testing dotfiles 2020-08-03 1.8.3 Text Automating a Linux in Windows Dev Setup 2020-07-06 1.8.3 Video Conf42: chezmoi: Manage your dotfiles across multiple machines, securely 2020-07-03 1.8.3 Text Feeling at home in a LXD container 2020-06-15 1.8.2 Text Dotfiles management using chezmoi - How I Use Linux Desktop at Work Part5 2020-04-27 1.8.0 Text Managing my dotfiles with chezmoi 2020-04-20 1.8.0 Text (FR) Gestion des dotfiles et des secrets avec chezmoi 2020-04-19 1.7.19 Text (FR) Git & dotfiles : versionner ses fichiers de configuration 2020-04-16 1.7.19 Text (FR) Chezmoi, visite guid\u00e9e 2020-04-17 1.7.17 Text (CN) \u7528 Chezmoi \u53d6\u56de\u4f60\u7684\u70b9\u6587\u4ef6 2020-04-03 1.7.17 Text Fedora Magazine: Take back your dotfiles with Chezmoi 2020-04-01 1.7.17 Text Managing dotfiles and secret with chezmoi 2020-03-12 1.7.16 Video Managing Dotfiles with ChezMoi 2019-11-20 1.7.2 Audio/video FLOSS weekly episode 556: chezmoi 2019-01-10 0.0.11 Text Linux Fu: The kitchen sync To add your article to this page please either open an issue or submit a pull request that modifies assets/chezmoi.io/docs/links/articles-podcasts-and-videos.md.yaml .","title":"Articles, podcasts, and videos"},{"location":"links/dotfile-repos-using-chezmoi/","text":"Dotfile repos using chezmoi GitHub GitLab","title":"Dotfile repos using chezmoi"},{"location":"links/dotfile-repos-using-chezmoi/#dotfile-repos-using-chezmoi","text":"GitHub GitLab","title":"Dotfile repos using chezmoi"},{"location":"links/related-software/","text":"Related software github.com/alker0/chezmoi.vim Intelligent VIM syntax highlighting when editing files in your source directory. Works with both chezmoi edit and editing files directly. github.com/hussainweb/ansible-role-chezmoi Installs chezmoi on Ubuntu and Debian servers. github.com/joke/asdf-chezmoi chezmoi plugin for asdf version manager. github.com/tcaxle/drapeau An add-on to synchronize your colorschemes across systems and allow easy colorscheme switching using chezmoi templates. github.com/tuh8888/chezmoi.el Convenience functions for interacting with chezmoi in Emacs. github.com/Lilja/vim-chezmoi A plugin for VIM to apply the dotfile you are editing on :w .","title":"Related software"},{"location":"links/related-software/#related-software","text":"","title":"Related software"},{"location":"links/related-software/#githubcomalker0chezmoivim","text":"Intelligent VIM syntax highlighting when editing files in your source directory. Works with both chezmoi edit and editing files directly.","title":"github.com/alker0/chezmoi.vim"},{"location":"links/related-software/#githubcomhussainwebansible-role-chezmoi","text":"Installs chezmoi on Ubuntu and Debian servers.","title":"github.com/hussainweb/ansible-role-chezmoi"},{"location":"links/related-software/#githubcomjokeasdf-chezmoi","text":"chezmoi plugin for asdf version manager.","title":"github.com/joke/asdf-chezmoi"},{"location":"links/related-software/#githubcomtcaxledrapeau","text":"An add-on to synchronize your colorschemes across systems and allow easy colorscheme switching using chezmoi templates.","title":"github.com/tcaxle/drapeau"},{"location":"links/related-software/#githubcomtuh8888chezmoiel","text":"Convenience functions for interacting with chezmoi in Emacs.","title":"github.com/tuh8888/chezmoi.el"},{"location":"links/related-software/#githubcomliljavim-chezmoi","text":"A plugin for VIM to apply the dotfile you are editing on :w .","title":"github.com/Lilja/vim-chezmoi"},{"location":"reference/","text":"Reference Manage your dotfiles across multiple machines, securely.","title":"Reference"},{"location":"reference/#reference","text":"Manage your dotfiles across multiple machines, securely.","title":"Reference"},{"location":"reference/application-order/","text":"Application order chezmoi is deterministic in its order of application. The order is: Read the source state. Read the destination state. Compute the target state. Run run_before_ scripts in alphabetical order. Update entries in the target state (files, directories, scripts, symlinks, etc.) in alphabetical order of their target name. Run run_after_ scripts in alphabetical order. Target names are considered after all attributes are stripped. Example Given create_alpha and modify_dot_beta in the source state, .beta will be updated before alpha because .beta sorts before alpha . chezmoi assumes that the source or destination states are not modified while chezmoi is being executed. This assumption permits significant performance improvements, including allowing chezmoi to only read files from the source and destination states if they are needed to compute the target state. chezmoi's behavior when the above assumptions are violated is undefined. For example, using a run_before_ script to update files in the source or destination states violates the assumption that the source and destination states do not change while chezmoi is running.","title":"Application order"},{"location":"reference/application-order/#application-order","text":"chezmoi is deterministic in its order of application. The order is: Read the source state. Read the destination state. Compute the target state. Run run_before_ scripts in alphabetical order. Update entries in the target state (files, directories, scripts, symlinks, etc.) in alphabetical order of their target name. Run run_after_ scripts in alphabetical order. Target names are considered after all attributes are stripped. Example Given create_alpha and modify_dot_beta in the source state, .beta will be updated before alpha because .beta sorts before alpha . chezmoi assumes that the source or destination states are not modified while chezmoi is being executed. This assumption permits significant performance improvements, including allowing chezmoi to only read files from the source and destination states if they are needed to compute the target state. chezmoi's behavior when the above assumptions are violated is undefined. For example, using a run_before_ script to update files in the source or destination states violates the assumption that the source and destination states do not change while chezmoi is running.","title":"Application order"},{"location":"reference/concepts/","text":"Concepts chezmoi evaluates the source state for the current machine and then updates the destination directory, where: The source state declares the desired state of your home directory, including templates and machine-specific configuration. The source directory is where chezmoi stores the source state, by default ~/.local/share/chezmoi . The target state is the source state computed for the current machine. The destination directory is the directory that chezmoi manages, by default your home directory. A target is a file, directory, or symlink in the destination directory. The destination state is the current state of all the targets in the destination directory. The config file contains machine-specific configuration, by default it is ~/.config/chezmoi/chezmoi.toml . The working tree is the git working tree. Normally it is the same as the source directory, but can be a parent of the source directory.","title":"Concepts"},{"location":"reference/concepts/#concepts","text":"chezmoi evaluates the source state for the current machine and then updates the destination directory, where: The source state declares the desired state of your home directory, including templates and machine-specific configuration. The source directory is where chezmoi stores the source state, by default ~/.local/share/chezmoi . The target state is the source state computed for the current machine. The destination directory is the directory that chezmoi manages, by default your home directory. A target is a file, directory, or symlink in the destination directory. The destination state is the current state of all the targets in the destination directory. The config file contains machine-specific configuration, by default it is ~/.config/chezmoi/chezmoi.toml . The working tree is the git working tree. Normally it is the same as the source directory, but can be a parent of the source directory.","title":"Concepts"},{"location":"reference/source-state-attributes/","text":"Source state attributes chezmoi stores the source state of files, symbolic links, and directories in regular files and directories in the source directory ( ~/.local/share/chezmoi by default). This location can be overridden with the -S flag or by giving a value for sourceDir in the configuration file. Directory targets are represented as directories in the source state. All other target types are represented as files in the source state. Some state is encoded in the source names. The following prefixes and suffixes are special, and are collectively referred to as \"attributes\": Prefix Effect after_ Run script after updating the destination before_ Run script before updating the destination create_ Ensure that the file exists, and create it with contents if it does not dot_ Rename to use a leading dot, e.g. dot_foo becomes .foo empty_ Ensure the file exists, even if is empty. By default, empty files are removed encrypted_ Encrypt the file in the source state exact_ Remove anything not managed by chezmoi executable_ Add executable permissions to the target file literal_ Stop parsing prefix attributes modify_ Treat the contents as a script that modifies an existing file once_ Only run the script if it has not been run before onchange_ Only run the script if its contents have changed from the last time it was run private_ Remove all group and world permissions from the target file or directory readonly_ Remove all write permissions from the target file or directory remove_ Remove the file or symlink if it exists or the directory if it is empty run_ Treat the contents as a script to run symlink_ Create a symlink instead of a regular file Suffix Effect .literal Stop parsing suffix attributes .tmpl Treat the contents of the source file as a template Different target types allow different prefixes and suffixes. The order of prefixes is important. Target type Source type Allowed prefixes in order Allowed suffixes Directory Directory remove_ , exact_ , private_ , readonly_ , dot_ none Regular file File encrypted_ , private_ , executable_ , dot_ .tmpl Create file File create_ , encrypted_ , private_ , readonly_ , executable_ , dot_ .tmpl Modify file File modify_ , encrypted_ , private_ , readonly_ , executable_ , dot_ .tmpl Remove File remove_ , dot_ none Script File run_ , once_ or onchange_ , before_ or after_ .tmpl Symbolic link File symlink_ , dot_ .tmpl The literal_ prefix and .literal suffix can appear anywhere and stop attribute parsing. This permits filenames that would otherwise conflict with chezmoi's attributes to be represented. In addition, if the source file is encrypted, the suffix .age (when age encryption is used) or .asc (when gpg encryption is used) is stripped. These suffixes can be overridden with the age.suffix and gpg.suffix configuration variables. chezmoi ignores all files and directories in the source directory that begin with a . with the exception of files and directories that begin with .chezmoi .","title":"Source state attributes"},{"location":"reference/source-state-attributes/#source-state-attributes","text":"chezmoi stores the source state of files, symbolic links, and directories in regular files and directories in the source directory ( ~/.local/share/chezmoi by default). This location can be overridden with the -S flag or by giving a value for sourceDir in the configuration file. Directory targets are represented as directories in the source state. All other target types are represented as files in the source state. Some state is encoded in the source names. The following prefixes and suffixes are special, and are collectively referred to as \"attributes\": Prefix Effect after_ Run script after updating the destination before_ Run script before updating the destination create_ Ensure that the file exists, and create it with contents if it does not dot_ Rename to use a leading dot, e.g. dot_foo becomes .foo empty_ Ensure the file exists, even if is empty. By default, empty files are removed encrypted_ Encrypt the file in the source state exact_ Remove anything not managed by chezmoi executable_ Add executable permissions to the target file literal_ Stop parsing prefix attributes modify_ Treat the contents as a script that modifies an existing file once_ Only run the script if it has not been run before onchange_ Only run the script if its contents have changed from the last time it was run private_ Remove all group and world permissions from the target file or directory readonly_ Remove all write permissions from the target file or directory remove_ Remove the file or symlink if it exists or the directory if it is empty run_ Treat the contents as a script to run symlink_ Create a symlink instead of a regular file Suffix Effect .literal Stop parsing suffix attributes .tmpl Treat the contents of the source file as a template Different target types allow different prefixes and suffixes. The order of prefixes is important. Target type Source type Allowed prefixes in order Allowed suffixes Directory Directory remove_ , exact_ , private_ , readonly_ , dot_ none Regular file File encrypted_ , private_ , executable_ , dot_ .tmpl Create file File create_ , encrypted_ , private_ , readonly_ , executable_ , dot_ .tmpl Modify file File modify_ , encrypted_ , private_ , readonly_ , executable_ , dot_ .tmpl Remove File remove_ , dot_ none Script File run_ , once_ or onchange_ , before_ or after_ .tmpl Symbolic link File symlink_ , dot_ .tmpl The literal_ prefix and .literal suffix can appear anywhere and stop attribute parsing. This permits filenames that would otherwise conflict with chezmoi's attributes to be represented. In addition, if the source file is encrypted, the suffix .age (when age encryption is used) or .asc (when gpg encryption is used) is stripped. These suffixes can be overridden with the age.suffix and gpg.suffix configuration variables. chezmoi ignores all files and directories in the source directory that begin with a . with the exception of files and directories that begin with .chezmoi .","title":"Source state attributes"},{"location":"reference/target-types/","text":"Target types chezmoi will create, update, and delete files, directories, and symbolic links in the destination directory, and run scripts. chezmoi deterministically performs actions in ASCII order of their target name. Example Given a file dot_a , a script run_z , and a directory exact_dot_c , chezmoi will first create .a , create .c , and then execute run_z . Files Files are represented by regular files in the source state. The encrypted_ attribute determines whether the file in the source state is encrypted. The executable_ attribute will set the executable bits in the the target state, and the private_ attribute will clear all group and world permissions. The readonly_ attribute will clear all write permission bits in the target state. Files with the .tmpl suffix will be interpreted as templates. If the target contents are empty then the file will be removed, unless it has an empty_ prefix. Create file Files with the create_ prefix will be created in the target state with the contents of the file in the source state if they do not already exist. If the file in the destination state already exists then its contents will be left unchanged. Modify file Files with the modify_ prefix are treated as scripts that modify an existing file. The contents of the existing file (which maybe empty if the existing file does not exist or is empty) are passed to the script's standard input, and the new contents are read from the script's standard output. Remove entry Files with the remove_ prefix will cause the corresponding entry (file, directory, or symlink) to be removed in the target state. Directories Directories are represented by regular directories in the source state. The exact_ attribute causes chezmoi to remove any entries in the target state that are not explicitly specified in the source state, and the private_ attribute causes chezmoi to clear all group and world permissions. The readonly_ attribute will clear all write permission bits. Symbolic links Symbolic links are represented by regular files in the source state with the prefix symlink_ . The contents of the file will have a trailing newline stripped, and the result be interpreted as the target of the symbolic link. Symbolic links with the .tmpl suffix in the source state are interpreted as templates. If the target of the symbolic link is empty or consists only of whitespace, then the target is removed. Scripts Scripts are represented as regular files in the source state with prefix run_ . The file's contents (after being interpreted as a template if it has a .tmpl suffix) are executed. Scripts are executed on every chezmoi apply , unless they have the once_ or onchange_ attribute. run_once_ scripts are only executed if a script with the same contents has not been run before, i.e. if the script is new or if its contents have changed. run_onchange_ scripts are executed whenever their contents change, even if a script with the same contents has run before. Scripts with the before_ attribute are executed before any files, directories, or symlinks are updated. Scripts with the after_ attribute are executed after all files, directories, and symlinks have been updated. Scripts without an before_ or after_ attribute are executed in ASCII order of their target names with respect to files, directories, and symlinks. Scripts will normally run with their working directory set to their equivalent location in the destination directory. If the equivalent location in the destination directory either does not exist or is not a directory, then chezmoi will walk up the script's directory hierarchy and run the script in the first directory that exists and is a directory. Example A script in ~/.local/share/chezmoi/dir/run_script will be run with a working directory of ~/dir . Scripts on Windows The execution of scripts on Windows depends on the script's file extension. Windows will natively execute scripts with a .bat , .cmd , .com , and .exe extensions. Other extensions require an interpreter, which must be in your %PATH% . The default script interpreters are: Extension Command Arguments .pl perl none .py python3 none .ps1 powershell -NoLogo .rb ruby none Script interpreters can be added or overridden with the interpreters. extension section in the configuration file. Note The leading . is dropped from extension , for example to specify the interpreter for .pl files you configure interpreters.pl . Example To change the Python interpreter to C:\\Python39\\python3.exe and add a Tcl/Tk interpreter, include the following in your config file: ~/.config/chezmoi/chezmoi.toml [interpreters.py] command = 'C:\\Python39\\python3.exe' [interpreters.tcl] command = \"tclsh\" If the script in the source state is a template (with a .tmpl extension), then chezmoi will strip the .tmpl extension and use the next remaining extension to determine the interpreter to use. symlink mode By default, chezmoi will create regular files and directories. Setting mode = \"symlink\" will make chezmoi behave more like a dotfile manager that uses symlinks by default, i.e. chezmoi apply will make dotfiles symlinks to files in the source directory if the target is a regular file and is not encrypted, executable, private, or a template.","title":"Target types"},{"location":"reference/target-types/#target-types","text":"chezmoi will create, update, and delete files, directories, and symbolic links in the destination directory, and run scripts. chezmoi deterministically performs actions in ASCII order of their target name. Example Given a file dot_a , a script run_z , and a directory exact_dot_c , chezmoi will first create .a , create .c , and then execute run_z .","title":"Target types"},{"location":"reference/target-types/#files","text":"Files are represented by regular files in the source state. The encrypted_ attribute determines whether the file in the source state is encrypted. The executable_ attribute will set the executable bits in the the target state, and the private_ attribute will clear all group and world permissions. The readonly_ attribute will clear all write permission bits in the target state. Files with the .tmpl suffix will be interpreted as templates. If the target contents are empty then the file will be removed, unless it has an empty_ prefix.","title":"Files"},{"location":"reference/target-types/#create-file","text":"Files with the create_ prefix will be created in the target state with the contents of the file in the source state if they do not already exist. If the file in the destination state already exists then its contents will be left unchanged.","title":"Create file"},{"location":"reference/target-types/#modify-file","text":"Files with the modify_ prefix are treated as scripts that modify an existing file. The contents of the existing file (which maybe empty if the existing file does not exist or is empty) are passed to the script's standard input, and the new contents are read from the script's standard output.","title":"Modify file"},{"location":"reference/target-types/#remove-entry","text":"Files with the remove_ prefix will cause the corresponding entry (file, directory, or symlink) to be removed in the target state.","title":"Remove entry"},{"location":"reference/target-types/#directories","text":"Directories are represented by regular directories in the source state. The exact_ attribute causes chezmoi to remove any entries in the target state that are not explicitly specified in the source state, and the private_ attribute causes chezmoi to clear all group and world permissions. The readonly_ attribute will clear all write permission bits.","title":"Directories"},{"location":"reference/target-types/#symbolic-links","text":"Symbolic links are represented by regular files in the source state with the prefix symlink_ . The contents of the file will have a trailing newline stripped, and the result be interpreted as the target of the symbolic link. Symbolic links with the .tmpl suffix in the source state are interpreted as templates. If the target of the symbolic link is empty or consists only of whitespace, then the target is removed.","title":"Symbolic links"},{"location":"reference/target-types/#scripts","text":"Scripts are represented as regular files in the source state with prefix run_ . The file's contents (after being interpreted as a template if it has a .tmpl suffix) are executed. Scripts are executed on every chezmoi apply , unless they have the once_ or onchange_ attribute. run_once_ scripts are only executed if a script with the same contents has not been run before, i.e. if the script is new or if its contents have changed. run_onchange_ scripts are executed whenever their contents change, even if a script with the same contents has run before. Scripts with the before_ attribute are executed before any files, directories, or symlinks are updated. Scripts with the after_ attribute are executed after all files, directories, and symlinks have been updated. Scripts without an before_ or after_ attribute are executed in ASCII order of their target names with respect to files, directories, and symlinks. Scripts will normally run with their working directory set to their equivalent location in the destination directory. If the equivalent location in the destination directory either does not exist or is not a directory, then chezmoi will walk up the script's directory hierarchy and run the script in the first directory that exists and is a directory. Example A script in ~/.local/share/chezmoi/dir/run_script will be run with a working directory of ~/dir .","title":"Scripts"},{"location":"reference/target-types/#scripts-on-windows","text":"The execution of scripts on Windows depends on the script's file extension. Windows will natively execute scripts with a .bat , .cmd , .com , and .exe extensions. Other extensions require an interpreter, which must be in your %PATH% . The default script interpreters are: Extension Command Arguments .pl perl none .py python3 none .ps1 powershell -NoLogo .rb ruby none Script interpreters can be added or overridden with the interpreters. extension section in the configuration file. Note The leading . is dropped from extension , for example to specify the interpreter for .pl files you configure interpreters.pl . Example To change the Python interpreter to C:\\Python39\\python3.exe and add a Tcl/Tk interpreter, include the following in your config file: ~/.config/chezmoi/chezmoi.toml [interpreters.py] command = 'C:\\Python39\\python3.exe' [interpreters.tcl] command = \"tclsh\" If the script in the source state is a template (with a .tmpl extension), then chezmoi will strip the .tmpl extension and use the next remaining extension to determine the interpreter to use.","title":"Scripts on Windows"},{"location":"reference/target-types/#symlink-mode","text":"By default, chezmoi will create regular files and directories. Setting mode = \"symlink\" will make chezmoi behave more like a dotfile manager that uses symlinks by default, i.e. chezmoi apply will make dotfiles symlinks to files in the source directory if the target is a regular file and is not encrypted, executable, private, or a template.","title":"symlink mode"},{"location":"reference/command-line-flags/","text":"Command line flags Command line flags override any values set in the configuration file.","title":"Command line flags"},{"location":"reference/command-line-flags/#command-line-flags","text":"Command line flags override any values set in the configuration file.","title":"Command line flags"},{"location":"reference/command-line-flags/common/","text":"Common command line flags The following flags apply to multiple commands where they are relevant. -f , --format json | yaml Set the output format. -i , --include types Only operate on target state entries of type types . types is a comma-separated list of target states ( all , dirs , files , remove , scripts , symlinks , and encrypted ) and can be excluded by preceding them with a no . Example --include=dirs,files will cause the command to apply to directories and files only. --init Regenerate and reread the config file from the config file template before computing the target state. -r , --recursive Recurse into subdirectories, true by default. -x , --exclude types Exclude target state entries of type types . types is a comma-separated list of target states ( all , dirs , files , remove , scripts , symlinks , encrypted , and externals ). Example --exclude=scripts will cause the command to not run scripts and --exclude=encrypted will exclude encrypted files.","title":"Common"},{"location":"reference/command-line-flags/common/#common-command-line-flags","text":"The following flags apply to multiple commands where they are relevant.","title":"Common command line flags"},{"location":"reference/command-line-flags/common/#-f-format-jsonyaml","text":"Set the output format.","title":"-f, --format json|yaml"},{"location":"reference/command-line-flags/common/#-i-include-types","text":"Only operate on target state entries of type types . types is a comma-separated list of target states ( all , dirs , files , remove , scripts , symlinks , and encrypted ) and can be excluded by preceding them with a no . Example --include=dirs,files will cause the command to apply to directories and files only.","title":"-i, --include types"},{"location":"reference/command-line-flags/common/#-init","text":"Regenerate and reread the config file from the config file template before computing the target state.","title":"--init"},{"location":"reference/command-line-flags/common/#-r-recursive","text":"Recurse into subdirectories, true by default.","title":"-r, --recursive"},{"location":"reference/command-line-flags/common/#-x-exclude-types","text":"Exclude target state entries of type types . types is a comma-separated list of target states ( all , dirs , files , remove , scripts , symlinks , encrypted , and externals ). Example --exclude=scripts will cause the command to not run scripts and --exclude=encrypted will exclude encrypted files.","title":"-x, --exclude types"},{"location":"reference/command-line-flags/developer/","text":"Developer command line flags The following flags are global but only relevant for developers and debugging. --cpu-profile filename Write a Go CPU profile to filename . --debug Log information helpful for debugging. --gops Enable the gops agent.","title":"Developer"},{"location":"reference/command-line-flags/developer/#developer-command-line-flags","text":"The following flags are global but only relevant for developers and debugging.","title":"Developer command line flags"},{"location":"reference/command-line-flags/developer/#-cpu-profile-filename","text":"Write a Go CPU profile to filename .","title":"--cpu-profile filename"},{"location":"reference/command-line-flags/developer/#-debug","text":"Log information helpful for debugging.","title":"--debug"},{"location":"reference/command-line-flags/developer/#-gops","text":"Enable the gops agent.","title":"--gops"},{"location":"reference/command-line-flags/global/","text":"Global command line flags --cache directory Use directory as the cache directory. --color value Colorize diffs, value can be on , off , auto , or any boolean-like value recognized by parseBool . The default is auto which will colorize diffs only if the the environment variable $NO_COLOR is not set and stdout is a terminal. -c , --config filename Read the configuration from filename . --config-format json | toml | yaml Assume the configuration file is in the given format. This is only needed if the config filename does not have an extension, for example when it is /dev/stdin . -D , --destination directory Use directory as the destination directory. -n , --dry-run Set dry run mode. In dry run mode, the destination directory is never modified. This is most useful in combination with the -v (verbose) flag to print changes that would be made without making them. --force Make changes without prompting. -h , --help Print help. -k , --keep-going Keep going as far as possible after a encountering an error. --no-pager Do not use the pager. --no-tty Do not attempt to get a TTY to read input and passwords. Instead, read them from stdin. -o , --output filename Write the output to filename instead of stdout. --persistent-state filename Read and write the persistent state from filename . By default, chezmoi stores its persistent state in chezmoistate.boltdb in the same directory as its configuration file. -R , --refresh-externals Refresh externals cache. See .chezmoiexternal.$FORMAT . -S , --source directory Use directory as the source directory. --use-builtin-age value Use chezmoi's builtin age encryption instead of an external age command. value can be on , off , auto , or any boolean-like value recognized by parseBool . The default is auto which will only use the builtin age if age.command cannot be found in $PATH . The builtin age command does not support passphrases, symmetric encryption, or the use of SSH keys. --use-builtin-git value Use chezmoi's builtin git instead of git.command for the init and update commands. value can be on , off , auto , or any boolean-like value recognized by parseBool . The default is auto which will only use the builtin git if git.command cannot be found in $PATH . Info chezmoi's builtin git has only supports the HTTP and HTTPS transports and does not support git-repo externals. -v , --verbose Set verbose mode. In verbose mode, chezmoi prints the changes that it is making as approximate shell commands, and any differences in files between the target state and the destination set are printed as unified diffs. --version Print the version of chezmoi, the commit at which it was built, and the build timestamp. -w , --working-tree directory Use directory as the git working tree directory. By default, chezmoi searches the source directory and then its ancestors for the first directory that contains a .git directory.","title":"Global"},{"location":"reference/command-line-flags/global/#global-command-line-flags","text":"","title":"Global command line flags"},{"location":"reference/command-line-flags/global/#-cache-directory","text":"Use directory as the cache directory.","title":"--cache directory"},{"location":"reference/command-line-flags/global/#-color-value","text":"Colorize diffs, value can be on , off , auto , or any boolean-like value recognized by parseBool . The default is auto which will colorize diffs only if the the environment variable $NO_COLOR is not set and stdout is a terminal.","title":"--color value"},{"location":"reference/command-line-flags/global/#-c-config-filename","text":"Read the configuration from filename .","title":"-c, --config filename"},{"location":"reference/command-line-flags/global/#-config-format-jsontomlyaml","text":"Assume the configuration file is in the given format. This is only needed if the config filename does not have an extension, for example when it is /dev/stdin .","title":"--config-format json|toml|yaml"},{"location":"reference/command-line-flags/global/#-d-destination-directory","text":"Use directory as the destination directory.","title":"-D, --destination directory"},{"location":"reference/command-line-flags/global/#-n-dry-run","text":"Set dry run mode. In dry run mode, the destination directory is never modified. This is most useful in combination with the -v (verbose) flag to print changes that would be made without making them.","title":"-n, --dry-run"},{"location":"reference/command-line-flags/global/#-force","text":"Make changes without prompting.","title":"--force"},{"location":"reference/command-line-flags/global/#-h-help","text":"Print help.","title":"-h, --help"},{"location":"reference/command-line-flags/global/#-k-keep-going","text":"Keep going as far as possible after a encountering an error.","title":"-k, --keep-going"},{"location":"reference/command-line-flags/global/#-no-pager","text":"Do not use the pager.","title":"--no-pager"},{"location":"reference/command-line-flags/global/#-no-tty","text":"Do not attempt to get a TTY to read input and passwords. Instead, read them from stdin.","title":"--no-tty"},{"location":"reference/command-line-flags/global/#-o-output-filename","text":"Write the output to filename instead of stdout.","title":"-o, --output filename"},{"location":"reference/command-line-flags/global/#-persistent-state-filename","text":"Read and write the persistent state from filename . By default, chezmoi stores its persistent state in chezmoistate.boltdb in the same directory as its configuration file.","title":"--persistent-state filename"},{"location":"reference/command-line-flags/global/#-r-refresh-externals","text":"Refresh externals cache. See .chezmoiexternal.$FORMAT .","title":"-R, --refresh-externals"},{"location":"reference/command-line-flags/global/#-s-source-directory","text":"Use directory as the source directory.","title":"-S, --source directory"},{"location":"reference/command-line-flags/global/#-use-builtin-age-value","text":"Use chezmoi's builtin age encryption instead of an external age command. value can be on , off , auto , or any boolean-like value recognized by parseBool . The default is auto which will only use the builtin age if age.command cannot be found in $PATH . The builtin age command does not support passphrases, symmetric encryption, or the use of SSH keys.","title":"--use-builtin-age value"},{"location":"reference/command-line-flags/global/#-use-builtin-git-value","text":"Use chezmoi's builtin git instead of git.command for the init and update commands. value can be on , off , auto , or any boolean-like value recognized by parseBool . The default is auto which will only use the builtin git if git.command cannot be found in $PATH . Info chezmoi's builtin git has only supports the HTTP and HTTPS transports and does not support git-repo externals.","title":"--use-builtin-git value"},{"location":"reference/command-line-flags/global/#-v-verbose","text":"Set verbose mode. In verbose mode, chezmoi prints the changes that it is making as approximate shell commands, and any differences in files between the target state and the destination set are printed as unified diffs.","title":"-v, --verbose"},{"location":"reference/command-line-flags/global/#-version","text":"Print the version of chezmoi, the commit at which it was built, and the build timestamp.","title":"--version"},{"location":"reference/command-line-flags/global/#-w-working-tree-directory","text":"Use directory as the git working tree directory. By default, chezmoi searches the source directory and then its ancestors for the first directory that contains a .git directory.","title":"-w, --working-tree directory"},{"location":"reference/commands/add/","text":"add target ... Add target s to the source state. If any target is already in the source state, then its source state is replaced with its current state in the destination directory. --autotemplate Automatically generate a template by replacing strings with variable names from the data section of the config file. Longer substitutions occur before shorter ones. This implies the --template option. -e , --empty Set the empty attribute on added files. --encrypt Encrypt files using the defined encryption method. -f , --force Add target s, even if doing so would cause a source template to be overwritten. --follow If the last part of a target is a symlink, add the target of the symlink instead of the symlink itself. --exact Set the exact attribute on added directories. -i , --include types Only add entries of type types . -p , --prompt Interactively prompt before adding each file. -r , --recursive Recursively add all files, directories, and symlinks. -T , --template Set the template attribute on added files and symlinks. --template-symlinks When adding symlink to an absolute path in the source directory or destination directory, create a symlink template with .chezmoi.sourceDir or .chezmoi.homeDir . This is useful for creating portable absolute symlinks. Bug chezmoi add will fail if the entry being added is in a directory implicitly created by an external . See this GitHub issue for details. Example $ chezmoi add ~/.bashrc $ chezmoi add ~/.gitconfig --template $ chezmoi add ~/.ssh/id_rsa --encrypt $ chezmoi add ~/.vim --recursive $ chezmoi add ~/.oh-my-zsh --exact --recursive","title":"add"},{"location":"reference/commands/add/#add-target","text":"Add target s to the source state. If any target is already in the source state, then its source state is replaced with its current state in the destination directory.","title":"add target..."},{"location":"reference/commands/add/#-autotemplate","text":"Automatically generate a template by replacing strings with variable names from the data section of the config file. Longer substitutions occur before shorter ones. This implies the --template option.","title":"--autotemplate"},{"location":"reference/commands/add/#-e-empty","text":"Set the empty attribute on added files.","title":"-e, --empty"},{"location":"reference/commands/add/#-encrypt","text":"Encrypt files using the defined encryption method.","title":"--encrypt"},{"location":"reference/commands/add/#-f-force","text":"Add target s, even if doing so would cause a source template to be overwritten.","title":"-f, --force"},{"location":"reference/commands/add/#-follow","text":"If the last part of a target is a symlink, add the target of the symlink instead of the symlink itself.","title":"--follow"},{"location":"reference/commands/add/#-exact","text":"Set the exact attribute on added directories.","title":"--exact"},{"location":"reference/commands/add/#-i-include-types","text":"Only add entries of type types .","title":"-i, --include types"},{"location":"reference/commands/add/#-p-prompt","text":"Interactively prompt before adding each file.","title":"-p, --prompt"},{"location":"reference/commands/add/#-r-recursive","text":"Recursively add all files, directories, and symlinks.","title":"-r, --recursive"},{"location":"reference/commands/add/#-t-template","text":"Set the template attribute on added files and symlinks.","title":"-T, --template"},{"location":"reference/commands/add/#-template-symlinks","text":"When adding symlink to an absolute path in the source directory or destination directory, create a symlink template with .chezmoi.sourceDir or .chezmoi.homeDir . This is useful for creating portable absolute symlinks. Bug chezmoi add will fail if the entry being added is in a directory implicitly created by an external . See this GitHub issue for details. Example $ chezmoi add ~/.bashrc $ chezmoi add ~/.gitconfig --template $ chezmoi add ~/.ssh/id_rsa --encrypt $ chezmoi add ~/.vim --recursive $ chezmoi add ~/.oh-my-zsh --exact --recursive","title":"--template-symlinks"},{"location":"reference/commands/apply/","text":"apply [ target ...] Ensure that target ... are in the target state, updating them if necessary. If no targets are specified, the state of all targets are ensured. If a target has been modified since chezmoi last wrote it then the user will be prompted if they want to overwrite the file. -i , --include types Only add entries of type types . --source-path Specify targets by source path, rather than target path. This is useful for applying changes after editing. Example $ chezmoi apply $ chezmoi apply --dry-run --verbose $ chezmoi apply ~/.bashrc","title":"apply"},{"location":"reference/commands/apply/#apply-target","text":"Ensure that target ... are in the target state, updating them if necessary. If no targets are specified, the state of all targets are ensured. If a target has been modified since chezmoi last wrote it then the user will be prompted if they want to overwrite the file.","title":"apply [target...]"},{"location":"reference/commands/apply/#-i-include-types","text":"Only add entries of type types .","title":"-i, --include types"},{"location":"reference/commands/apply/#-source-path","text":"Specify targets by source path, rather than target path. This is useful for applying changes after editing. Example $ chezmoi apply $ chezmoi apply --dry-run --verbose $ chezmoi apply ~/.bashrc","title":"--source-path"},{"location":"reference/commands/archive/","text":"archive [ target ....] Generate an archive of the target state, or only the targets specified. This can be piped into tar to inspect the target state. -f , --format tar | tar.gz | tgz | zip Write the archive in format . If --output is set the format is guessed from the extension, otherwise the default is tar . -i , --include types Only include entries of type types . -z , --gzip Compress the archive with gzip. This is automatically set if the format is tar.gz or tgz and is ignored if the format is zip . Example $ chezmoi archive | tar tvf - $ chezmoi archive --output = dotfiles.tar.gz $ chezmoi archive --output = dotfiles.zip","title":"archive"},{"location":"reference/commands/archive/#archive-target","text":"Generate an archive of the target state, or only the targets specified. This can be piped into tar to inspect the target state.","title":"archive [target....]"},{"location":"reference/commands/archive/#-f-format-tartargztgzzip","text":"Write the archive in format . If --output is set the format is guessed from the extension, otherwise the default is tar .","title":"-f, --format tar|tar.gz|tgz|zip"},{"location":"reference/commands/archive/#-i-include-types","text":"Only include entries of type types .","title":"-i, --include types"},{"location":"reference/commands/archive/#-z-gzip","text":"Compress the archive with gzip. This is automatically set if the format is tar.gz or tgz and is ignored if the format is zip . Example $ chezmoi archive | tar tvf - $ chezmoi archive --output = dotfiles.tar.gz $ chezmoi archive --output = dotfiles.zip","title":"-z, --gzip"},{"location":"reference/commands/cat/","text":"cat target ... Write the target contents of target s to stdout. target s must be files, scripts, or symlinks. For files, the target file contents are written. For scripts, the script's contents are written. For symlinks, the target target is written. Example $ chezmoi cat ~/.bashrc","title":"cat"},{"location":"reference/commands/cat/#cat-target","text":"Write the target contents of target s to stdout. target s must be files, scripts, or symlinks. For files, the target file contents are written. For scripts, the script's contents are written. For symlinks, the target target is written. Example $ chezmoi cat ~/.bashrc","title":"cat target..."},{"location":"reference/commands/cd/","text":"cd Launch a shell in the working tree (typically the source directory). chezmoi will launch the command set by the cd.command configuration variable with any extra arguments specified by cd.args . If this is not set, chezmoi will attempt to detect your shell and finally fall back to an OS-specific default. Hint This does not change the current directory of the current shell. To do that, instead use: $ cd $( chezmoi source-path ) Example $ chezmoi cd","title":"cd"},{"location":"reference/commands/cd/#cd","text":"Launch a shell in the working tree (typically the source directory). chezmoi will launch the command set by the cd.command configuration variable with any extra arguments specified by cd.args . If this is not set, chezmoi will attempt to detect your shell and finally fall back to an OS-specific default. Hint This does not change the current directory of the current shell. To do that, instead use: $ cd $( chezmoi source-path ) Example $ chezmoi cd","title":"cd"},{"location":"reference/commands/chattr/","text":"chattr modifier target ... Change the attributes and/or type of target s. modifier specifies what to modify. Add attributes by specifying them or their abbreviations directly, optionally prefixed with a plus sign ( + ). Remove attributes by prefixing them or their attributes with the string no or a minus sign ( - ). The available attribute modifiers and their abbreviations are: Attribute modifier Abbreviation after a before b empty e encrypted none exact none executable x once o private p readonly r remove none template t The type of a target can be changed using a type modifier: Type modifier create modify script symlink The negative form of type modifiers, e.g. nocreate , changes the target to be a regular file if it is of that type, otherwise the type is left unchanged. Multiple modifications may be specified by separating them with a comma ( , ). If you use the - modifier form then you must put modifier after a -- to prevent chezmoi from interpreting - modifier as an option. Example $ chezmoi chattr template ~/.bashrc $ chezmoi chattr noempty ~/.profile $ chezmoi chattr private,template ~/.netrc $ chezmoi chattr -- -x ~/.zshrc $ chezmoi chattr +create,+private ~/.kube/config","title":"chattr"},{"location":"reference/commands/chattr/#chattr-modifier-target","text":"Change the attributes and/or type of target s. modifier specifies what to modify. Add attributes by specifying them or their abbreviations directly, optionally prefixed with a plus sign ( + ). Remove attributes by prefixing them or their attributes with the string no or a minus sign ( - ). The available attribute modifiers and their abbreviations are: Attribute modifier Abbreviation after a before b empty e encrypted none exact none executable x once o private p readonly r remove none template t The type of a target can be changed using a type modifier: Type modifier create modify script symlink The negative form of type modifiers, e.g. nocreate , changes the target to be a regular file if it is of that type, otherwise the type is left unchanged. Multiple modifications may be specified by separating them with a comma ( , ). If you use the - modifier form then you must put modifier after a -- to prevent chezmoi from interpreting - modifier as an option. Example $ chezmoi chattr template ~/.bashrc $ chezmoi chattr noempty ~/.profile $ chezmoi chattr private,template ~/.netrc $ chezmoi chattr -- -x ~/.zshrc $ chezmoi chattr +create,+private ~/.kube/config","title":"chattr modifier target..."},{"location":"reference/commands/completion/","text":"completion shell Generate shell completion code for the specified shell ( bash , fish , powershell , or zsh ). Example $ chezmoi completion bash $ chezmoi completion fish --output = ~/.config/fish/completions/chezmoi.fish","title":"completion"},{"location":"reference/commands/completion/#completion-shell","text":"Generate shell completion code for the specified shell ( bash , fish , powershell , or zsh ). Example $ chezmoi completion bash $ chezmoi completion fish --output = ~/.config/fish/completions/chezmoi.fish","title":"completion shell"},{"location":"reference/commands/data/","text":"data Write the computed template data to stdout. -f , --format json | yaml Set the output format. Example $ chezmoi data $ chezmoi data --format = yaml","title":"data"},{"location":"reference/commands/data/#data","text":"Write the computed template data to stdout.","title":"data"},{"location":"reference/commands/data/#-f-format-jsonyaml","text":"Set the output format. Example $ chezmoi data $ chezmoi data --format = yaml","title":"-f, --format json|yaml"},{"location":"reference/commands/decrypt/","text":"decrypt [ file ...] Decrypt file s using chezmoi's configured encryption. If no files are given, decrypt the standard input. The decrypted result is written to the standard output or a file if the --output flag is set.","title":"decrypt"},{"location":"reference/commands/decrypt/#decrypt-file","text":"Decrypt file s using chezmoi's configured encryption. If no files are given, decrypt the standard input. The decrypted result is written to the standard output or a file if the --output flag is set.","title":"decrypt [file...]"},{"location":"reference/commands/diff/","text":"diff [ target ...] Print the difference between the target state and the destination state for target s. If no targets are specified, print the differences for all targets. If a diff.pager command is set in the configuration file then the output will be piped into it. If diff.command is set then it will be invoked to show individual file differences with diff.args passed as arguments. Each element of diff.args is interpreted as a template with the variables .Destination and .Target available corresponding to the path of the file in the source and target state respectively. The default value of diff.args is [\"{{ .Destination }}\", \"{{ .Target }}\"] . If diff.args does not contain any template arguments then {{ .Destination }} and {{ .Target }} will be appended automatically. --reverse Reverse the direction of the diff, i.e. show the changes to the target required to match the destination. --pager pager Pager to use for output. --use-builtin-diff Use chezmoi's builtin diff, even if the diff.command configuration variable is set. Example $ chezmoi diff $ chezmoi diff ~/.bashrc","title":"diff"},{"location":"reference/commands/diff/#diff-target","text":"Print the difference between the target state and the destination state for target s. If no targets are specified, print the differences for all targets. If a diff.pager command is set in the configuration file then the output will be piped into it. If diff.command is set then it will be invoked to show individual file differences with diff.args passed as arguments. Each element of diff.args is interpreted as a template with the variables .Destination and .Target available corresponding to the path of the file in the source and target state respectively. The default value of diff.args is [\"{{ .Destination }}\", \"{{ .Target }}\"] . If diff.args does not contain any template arguments then {{ .Destination }} and {{ .Target }} will be appended automatically.","title":"diff [target...]"},{"location":"reference/commands/diff/#-reverse","text":"Reverse the direction of the diff, i.e. show the changes to the target required to match the destination.","title":"--reverse"},{"location":"reference/commands/diff/#-pager-pager","text":"Pager to use for output.","title":"--pager pager"},{"location":"reference/commands/diff/#-use-builtin-diff","text":"Use chezmoi's builtin diff, even if the diff.command configuration variable is set. Example $ chezmoi diff $ chezmoi diff ~/.bashrc","title":"--use-builtin-diff"},{"location":"reference/commands/doctor/","text":"doctor Check for potential problems. Example $ chezmoi doctor","title":"doctor"},{"location":"reference/commands/doctor/#doctor","text":"Check for potential problems. Example $ chezmoi doctor","title":"doctor"},{"location":"reference/commands/dump/","text":"dump [ target ...] Dump the target state of target s. If no targets are specified, then the entire target state. -f , --format json | yaml Set the output format. -i , --include types Only include entries of type types . Example $ chezmoi dump ~/.bashrc $ chezmoi dump --format = yaml","title":"dump"},{"location":"reference/commands/dump/#dump-target","text":"Dump the target state of target s. If no targets are specified, then the entire target state.","title":"dump [target...]"},{"location":"reference/commands/dump/#-f-format-jsonyaml","text":"Set the output format.","title":"-f, --format json|yaml"},{"location":"reference/commands/dump/#-i-include-types","text":"Only include entries of type types . Example $ chezmoi dump ~/.bashrc $ chezmoi dump --format = yaml","title":"-i, --include types"},{"location":"reference/commands/edit-config/","text":"edit-config Edit the configuration file. Example $ chezmoi edit-config","title":"edit-config"},{"location":"reference/commands/edit-config/#edit-config","text":"Edit the configuration file. Example $ chezmoi edit-config","title":"edit-config"},{"location":"reference/commands/edit/","text":"edit [ target ...] Edit the source state of target s, which must be files or symlinks. If no targets are given then the working tree of the source directory is opened. Encrypted files are decrypted to a private temporary directory and the editor is invoked with the decrypted file. When the editor exits the edited decrypted file is re-encrypted and replaces the original file in the source state. If the operating system supports hard links, then the edit command invokes the editor with filenames which match the target filename, unless the edit.hardlink configuration variable is set to false the --hardlink=false command line flag is set. -a , --apply Apply target immediately after editing. Ignored if there are no targets. --hardlink bool Invoke the editor with a hard link to the source file with a name matching the target filename. This can help the editor determine the type of the file correctly. This is the default. Example $ chezmoi edit ~/.bashrc $ chezmoi edit ~/.bashrc --apply $ chezmoi edit","title":"edit"},{"location":"reference/commands/edit/#edit-target","text":"Edit the source state of target s, which must be files or symlinks. If no targets are given then the working tree of the source directory is opened. Encrypted files are decrypted to a private temporary directory and the editor is invoked with the decrypted file. When the editor exits the edited decrypted file is re-encrypted and replaces the original file in the source state. If the operating system supports hard links, then the edit command invokes the editor with filenames which match the target filename, unless the edit.hardlink configuration variable is set to false the --hardlink=false command line flag is set.","title":"edit [target...]"},{"location":"reference/commands/edit/#-a-apply","text":"Apply target immediately after editing. Ignored if there are no targets.","title":"-a, --apply"},{"location":"reference/commands/edit/#-hardlink-bool","text":"Invoke the editor with a hard link to the source file with a name matching the target filename. This can help the editor determine the type of the file correctly. This is the default. Example $ chezmoi edit ~/.bashrc $ chezmoi edit ~/.bashrc --apply $ chezmoi edit","title":"--hardlink bool"},{"location":"reference/commands/encrypt/","text":"encrypt [ file ...] Encrypt file s using chezmoi's configured encryption. If no files are given, encrypt the standard input. The encrypted result is written to the standard output or a file if the --output flag is set.","title":"encrypt"},{"location":"reference/commands/encrypt/#encrypt-file","text":"Encrypt file s using chezmoi's configured encryption. If no files are given, encrypt the standard input. The encrypted result is written to the standard output or a file if the --output flag is set.","title":"encrypt [file...]"},{"location":"reference/commands/execute-template/","text":"execute-template [ template ...] Execute template s. This is useful for testing templates or for calling chezmoi from other scripts. templates are interpreted as literal templates, with no whitespace added to the output between arguments. If no templates are specified, the template is read from stdin. --init , -i Include simulated functions only available during chezmoi init . --promptBool pairs Simulate the promptBool function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptBool is called with a prompt that does not match any of pairs , then it returns false. --promptInt pairs Simulate the promptInt function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptInt is called with a prompt that does not match any of pairs , then it returns zero. --promptString , -p pairs Simulate the promptString function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptString is called with a prompt that does not match any of pairs , then it returns prompt unchanged. --stdinisatty bool Simulate the stdinIsATTY function by returning bool . Example $ chezmoi execute-template '{{ .chezmoi.sourceDir }}' $ chezmoi execute-template '{{ .chezmoi.os }}' / '{{ .chezmoi.arch }}' $ echo '{{ .chezmoi | toJson }}' | chezmoi execute-template $ chezmoi execute-template --init --promptString email = me@home.org < ~/.local/share/chezmoi/.chezmoi.toml.tmpl","title":"execute-template"},{"location":"reference/commands/execute-template/#execute-template-template","text":"Execute template s. This is useful for testing templates or for calling chezmoi from other scripts. templates are interpreted as literal templates, with no whitespace added to the output between arguments. If no templates are specified, the template is read from stdin.","title":"execute-template [template...]"},{"location":"reference/commands/execute-template/#-init-i","text":"Include simulated functions only available during chezmoi init .","title":"--init, -i"},{"location":"reference/commands/execute-template/#-promptbool-pairs","text":"Simulate the promptBool function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptBool is called with a prompt that does not match any of pairs , then it returns false.","title":"--promptBool pairs"},{"location":"reference/commands/execute-template/#-promptint-pairs","text":"Simulate the promptInt function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptInt is called with a prompt that does not match any of pairs , then it returns zero.","title":"--promptInt pairs"},{"location":"reference/commands/execute-template/#-promptstring-p-pairs","text":"Simulate the promptString function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptString is called with a prompt that does not match any of pairs , then it returns prompt unchanged.","title":"--promptString, -p pairs"},{"location":"reference/commands/execute-template/#-stdinisatty-bool","text":"Simulate the stdinIsATTY function by returning bool . Example $ chezmoi execute-template '{{ .chezmoi.sourceDir }}' $ chezmoi execute-template '{{ .chezmoi.os }}' / '{{ .chezmoi.arch }}' $ echo '{{ .chezmoi | toJson }}' | chezmoi execute-template $ chezmoi execute-template --init --promptString email = me@home.org < ~/.local/share/chezmoi/.chezmoi.toml.tmpl","title":"--stdinisatty bool"},{"location":"reference/commands/forget/","text":"forget target ... Remove target s from the source state, i.e. stop managing them. Example $ chezmoi forget ~/.bashrc","title":"forget"},{"location":"reference/commands/forget/#forget-target","text":"Remove target s from the source state, i.e. stop managing them. Example $ chezmoi forget ~/.bashrc","title":"forget target..."},{"location":"reference/commands/git/","text":"git [ arg ...] Run git args in the working tree (typically the source directory). Note Flags in args must occur after -- to prevent chezmoi from interpreting them. Example $ chezmoi git add . $ chezmoi git add dot_gitconfig $ chezmoi git -- commit -m \"Add .gitconfig\"","title":"git"},{"location":"reference/commands/git/#git-arg","text":"Run git args in the working tree (typically the source directory). Note Flags in args must occur after -- to prevent chezmoi from interpreting them. Example $ chezmoi git add . $ chezmoi git add dot_gitconfig $ chezmoi git -- commit -m \"Add .gitconfig\"","title":"git [arg...]"},{"location":"reference/commands/help/","text":"help [ command ...] Print the help associated with command , or general help if no command is given.","title":"help"},{"location":"reference/commands/help/#help-command","text":"Print the help associated with command , or general help if no command is given.","title":"help [command...]"},{"location":"reference/commands/ignored/","text":"ignored Print the list of entries ignored by chezmoi. Example $ chezmoi ignored","title":"ignored"},{"location":"reference/commands/ignored/#ignored","text":"Print the list of entries ignored by chezmoi. Example $ chezmoi ignored","title":"ignored"},{"location":"reference/commands/import/","text":"import filename Import the source state from an archive file in to a directory in the source state. This is primarily used to make subdirectories of your home directory exactly match the contents of a downloaded archive. You will generally always want to set the --destination , --exact , and --remove-destination flags. The supported archive formats are tar , tar.gz , tgz , tar.bz2 , tbz2 , xz , and zip . --destination directory Set the destination (in the source state) where the archive will be imported. --exact Set the exact attribute on all imported directories. -r , --remove-destination Remove destination (in the source state) before importing. --strip-components n Strip n leading components from paths. Example $ curl -s -L -o ${ TMPDIR } /oh-my-zsh-master.tar.gz https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz $ mkdir -p $( chezmoi source-path ) /dot_oh-my-zsh $ chezmoi import --strip-components 1 --destination ~/.oh-my-zsh ${ TMPDIR } /oh-my-zsh-master.tar.gz","title":"import"},{"location":"reference/commands/import/#import-filename","text":"Import the source state from an archive file in to a directory in the source state. This is primarily used to make subdirectories of your home directory exactly match the contents of a downloaded archive. You will generally always want to set the --destination , --exact , and --remove-destination flags. The supported archive formats are tar , tar.gz , tgz , tar.bz2 , tbz2 , xz , and zip .","title":"import filename"},{"location":"reference/commands/import/#-destination-directory","text":"Set the destination (in the source state) where the archive will be imported.","title":"--destination directory"},{"location":"reference/commands/import/#-exact","text":"Set the exact attribute on all imported directories.","title":"--exact"},{"location":"reference/commands/import/#-r-remove-destination","text":"Remove destination (in the source state) before importing.","title":"-r, --remove-destination"},{"location":"reference/commands/import/#-strip-components-n","text":"Strip n leading components from paths. Example $ curl -s -L -o ${ TMPDIR } /oh-my-zsh-master.tar.gz https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz $ mkdir -p $( chezmoi source-path ) /dot_oh-my-zsh $ chezmoi import --strip-components 1 --destination ~/.oh-my-zsh ${ TMPDIR } /oh-my-zsh-master.tar.gz","title":"--strip-components n"},{"location":"reference/commands/init/","text":"init [ repo ] Setup the source directory, generate the config file, and optionally update the destination directory to match the target state. By default, if repo is given, chezmoi will guess the full git repo URL, using HTTPS by default, or SSH if the --ssh option is specified, according to the following patterns: Pattern HTTPS Repo SSH repo user https://github.com/user/dotfiles.git git@github.com:user/dotfiles.git user/repo https://github.com/user/repo.git git@github.com:user/repo.git site/user/repo https://site/user/repo.git git@site:user/repo.git ~sr.ht/user https://git.sr.ht/~user/dotfiles git@git.sr.ht:~user/dotfiles.git ~sr.ht/user/repo https://git.sr.ht/~user/repo git@git.sr.ht:~/user/repo.git To disable git repo URL guessing pass the --guess-repo-url=false option. First, if the source directory is not already contain a repository, then if repo is given it is checked out into the source directory, otherwise a new repository is initialized in the source directory. Second, if a file called .chezmoi.$FORMAT.tmpl exists, where $FORMAT is one of the supported file formats (e.g. json , toml , or yaml ) then a new configuration file is created using that file as a template. Then, if the --apply flag is passed, chezmoi apply is run. Then, if the --purge flag is passed, chezmoi will remove its source, config, and cache directories. Finally, if the --purge-binary is passed, chezmoi will attempt to remove its own binary. --apply Run chezmoi apply after checking out the repo and creating the config file. --branch branch Check out branch instead of the default branch. --config-path path Write the generated config file to path instead of the default location. --data bool Include existing template data when creating the config file. This defaults to true . Set this to false to simulate creating the config file with no existing template data. --depth depth Clone the repo with depth depth . --guess-repo-url bool Guess the repo URL from the repo argument. This defaults to true . --one-shot --one-shot is the equivalent of --apply , --depth=1 , --force , --purge , and --purge-binary . It attempts to install your dotfiles with chezmoi and then remove all traces of chezmoi from the system. This is useful for setting up temporary environments (e.g. Docker containers). --purge Remove the source and config directories after applying. --purge-binary Attempt to remove the chezmoi binary after applying. --ssh Guess an SSH repo URL instead of an HTTPS repo. Example $ chezmoi init user $ chezmoi init user --apply $ chezmoi init user --apply --purge $ chezmoi init user/dots $ chezmoi init codeberg.org/user $ chezmoi init gitlab.com/user","title":"init"},{"location":"reference/commands/init/#init-repo","text":"Setup the source directory, generate the config file, and optionally update the destination directory to match the target state. By default, if repo is given, chezmoi will guess the full git repo URL, using HTTPS by default, or SSH if the --ssh option is specified, according to the following patterns: Pattern HTTPS Repo SSH repo user https://github.com/user/dotfiles.git git@github.com:user/dotfiles.git user/repo https://github.com/user/repo.git git@github.com:user/repo.git site/user/repo https://site/user/repo.git git@site:user/repo.git ~sr.ht/user https://git.sr.ht/~user/dotfiles git@git.sr.ht:~user/dotfiles.git ~sr.ht/user/repo https://git.sr.ht/~user/repo git@git.sr.ht:~/user/repo.git To disable git repo URL guessing pass the --guess-repo-url=false option. First, if the source directory is not already contain a repository, then if repo is given it is checked out into the source directory, otherwise a new repository is initialized in the source directory. Second, if a file called .chezmoi.$FORMAT.tmpl exists, where $FORMAT is one of the supported file formats (e.g. json , toml , or yaml ) then a new configuration file is created using that file as a template. Then, if the --apply flag is passed, chezmoi apply is run. Then, if the --purge flag is passed, chezmoi will remove its source, config, and cache directories. Finally, if the --purge-binary is passed, chezmoi will attempt to remove its own binary.","title":"init [repo]"},{"location":"reference/commands/init/#-apply","text":"Run chezmoi apply after checking out the repo and creating the config file.","title":"--apply"},{"location":"reference/commands/init/#-branch-branch","text":"Check out branch instead of the default branch.","title":"--branch branch"},{"location":"reference/commands/init/#-config-path-path","text":"Write the generated config file to path instead of the default location.","title":"--config-path path"},{"location":"reference/commands/init/#-data-bool","text":"Include existing template data when creating the config file. This defaults to true . Set this to false to simulate creating the config file with no existing template data.","title":"--data bool"},{"location":"reference/commands/init/#-depth-depth","text":"Clone the repo with depth depth .","title":"--depth depth"},{"location":"reference/commands/init/#-guess-repo-url-bool","text":"Guess the repo URL from the repo argument. This defaults to true .","title":"--guess-repo-url bool"},{"location":"reference/commands/init/#-one-shot","text":"--one-shot is the equivalent of --apply , --depth=1 , --force , --purge , and --purge-binary . It attempts to install your dotfiles with chezmoi and then remove all traces of chezmoi from the system. This is useful for setting up temporary environments (e.g. Docker containers).","title":"--one-shot"},{"location":"reference/commands/init/#-purge","text":"Remove the source and config directories after applying.","title":"--purge"},{"location":"reference/commands/init/#-purge-binary","text":"Attempt to remove the chezmoi binary after applying.","title":"--purge-binary"},{"location":"reference/commands/init/#-ssh","text":"Guess an SSH repo URL instead of an HTTPS repo. Example $ chezmoi init user $ chezmoi init user --apply $ chezmoi init user --apply --purge $ chezmoi init user/dots $ chezmoi init codeberg.org/user $ chezmoi init gitlab.com/user","title":"--ssh"},{"location":"reference/commands/license/","text":"license Print chezmoi's license. Example $ chezmoi license","title":"license"},{"location":"reference/commands/license/#license","text":"Print chezmoi's license. Example $ chezmoi license","title":"license"},{"location":"reference/commands/list/","text":"list list is an alias for managed .","title":"list"},{"location":"reference/commands/list/#list","text":"list is an alias for managed .","title":"list"},{"location":"reference/commands/manage/","text":"manage target ... manage is an alias for add for symmetry with unmanage .","title":"manage"},{"location":"reference/commands/manage/#manage-target","text":"manage is an alias for add for symmetry with unmanage .","title":"manage target..."},{"location":"reference/commands/managed/","text":"managed List all managed entries in the destination directory in alphabetical order. -i , --include types Only include entries of type types . Example $ chezmoi managed $ chezmoi managed --include = files $ chezmoi managed --include = files,symlinks $ chezmoi managed -i dirs $ chezmoi managed -i dirs,files","title":"managed"},{"location":"reference/commands/managed/#managed","text":"List all managed entries in the destination directory in alphabetical order.","title":"managed"},{"location":"reference/commands/managed/#-i-include-types","text":"Only include entries of type types . Example $ chezmoi managed $ chezmoi managed --include = files $ chezmoi managed --include = files,symlinks $ chezmoi managed -i dirs $ chezmoi managed -i dirs,files","title":"-i, --include types"},{"location":"reference/commands/merge-all/","text":"merge-all Perform a three-way merge for file whose actual state does not match its target state. The merge is performed with chezmoi merge . Example $ chezmoi merge-all","title":"merge-all"},{"location":"reference/commands/merge-all/#merge-all","text":"Perform a three-way merge for file whose actual state does not match its target state. The merge is performed with chezmoi merge . Example $ chezmoi merge-all","title":"merge-all"},{"location":"reference/commands/merge/","text":"merge target ... Perform a three-way merge between the destination state, the target state, and the source state for each target . The merge tool is defined by the merge.command configuration variable, and defaults to vimdiff . If multiple targets are specified the merge tool is invoked separately and sequentially for each target. If the target state cannot be computed (for example if source is a template containing errors or an encrypted file that cannot be decrypted) a two-way merge is performed instead. The order of arguments to merge.command is set by merge.args . Each argument is interpreted as a template with the variables .Destination , .Source , and .Target available corresponding to the path of the file in the destination state, the source state, and the target state respectively. The default value of merge.args is [\"{{ .Destination }}\", \"{{ .Source }}\", \"{{ .Target }}\"] . If merge.args does not contain any template arguments then {{ .Destination }} , {{ .Source }} , and {{ .Target }} will be appended automatically. Example $ chezmoi merge ~/.bashrc","title":"merge"},{"location":"reference/commands/merge/#merge-target","text":"Perform a three-way merge between the destination state, the target state, and the source state for each target . The merge tool is defined by the merge.command configuration variable, and defaults to vimdiff . If multiple targets are specified the merge tool is invoked separately and sequentially for each target. If the target state cannot be computed (for example if source is a template containing errors or an encrypted file that cannot be decrypted) a two-way merge is performed instead. The order of arguments to merge.command is set by merge.args . Each argument is interpreted as a template with the variables .Destination , .Source , and .Target available corresponding to the path of the file in the destination state, the source state, and the target state respectively. The default value of merge.args is [\"{{ .Destination }}\", \"{{ .Source }}\", \"{{ .Target }}\"] . If merge.args does not contain any template arguments then {{ .Destination }} , {{ .Source }} , and {{ .Target }} will be appended automatically. Example $ chezmoi merge ~/.bashrc","title":"merge target..."},{"location":"reference/commands/purge/","text":"purge Remove chezmoi's configuration, state, and source directory, but leave the target state intact. -f , --force Remove without prompting. Example $ chezmoi purge $ chezmoi purge --force","title":"purge"},{"location":"reference/commands/purge/#purge","text":"Remove chezmoi's configuration, state, and source directory, but leave the target state intact.","title":"purge"},{"location":"reference/commands/purge/#-f-force","text":"Remove without prompting. Example $ chezmoi purge $ chezmoi purge --force","title":"-f, --force"},{"location":"reference/commands/re-add/","text":"re-add Re-add all modified files in the target state. chezmoi will not overwrite templates, and all entries that are not files are ignored. Example $ chezmoi re-add","title":"re-add"},{"location":"reference/commands/re-add/#re-add","text":"Re-add all modified files in the target state. chezmoi will not overwrite templates, and all entries that are not files are ignored. Example $ chezmoi re-add","title":"re-add"},{"location":"reference/commands/remove/","text":"remove target ... Remove target s from both the source state and the destination directory. -f , --force Remove without prompting.","title":"remove"},{"location":"reference/commands/remove/#remove-target","text":"Remove target s from both the source state and the destination directory.","title":"remove target..."},{"location":"reference/commands/remove/#-f-force","text":"Remove without prompting.","title":"-f, --force"},{"location":"reference/commands/rm/","text":"rm target ... rm is an alias for remove .","title":"rm"},{"location":"reference/commands/rm/#rm-target","text":"rm is an alias for remove .","title":"rm target..."},{"location":"reference/commands/secret/","text":"secret Run a secret manager's CLI, passing any extra arguments to the secret manager's CLI. This is primarily for verifying chezmoi's integration with a custom secret manager. Normally you would use chezmoi's existing template functions to retrieve secrets. Note If you need to pass flags to the secret manager's CLI you must separate them with -- to prevent chezmoi from interpreting them. Hint To get a full list of subcommands run: $ chezmoi secret help Example $ chezmoi secret keyring set --service = service --user = user --value = password $ chezmoi secret keyring get --service = service --user = user $ chezmoi secret keyring delete --service = service --user = user Warning On FreeBSD, the secret keyring command is only available if chezmoi was compiled with cgo enabled. The official release binaries of chezmoi are not compiled with cgo enabled, and secret keyring command is not available.","title":"secret"},{"location":"reference/commands/secret/#secret","text":"Run a secret manager's CLI, passing any extra arguments to the secret manager's CLI. This is primarily for verifying chezmoi's integration with a custom secret manager. Normally you would use chezmoi's existing template functions to retrieve secrets. Note If you need to pass flags to the secret manager's CLI you must separate them with -- to prevent chezmoi from interpreting them. Hint To get a full list of subcommands run: $ chezmoi secret help Example $ chezmoi secret keyring set --service = service --user = user --value = password $ chezmoi secret keyring get --service = service --user = user $ chezmoi secret keyring delete --service = service --user = user Warning On FreeBSD, the secret keyring command is only available if chezmoi was compiled with cgo enabled. The official release binaries of chezmoi are not compiled with cgo enabled, and secret keyring command is not available.","title":"secret"},{"location":"reference/commands/source-path/","text":"source-path [ target ...] Print the path to each target's source state. If no targets are specified then print the source directory. Example $ chezmoi source-path $ chezmoi source-path ~/.bashrc","title":"source-path"},{"location":"reference/commands/source-path/#source-path-target","text":"Print the path to each target's source state. If no targets are specified then print the source directory. Example $ chezmoi source-path $ chezmoi source-path ~/.bashrc","title":"source-path [target...]"},{"location":"reference/commands/state/","text":"state Manipulate the persistent state. Hint To get a full list of subcommands run: $ chezmoi state help Example $ chezmoi state data $ chezmoi state delete --bucket = bucket --key = key $ chezmoi state delete-bucket --bucket = bucket $ chezmoi state dump $ chezmoi state get --bucket = bucket --key = key $ chezmoi state get-bucket --bucket = bucket $ chezmoi state set --bucket = bucket --key = key --value = value $ chezmoi state reset","title":"state"},{"location":"reference/commands/state/#state","text":"Manipulate the persistent state. Hint To get a full list of subcommands run: $ chezmoi state help Example $ chezmoi state data $ chezmoi state delete --bucket = bucket --key = key $ chezmoi state delete-bucket --bucket = bucket $ chezmoi state dump $ chezmoi state get --bucket = bucket --key = key $ chezmoi state get-bucket --bucket = bucket $ chezmoi state set --bucket = bucket --key = key --value = value $ chezmoi state reset","title":"state"},{"location":"reference/commands/status/","text":"status Print the status of the files and scripts managed by chezmoi in a format similar to git status . The first column of output indicates the difference between the last state written by chezmoi and the actual state. The second column indicates the difference between the actual state and the target state. -i , --include types Only include entries of type types . Example $ chezmoi status","title":"status"},{"location":"reference/commands/status/#status","text":"Print the status of the files and scripts managed by chezmoi in a format similar to git status . The first column of output indicates the difference between the last state written by chezmoi and the actual state. The second column indicates the difference between the actual state and the target state.","title":"status"},{"location":"reference/commands/status/#-i-include-types","text":"Only include entries of type types . Example $ chezmoi status","title":"-i, --include types"},{"location":"reference/commands/target-path/","text":"target-path [ source-path ...] Print the target path of each source path. If no source paths are specified then print the target directory. Example $ chezmoi target-path $ chezmoi target-path ~/.local/share/chezmoi/dot_zshrc","title":"target-path"},{"location":"reference/commands/target-path/#target-path-source-path","text":"Print the target path of each source path. If no source paths are specified then print the target directory. Example $ chezmoi target-path $ chezmoi target-path ~/.local/share/chezmoi/dot_zshrc","title":"target-path [source-path...]"},{"location":"reference/commands/unmanage/","text":"unmanage target ... unmanage is an alias for forget for symmetry with manage .","title":"unmanage"},{"location":"reference/commands/unmanage/#unmanage-target","text":"unmanage is an alias for forget for symmetry with manage .","title":"unmanage target..."},{"location":"reference/commands/unmanaged/","text":"unmanaged List all unmanaged files in the destination directory. Example $ chezmoi unmanaged","title":"unmanaged"},{"location":"reference/commands/unmanaged/#unmanaged","text":"List all unmanaged files in the destination directory. Example $ chezmoi unmanaged","title":"unmanaged"},{"location":"reference/commands/update/","text":"update Pull changes from the source repo and apply any changes. -i , --include types Only update entries of type types . Example $ chezmoi update","title":"update"},{"location":"reference/commands/update/#update","text":"Pull changes from the source repo and apply any changes.","title":"update"},{"location":"reference/commands/update/#-i-include-types","text":"Only update entries of type types . Example $ chezmoi update","title":"-i, --include types"},{"location":"reference/commands/upgrade/","text":"upgrade Upgrade chezmoi by downloading and installing the latest released version. This will call the GitHub API to determine if there is a new version of chezmoi available, and if so, download and attempt to install it in the same way as chezmoi was previously installed. If the any of the $CHEZMOI_GITHUB_ACCESS_TOKEN , $CHEZMOI_GITHUB_TOKEN , $GITHUB_ACCESS_TOKEN , or $GITHUB_TOKEN environment variables are set, then the first value found will be used to authenticate requests to the GitHub API, otherwise unauthenticated requests are used which are subject to stricter rate limiting . Unauthenticated requests should be sufficient for most cases. Warning If you installed chezmoi using a package manager, the upgrade command might have been removed by the package maintainer.","title":"upgrade"},{"location":"reference/commands/upgrade/#upgrade","text":"Upgrade chezmoi by downloading and installing the latest released version. This will call the GitHub API to determine if there is a new version of chezmoi available, and if so, download and attempt to install it in the same way as chezmoi was previously installed. If the any of the $CHEZMOI_GITHUB_ACCESS_TOKEN , $CHEZMOI_GITHUB_TOKEN , $GITHUB_ACCESS_TOKEN , or $GITHUB_TOKEN environment variables are set, then the first value found will be used to authenticate requests to the GitHub API, otherwise unauthenticated requests are used which are subject to stricter rate limiting . Unauthenticated requests should be sufficient for most cases. Warning If you installed chezmoi using a package manager, the upgrade command might have been removed by the package maintainer.","title":"upgrade"},{"location":"reference/commands/verify/","text":"verify [ target ...] Verify that all target s match their target state. chezmoi exits with code 0 (success) if all targets match their target state, or 1 (failure) otherwise. If no targets are specified then all targets are checked. -i , --include types Only include entries of type types . Example $ chezmoi verify $ chezmoi verify ~/.bashrc","title":"verify"},{"location":"reference/commands/verify/#verify-target","text":"Verify that all target s match their target state. chezmoi exits with code 0 (success) if all targets match their target state, or 1 (failure) otherwise. If no targets are specified then all targets are checked.","title":"verify [target...]"},{"location":"reference/commands/verify/#-i-include-types","text":"Only include entries of type types . Example $ chezmoi verify $ chezmoi verify ~/.bashrc","title":"-i, --include types"},{"location":"reference/configuration-file/","text":"Configuration file chezmoi searches for its configuration file according to the XDG Base Directory Specification and supports JSON , TOML , and YAML . The basename of the config file is chezmoi , and the first config file found is used. In most installations, the config file will be read from ~/.config/chezmoi/chezmoi.$FORMAT , where $FORMAT is one of json , toml , or yaml . The config file can be set explicitly with the --config command line option. By default, the format is detected based on the extension of the config file name, but can be overridden with the --config-format command line option. Examples JSON TOML YAML ~/.config/chezmoi/chezmoi.json { \"sourceDir\" : \"/home/user/.dotfiles\" , \"git\" : { \"autoPush\" : true } } ~/.config/chezmoi/chezmoi.toml sourceDir = \"/home/user/.dotfiles\" [git] autoPush = true ~/.config/chezmoi/chezmoi.yaml sourceDir : /home/user/.dotfiles git : autoPush : true","title":"Configuration file"},{"location":"reference/configuration-file/#configuration-file","text":"chezmoi searches for its configuration file according to the XDG Base Directory Specification and supports JSON , TOML , and YAML . The basename of the config file is chezmoi , and the first config file found is used. In most installations, the config file will be read from ~/.config/chezmoi/chezmoi.$FORMAT , where $FORMAT is one of json , toml , or yaml . The config file can be set explicitly with the --config command line option. By default, the format is detected based on the extension of the config file name, but can be overridden with the --config-format command line option.","title":"Configuration file"},{"location":"reference/configuration-file/#examples","text":"JSON TOML YAML ~/.config/chezmoi/chezmoi.json { \"sourceDir\" : \"/home/user/.dotfiles\" , \"git\" : { \"autoPush\" : true } } ~/.config/chezmoi/chezmoi.toml sourceDir = \"/home/user/.dotfiles\" [git] autoPush = true ~/.config/chezmoi/chezmoi.yaml sourceDir : /home/user/.dotfiles git : autoPush : true","title":"Examples"},{"location":"reference/configuration-file/editor/","text":"Editor The editor used is the first non-empty string of the edit.command configuration variable, the $VISUAL environment variable, the $EDITOR environment variable. If none are set then chezmoi falls back to notepad.exe on Windows systems and vi on non-Windows systems. When the edit.command configuration variable is used, extra arguments can be passed to the editor with the editor.args configuration variable. chezmoi will emit a warning if the editor returns in less than edit.minDuration (default 1s ). To disable this warning, set edit.minDuration to 0 .","title":"Editor"},{"location":"reference/configuration-file/editor/#editor","text":"The editor used is the first non-empty string of the edit.command configuration variable, the $VISUAL environment variable, the $EDITOR environment variable. If none are set then chezmoi falls back to notepad.exe on Windows systems and vi on non-Windows systems. When the edit.command configuration variable is used, extra arguments can be passed to the editor with the editor.args configuration variable. chezmoi will emit a warning if the editor returns in less than edit.minDuration (default 1s ). To disable this warning, set edit.minDuration to 0 .","title":"Editor"},{"location":"reference/configuration-file/pinentry/","text":"pinentry By default, chezmoi will request passwords from the terminal. If the --no-tty option is passed, then chezmoi will instead read passwords from the standard input. Otherwise, if the configuration variable pinentry.command is set then chezmoi will instead used the given command to read passwords, assuming that it follows the Assuan protocol like GnuPG's pinentry . The configuration variable pinentry.args specifies extra arguments to be passed to pinentry.command and the configuration variable pinentry.options specifies extra options to be set. The default pinentry.options is [\"allow-external-password-cache\"] . Example ~/.config/chezmoi/chezmoi.toml [pinentry] command = \"pinentry\"","title":"pinentry"},{"location":"reference/configuration-file/pinentry/#pinentry","text":"By default, chezmoi will request passwords from the terminal. If the --no-tty option is passed, then chezmoi will instead read passwords from the standard input. Otherwise, if the configuration variable pinentry.command is set then chezmoi will instead used the given command to read passwords, assuming that it follows the Assuan protocol like GnuPG's pinentry . The configuration variable pinentry.args specifies extra arguments to be passed to pinentry.command and the configuration variable pinentry.options specifies extra options to be set. The default pinentry.options is [\"allow-external-password-cache\"] . Example ~/.config/chezmoi/chezmoi.toml [pinentry] command = \"pinentry\"","title":"pinentry"},{"location":"reference/configuration-file/umask/","text":"umask By default, chezmoi uses your current umask as set by your operating system and shell. chezmoi only stores crude permissions in its source state, namely in the executable and private attributes, corresponding to the umasks of 0o111 and 0o077 respectively. For machine-specific control of umask, set the umask configuration variable in chezmoi's configuration file. Example ~/.config/chezmoi/chezmoi.toml umask = 0 o22","title":"umask"},{"location":"reference/configuration-file/umask/#umask","text":"By default, chezmoi uses your current umask as set by your operating system and shell. chezmoi only stores crude permissions in its source state, namely in the executable and private attributes, corresponding to the umasks of 0o111 and 0o077 respectively. For machine-specific control of umask, set the umask configuration variable in chezmoi's configuration file. Example ~/.config/chezmoi/chezmoi.toml umask = 0 o22","title":"umask"},{"location":"reference/configuration-file/variables/","text":"Variables The following configuration variables are available: Section Variable Type Default value Description Top level color string auto Colorize output data any none Template data destDir string ~ Destination directory encryption string none Encryption tool, either age or gpg format string json Format for data output, either json or yaml mode string file Mode in target dir, either file or symlink scriptTempDir string none Temporary directory for scripts sourceDir string ~/.local/share/chezmoi Source directory pager string $PAGER Default pager umask int from system Umask useBuiltinAge string auto Use builtin age if age command is not found in $PATH useBuiltinGit string auto Use builtin git if git command is not found in $PATH verbose bool false Make output more verbose workingTree string source directory git working tree directory add templateSymlinks bool false Template symlinks to source and home dirs age args []string none Extra args to age CLI command command string age age CLI command identity string none age identity file identities []string none age identity files passphrase bool false Use age passphrase instead of identity recipient string none age recipient recipients []string none age recipients recipientsFile []string none age recipients file recipientsFiles []string none age recipients files suffix string .age Suffix appended to age-encrypted files symmetric bool false Use age symmetric encryption bitwarden command string bw Bitwarden CLI command cd args []string none Extra args to shell in cd command command string none Shell to run in cd command completion custom bool false Enable custom shell completions diff args []string see diff below Extra args to external diff command command string none External diff command exclude []string none Entry types to exclude from diffs pager string none Diff-specific pager reverse bool false Reverse order of arguments to diff edit args []string none Extra args to edit command command string $EDITOR / $VISUAL Edit command hardlink bool true Invoke editor with a hardlink to the source file minDuration duration 1s Minimum duration for edit command secret command string none Generic secret command git autoAdd bool false Add changes to the source state after any change autoCommit bool false Commit changes to the source state after any change autoPush bool false Push changes to the source state after any change command string git Source version control system gopass command string gopass gopass CLI command gpg args []string none Extra args to GPG CLI command command string gpg GPG CLI command recipient string none GPG recipient suffix string .asc Suffix appended to GPG-encrypted files symmetric bool false Use symmetric GPG encryption interpreters extension .args []string none See section on \"Scripts on Windows\" extension .command string special See section on \"Scripts on Windows\" keepassxc args []string none Extra args to KeePassXC CLI command command string keepassxc-cli KeePassXC CLI command database string none KeePassXC database keeper args []string none Extra args to Keeper CLI command command string keeper Keeper CLI command lastpass command string lpass Lastpass CLI command merge args []string see merge below Args to 3-way merge command command string vimdiff 3-way merge command onepassword cache bool true Enable optional caching provided by op command string op 1Password CLI command prompt bool true Prompt for sign-in when no valid session is available pass command string pass Pass CLI command pinentry args []string none Extra args to the pinentry command command string none pinentry command options []string see pinentry below Extra options for pinentry status exclude []string none Entry types to exclude from status template options []string [\"missingkey=error\"] Template options vault command string vault Vault CLI command verify exclude []string none Entry types to exclude from verify","title":"Variables"},{"location":"reference/configuration-file/variables/#variables","text":"The following configuration variables are available: Section Variable Type Default value Description Top level color string auto Colorize output data any none Template data destDir string ~ Destination directory encryption string none Encryption tool, either age or gpg format string json Format for data output, either json or yaml mode string file Mode in target dir, either file or symlink scriptTempDir string none Temporary directory for scripts sourceDir string ~/.local/share/chezmoi Source directory pager string $PAGER Default pager umask int from system Umask useBuiltinAge string auto Use builtin age if age command is not found in $PATH useBuiltinGit string auto Use builtin git if git command is not found in $PATH verbose bool false Make output more verbose workingTree string source directory git working tree directory add templateSymlinks bool false Template symlinks to source and home dirs age args []string none Extra args to age CLI command command string age age CLI command identity string none age identity file identities []string none age identity files passphrase bool false Use age passphrase instead of identity recipient string none age recipient recipients []string none age recipients recipientsFile []string none age recipients file recipientsFiles []string none age recipients files suffix string .age Suffix appended to age-encrypted files symmetric bool false Use age symmetric encryption bitwarden command string bw Bitwarden CLI command cd args []string none Extra args to shell in cd command command string none Shell to run in cd command completion custom bool false Enable custom shell completions diff args []string see diff below Extra args to external diff command command string none External diff command exclude []string none Entry types to exclude from diffs pager string none Diff-specific pager reverse bool false Reverse order of arguments to diff edit args []string none Extra args to edit command command string $EDITOR / $VISUAL Edit command hardlink bool true Invoke editor with a hardlink to the source file minDuration duration 1s Minimum duration for edit command secret command string none Generic secret command git autoAdd bool false Add changes to the source state after any change autoCommit bool false Commit changes to the source state after any change autoPush bool false Push changes to the source state after any change command string git Source version control system gopass command string gopass gopass CLI command gpg args []string none Extra args to GPG CLI command command string gpg GPG CLI command recipient string none GPG recipient suffix string .asc Suffix appended to GPG-encrypted files symmetric bool false Use symmetric GPG encryption interpreters extension .args []string none See section on \"Scripts on Windows\" extension .command string special See section on \"Scripts on Windows\" keepassxc args []string none Extra args to KeePassXC CLI command command string keepassxc-cli KeePassXC CLI command database string none KeePassXC database keeper args []string none Extra args to Keeper CLI command command string keeper Keeper CLI command lastpass command string lpass Lastpass CLI command merge args []string see merge below Args to 3-way merge command command string vimdiff 3-way merge command onepassword cache bool true Enable optional caching provided by op command string op 1Password CLI command prompt bool true Prompt for sign-in when no valid session is available pass command string pass Pass CLI command pinentry args []string none Extra args to the pinentry command command string none pinentry command options []string see pinentry below Extra options for pinentry status exclude []string none Entry types to exclude from status template options []string [\"missingkey=error\"] Template options vault command string vault Vault CLI command verify exclude []string none Entry types to exclude from verify","title":"Variables"},{"location":"reference/special-files-and-directories/","text":"Special files and directories All files and directories in the source state whose name begins with . are ignored by default, unless they are one of the special files listed here. .chezmoidata.$FORMAT and .chezmoitemplates are read before all other files so that they can be used in templates.","title":"Special files and directories"},{"location":"reference/special-files-and-directories/#special-files-and-directories","text":"All files and directories in the source state whose name begins with . are ignored by default, unless they are one of the special files listed here. .chezmoidata.$FORMAT and .chezmoitemplates are read before all other files so that they can be used in templates.","title":"Special files and directories"},{"location":"reference/special-files-and-directories/chezmoi-format-tmpl/","text":".chezmoi.$FORMAT.tmpl If a file called .chezmoi.$FORMAT.tmpl exists then chezmoi init will use it to create an initial config file. $FORMAT must be one of the the supported config file formats, e.g. json , toml , or yaml . Example ~/.local/share/chezmoi/.chezmoi.yaml.tmpl {{ $email := promptString \"email\" -}} data: email: {{ $email | quote }}","title":".chezmoi.&lt;format&gt;.tmpl"},{"location":"reference/special-files-and-directories/chezmoi-format-tmpl/#chezmoiformattmpl","text":"If a file called .chezmoi.$FORMAT.tmpl exists then chezmoi init will use it to create an initial config file. $FORMAT must be one of the the supported config file formats, e.g. json , toml , or yaml . Example ~/.local/share/chezmoi/.chezmoi.yaml.tmpl {{ $email := promptString \"email\" -}} data: email: {{ $email | quote }}","title":".chezmoi.$FORMAT.tmpl"},{"location":"reference/special-files-and-directories/chezmoidata-format/","text":".chezmoidata.$FORMAT If a file called .chezmoidata.$FORMAT exists in the source state, it is interpreted as template data. Example If .chezmoidata.toml contains the following: ~/.local/share/chezmoi/.chezmoidata.toml fontSize = 12 Then the .fontSize variable is available in templates, e.g. FONT_SIZE={{ .fontSize }} Will result in: FONT_SIZE=12","title":".chezmoidata.&lt;format&gt;"},{"location":"reference/special-files-and-directories/chezmoidata-format/#chezmoidataformat","text":"If a file called .chezmoidata.$FORMAT exists in the source state, it is interpreted as template data. Example If .chezmoidata.toml contains the following: ~/.local/share/chezmoi/.chezmoidata.toml fontSize = 12 Then the .fontSize variable is available in templates, e.g. FONT_SIZE={{ .fontSize }} Will result in: FONT_SIZE=12","title":".chezmoidata.$FORMAT"},{"location":"reference/special-files-and-directories/chezmoiexternal-format/","text":".chezmoiexternal.$FORMAT If a file called .chezmoiexternal.$FORMAT exists in the source state, it is interpreted as a list of external files and archives to be included as if they were in the source state. $FORMAT must be one of chezmoi's supported configuration file formats, e.g. json , toml , or yaml . .chezmoiexternal.$FORMAT is interpreted as a template. This allows different externals to be included on different machines. Entries are indexed by target name relative to the directory of the .chezmoiexternal.$FORMAT file, and must have a type and a url field. type can be either file , archive , or git-repo . If the entry's parent directories do not already exist in the source state then chezmoi will create them as regular directories. Entries may have the following fields: Variable Type Default value Description type string none External type ( file , archive , or git-repo ) clone.args []string none Extra args to git clone encrypted bool false Whether the external is encrypted exact bool false Add exact_ attribute to directories in archive exclude []string none Patterns to exclude from archive executable bool false Add executable_ attribute to file filter.command string none Command to filter contents filter.args []string none Extra args to command to filter contents format string autodetect Format of archive include []string none Patterns to include from archive pull.args []string none Extra args to git pull refreshPeriod duration 0 Refresh period stripComponents int 0 Number of leading directory components to strip from archives url string none URL The optional boolean encrypted field specifies whether the file or archive is encrypted. If optional string filter.command and array of strings filter.args are specified, the the file or archive is filtered by piping it into the command's standard input and reading the command's standard output. If type is file then the target is a file with the contents of url . The optional boolean field executable may be set, in which case the target file will be executable. If type is archive then the target is a directory with the contents of the archive at url . The optional boolean field exact may be set, in which case the directory and all subdirectories will be treated as exact directories, i.e. chezmoi apply will remove entries not present in the archive. The optional integer field stripComponents will remove leading path components from the members of archive. The optional string field format sets the archive format. The supported archive formats are tar , tar.gz , tgz , tar.bz2 , tbz2 , xz , and zip . If format is not specified then chezmoi will guess the format using firstly the path of the URL and secondly its contents. The optional include and exclude fields are lists of patterns specify which archive members to include or exclude respectively. Patterns match paths in the archive, not the target state. chezmoi uses the following algorithm to determine whether an archive member is included: If the archive member name matches any exclude pattern, then the archive member is excluded. In addition, if the archive member is a directory, then all contained files and sub-directories will be excluded, too (recursively). Otherwise, if the archive member name matches any include pattern, then the archive member is included. Otherwise, if only include patterns were specified then the archive member is excluded. Otherwise, if only exclude patterns were specified then the archive member is included. Otherwise, the archive member is included.o Excluded archive members do not generate source state entries, and, if they are directories, all of their children are also excluded. If type is git-repo then chezmoi will run git clone $URL $TARGET_NAME with the optional clone.args if the target does not exist. If the target exists, then chezmoi will run git pull with the optional pull.args to update the target. For file and archive externals, chezmoi will cache downloaded URLs. The optional duration refreshPeriod field specifies how often chezmoi will re-download the URL. The default is zero meaning that chezmoi will never re-download unless forced. To force chezmoi to re-download URLs, pass the -R / --refresh-externals flag. Suitable refresh periods include one day ( 24h ), one week ( 168h ), or four weeks ( 672h ). Example ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/autoload/plug.vim\"] type = \"file\" url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" refreshPeriod = \"168h\" [\".oh-my-zsh\"] type = \"archive\" url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/themes/powerlevel10k\"] type = \"archive\" url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\" exact = true stripComponents = 1 [\"www/adminer/plugins\"] type = \"archive\" url = \"https://api.github.com/repos/vrana/adminer/tarball\" refreshPeriod = \"744h\" stripComponents = 2 include = [ \"*/plugins/**\" ] Some more examples can be found in the user guide .","title":".chezmoiexternal.&lt;format&gt;"},{"location":"reference/special-files-and-directories/chezmoiexternal-format/#chezmoiexternalformat","text":"If a file called .chezmoiexternal.$FORMAT exists in the source state, it is interpreted as a list of external files and archives to be included as if they were in the source state. $FORMAT must be one of chezmoi's supported configuration file formats, e.g. json , toml , or yaml . .chezmoiexternal.$FORMAT is interpreted as a template. This allows different externals to be included on different machines. Entries are indexed by target name relative to the directory of the .chezmoiexternal.$FORMAT file, and must have a type and a url field. type can be either file , archive , or git-repo . If the entry's parent directories do not already exist in the source state then chezmoi will create them as regular directories. Entries may have the following fields: Variable Type Default value Description type string none External type ( file , archive , or git-repo ) clone.args []string none Extra args to git clone encrypted bool false Whether the external is encrypted exact bool false Add exact_ attribute to directories in archive exclude []string none Patterns to exclude from archive executable bool false Add executable_ attribute to file filter.command string none Command to filter contents filter.args []string none Extra args to command to filter contents format string autodetect Format of archive include []string none Patterns to include from archive pull.args []string none Extra args to git pull refreshPeriod duration 0 Refresh period stripComponents int 0 Number of leading directory components to strip from archives url string none URL The optional boolean encrypted field specifies whether the file or archive is encrypted. If optional string filter.command and array of strings filter.args are specified, the the file or archive is filtered by piping it into the command's standard input and reading the command's standard output. If type is file then the target is a file with the contents of url . The optional boolean field executable may be set, in which case the target file will be executable. If type is archive then the target is a directory with the contents of the archive at url . The optional boolean field exact may be set, in which case the directory and all subdirectories will be treated as exact directories, i.e. chezmoi apply will remove entries not present in the archive. The optional integer field stripComponents will remove leading path components from the members of archive. The optional string field format sets the archive format. The supported archive formats are tar , tar.gz , tgz , tar.bz2 , tbz2 , xz , and zip . If format is not specified then chezmoi will guess the format using firstly the path of the URL and secondly its contents. The optional include and exclude fields are lists of patterns specify which archive members to include or exclude respectively. Patterns match paths in the archive, not the target state. chezmoi uses the following algorithm to determine whether an archive member is included: If the archive member name matches any exclude pattern, then the archive member is excluded. In addition, if the archive member is a directory, then all contained files and sub-directories will be excluded, too (recursively). Otherwise, if the archive member name matches any include pattern, then the archive member is included. Otherwise, if only include patterns were specified then the archive member is excluded. Otherwise, if only exclude patterns were specified then the archive member is included. Otherwise, the archive member is included.o Excluded archive members do not generate source state entries, and, if they are directories, all of their children are also excluded. If type is git-repo then chezmoi will run git clone $URL $TARGET_NAME with the optional clone.args if the target does not exist. If the target exists, then chezmoi will run git pull with the optional pull.args to update the target. For file and archive externals, chezmoi will cache downloaded URLs. The optional duration refreshPeriod field specifies how often chezmoi will re-download the URL. The default is zero meaning that chezmoi will never re-download unless forced. To force chezmoi to re-download URLs, pass the -R / --refresh-externals flag. Suitable refresh periods include one day ( 24h ), one week ( 168h ), or four weeks ( 672h ). Example ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/autoload/plug.vim\"] type = \"file\" url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" refreshPeriod = \"168h\" [\".oh-my-zsh\"] type = \"archive\" url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/themes/powerlevel10k\"] type = \"archive\" url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\" exact = true stripComponents = 1 [\"www/adminer/plugins\"] type = \"archive\" url = \"https://api.github.com/repos/vrana/adminer/tarball\" refreshPeriod = \"744h\" stripComponents = 2 include = [ \"*/plugins/**\" ] Some more examples can be found in the user guide .","title":".chezmoiexternal.$FORMAT"},{"location":"reference/special-files-and-directories/chezmoiignore/","text":".chezmoiignore If a file called .chezmoiignore exists in the source state then it is interpreted as a set of patterns to ignore. Patterns are matched using doublestar.Match and match against the target path, not the source path. Patterns can be excluded by prefixing them with a ! character. All excludes take priority over all includes. Comments are introduced with the # character and run until the end of the line. .chezmoiignore is interpreted as a template. This allows different files to be ignored on different machines. .chezmoiignore files in subdirectories apply only to that subdirectory. Example ~/.local/share/chezmoi/.chezmoiignore README.md *.txt # ignore *.txt in the target directory */*.txt # ignore *.txt in subdirectories of the target directory # but not in subdirectories of subdirectories; # so a/b/c.txt would *not* be ignored backups/ # ignore backups folder in chezmoi directory and all its contents backups/** # ignore all contents of backups folder in chezmoi directory # but not backups folder itself {{- if ne .email \"firstname.lastname@company.com\" }} # Ignore .company-directory unless configured with a company email .company-directory # note that the pattern is not dot_company-directory {{- end }} {{- if ne .email \"me@home.org }} .personal-file {{- end }}","title":".chezmoiignore"},{"location":"reference/special-files-and-directories/chezmoiignore/#chezmoiignore","text":"If a file called .chezmoiignore exists in the source state then it is interpreted as a set of patterns to ignore. Patterns are matched using doublestar.Match and match against the target path, not the source path. Patterns can be excluded by prefixing them with a ! character. All excludes take priority over all includes. Comments are introduced with the # character and run until the end of the line. .chezmoiignore is interpreted as a template. This allows different files to be ignored on different machines. .chezmoiignore files in subdirectories apply only to that subdirectory. Example ~/.local/share/chezmoi/.chezmoiignore README.md *.txt # ignore *.txt in the target directory */*.txt # ignore *.txt in subdirectories of the target directory # but not in subdirectories of subdirectories; # so a/b/c.txt would *not* be ignored backups/ # ignore backups folder in chezmoi directory and all its contents backups/** # ignore all contents of backups folder in chezmoi directory # but not backups folder itself {{- if ne .email \"firstname.lastname@company.com\" }} # Ignore .company-directory unless configured with a company email .company-directory # note that the pattern is not dot_company-directory {{- end }} {{- if ne .email \"me@home.org }} .personal-file {{- end }}","title":".chezmoiignore"},{"location":"reference/special-files-and-directories/chezmoiremove/","text":".chezmoiremove If a file called .chezmoiremove exists in the source state then it is interpreted as a list of targets to remove. .chezmoiremove is interpreted as a template.","title":".chezmoiremove"},{"location":"reference/special-files-and-directories/chezmoiremove/#chezmoiremove","text":"If a file called .chezmoiremove exists in the source state then it is interpreted as a list of targets to remove. .chezmoiremove is interpreted as a template.","title":".chezmoiremove"},{"location":"reference/special-files-and-directories/chezmoiroot/","text":".chezmoiroot If a file called .chezmoiroot exists in the root of the source directory then the source state is read from the directory specified in .chezmoiroot interpreted as a relative path to the source directory. .chezmoiroot is read before all other files in the source directory.","title":".chezmoiroot"},{"location":"reference/special-files-and-directories/chezmoiroot/#chezmoiroot","text":"If a file called .chezmoiroot exists in the root of the source directory then the source state is read from the directory specified in .chezmoiroot interpreted as a relative path to the source directory. .chezmoiroot is read before all other files in the source directory.","title":".chezmoiroot"},{"location":"reference/special-files-and-directories/chezmoiscripts/","text":".chezmoiscripts If a directory called .chezmoiscripts exists in the root of the source directory then any scripts in it are executed as normal scripts without creating a corresponding directory in the target state.","title":".chezmoiscripts"},{"location":"reference/special-files-and-directories/chezmoiscripts/#chezmoiscripts","text":"If a directory called .chezmoiscripts exists in the root of the source directory then any scripts in it are executed as normal scripts without creating a corresponding directory in the target state.","title":".chezmoiscripts"},{"location":"reference/special-files-and-directories/chezmoitemplates/","text":".chezmoitemplates If a directory called .chezmoitemplates exists, then all files in this directory are parsed as templates are available as templates with a name equal to the relative path to the .chezmoitemplates directory. The template action can be used to include these templates in another template. The value of . must be set explicitly if needed, otherwise the template will be executed with nil data. Example Given: ~/.local/share/chezmoi/.chezmoitemplates/foo {{ if true }}bar{{ end }} ~/.local/share/chezmoi/dot_file.tmpl {{ template \"foo\" . }} The target state of .file will be bar .","title":".chezmoitemplates"},{"location":"reference/special-files-and-directories/chezmoitemplates/#chezmoitemplates","text":"If a directory called .chezmoitemplates exists, then all files in this directory are parsed as templates are available as templates with a name equal to the relative path to the .chezmoitemplates directory. The template action can be used to include these templates in another template. The value of . must be set explicitly if needed, otherwise the template will be executed with nil data. Example Given: ~/.local/share/chezmoi/.chezmoitemplates/foo {{ if true }}bar{{ end }} ~/.local/share/chezmoi/dot_file.tmpl {{ template \"foo\" . }} The target state of .file will be bar .","title":".chezmoitemplates"},{"location":"reference/special-files-and-directories/chezmoiversion/","text":".chezmoiversion If a file called .chezmoiversion exists, then its contents are interpreted as a semantic version defining the minimum version of chezmoi required to interpret the source state correctly. chezmoi will refuse to interpret the source state if the current version is too old. Example ~/.local/share/chezmoi/.chezmoiversion 1.5.0","title":".chezmoiversion"},{"location":"reference/special-files-and-directories/chezmoiversion/#chezmoiversion","text":"If a file called .chezmoiversion exists, then its contents are interpreted as a semantic version defining the minimum version of chezmoi required to interpret the source state correctly. chezmoi will refuse to interpret the source state if the current version is too old. Example ~/.local/share/chezmoi/.chezmoiversion 1.5.0","title":".chezmoiversion"},{"location":"reference/templates/","text":"Templates chezmoi executes templates using text/template . The result is treated differently depending on whether the target is a file or a symlink. If target is a file, then: If the result is an empty string, then the file is removed. Otherwise, the target file contents are result. If the target is a symlink, then: Leading and trailing whitespace are stripped from the result. If the result is an empty string, then the symlink is removed. Otherwise, the target symlink target is the result. chezmoi executes templates using text/template 's missingkey=error option, which means that misspelled or missing keys will raise an error. This can be overridden by setting a list of options in the configuration file. Hint For a full list of template options, see Template.Option . Example ~/.config/chezmoi/chezmoi.toml [template] options = [ \"missingkey=zero\" ]","title":"Templates"},{"location":"reference/templates/#templates","text":"chezmoi executes templates using text/template . The result is treated differently depending on whether the target is a file or a symlink. If target is a file, then: If the result is an empty string, then the file is removed. Otherwise, the target file contents are result. If the target is a symlink, then: Leading and trailing whitespace are stripped from the result. If the result is an empty string, then the symlink is removed. Otherwise, the target symlink target is the result. chezmoi executes templates using text/template 's missingkey=error option, which means that misspelled or missing keys will raise an error. This can be overridden by setting a list of options in the configuration file. Hint For a full list of template options, see Template.Option . Example ~/.config/chezmoi/chezmoi.toml [template] options = [ \"missingkey=zero\" ]","title":"Templates"},{"location":"reference/templates/variables/","text":"Variables chezmoi provides the following automatically-populated variables: Variable Type Value .chezmoi.arch string Architecture, e.g. amd64 , arm , etc. as returned by runtime.GOARCH .chezmoi.args []string The arguments passed to the chezmoi command, starting with the program command .chezmoi.cacheDir string The cache directory .chezmoi.configFile string The path to the configuration file used by chezmoi .chezmoi.executable string The path to the chezmoi executable, if available .chezmoi.fqdnHostname string The fully-qualified domain name hostname of the machine chezmoi is running on .chezmoi.gid string The primary group ID .chezmoi.group string The group of the user running chezmoi .chezmoi.homeDir string The home directory of the user running chezmoi .chezmoi.hostname string The hostname of the machine chezmoi is running on, up to the first . .chezmoi.kernel string Contains information from /proc/sys/kernel . Linux only, useful for detecting specific kernels (e.g. Microsoft's WSL kernel) .chezmoi.os string Operating system, e.g. darwin , linux , etc. as returned by runtime.GOOS .chezmoi.osRelease string The information from /etc/os-release , Linux only, run chezmoi data to see its output .chezmoi.sourceDir string The source directory .chezmoi.sourceFile string The path of the template relative to the source directory .chezmoi.uid string The user ID .chezmoi.username string The username of the user running chezmoi .chezmoi.version.builtBy string The program that built the chezmoi executable, if set .chezmoi.version.commit string The git commit at which the chezmoi executable was built, if set .chezmoi.version.date string The timestamp at which the chezmoi executable was built, if set .chezmoi.version.version string The version of chezmoi .chezmoi.windowsVersion object Windows version information, if running on Windows .chezmoi.workingTree string The working tree of the source directory .chezmoi.windowsVersion contains the following keys populated from the registry key Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion . Key Type currentBuild string currentMajorVersionNumber integer currentMinorVersionNumber integer currentVersion string displayVersion string editionID string productName string Additional variables can be defined in the config file in the data section. Variable names must consist of a letter and be followed by zero or more letters and/or digits. Hint Until #463 is resolved, custom data fields from the data section appear as all lowercase strings.","title":"Variables"},{"location":"reference/templates/variables/#variables","text":"chezmoi provides the following automatically-populated variables: Variable Type Value .chezmoi.arch string Architecture, e.g. amd64 , arm , etc. as returned by runtime.GOARCH .chezmoi.args []string The arguments passed to the chezmoi command, starting with the program command .chezmoi.cacheDir string The cache directory .chezmoi.configFile string The path to the configuration file used by chezmoi .chezmoi.executable string The path to the chezmoi executable, if available .chezmoi.fqdnHostname string The fully-qualified domain name hostname of the machine chezmoi is running on .chezmoi.gid string The primary group ID .chezmoi.group string The group of the user running chezmoi .chezmoi.homeDir string The home directory of the user running chezmoi .chezmoi.hostname string The hostname of the machine chezmoi is running on, up to the first . .chezmoi.kernel string Contains information from /proc/sys/kernel . Linux only, useful for detecting specific kernels (e.g. Microsoft's WSL kernel) .chezmoi.os string Operating system, e.g. darwin , linux , etc. as returned by runtime.GOOS .chezmoi.osRelease string The information from /etc/os-release , Linux only, run chezmoi data to see its output .chezmoi.sourceDir string The source directory .chezmoi.sourceFile string The path of the template relative to the source directory .chezmoi.uid string The user ID .chezmoi.username string The username of the user running chezmoi .chezmoi.version.builtBy string The program that built the chezmoi executable, if set .chezmoi.version.commit string The git commit at which the chezmoi executable was built, if set .chezmoi.version.date string The timestamp at which the chezmoi executable was built, if set .chezmoi.version.version string The version of chezmoi .chezmoi.windowsVersion object Windows version information, if running on Windows .chezmoi.workingTree string The working tree of the source directory .chezmoi.windowsVersion contains the following keys populated from the registry key Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion . Key Type currentBuild string currentMajorVersionNumber integer currentMinorVersionNumber integer currentVersion string displayVersion string editionID string productName string Additional variables can be defined in the config file in the data section. Variable names must consist of a letter and be followed by zero or more letters and/or digits. Hint Until #463 is resolved, custom data fields from the data section appear as all lowercase strings.","title":"Variables"},{"location":"reference/templates/1password-functions/","text":"1Password functions The onepassword* template functions return structured data from 1Password using the 1Password CLI ( op ). Warning When using 1Password CLI 2.0, there may be an issue with pre-authenticating op because the environment variable used to store the session key has changed from OP_SESSION_account to OP_SESSION_accountUUID . Instead of using account-name , it is recommended that you use the account-uuid . This can be found using op account list . This issue does not occur when using biometric authentication and 1Password 8, or if you allow chezmoi to prompt you for 1Password authentication ( 1password.prompt = true ).","title":"1Password functions"},{"location":"reference/templates/1password-functions/#1password-functions","text":"The onepassword* template functions return structured data from 1Password using the 1Password CLI ( op ). Warning When using 1Password CLI 2.0, there may be an issue with pre-authenticating op because the environment variable used to store the session key has changed from OP_SESSION_account to OP_SESSION_accountUUID . Instead of using account-name , it is recommended that you use the account-uuid . This can be found using op account list . This issue does not occur when using biometric authentication and 1Password 8, or if you allow chezmoi to prompt you for 1Password authentication ( 1password.prompt = true ).","title":"1Password functions"},{"location":"reference/templates/1password-functions/onepassword/","text":"onepassword uuid [ vault-uuid [ account-name ]] onepassword returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op item get $UUID --format json and the output from op is parsed as JSON. The output from op is cached so calling onepassword multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op item get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op item get call, which will help it look in the right account, in case you have multiple accounts (e.g., personal and work accounts). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example {{ (onepassword \"$UUID\").fields[1].value }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\").fields[1].value }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").fields[1].value }} {{ (onepassword \"$UUID\" \"\" \"$ACCOUNT_NAME\").fields[1].value }} A more robust way to get a password field would be something like: {{ range (onepassword \"$UUID\").fields -}} {{ if and (eq .label \"password\") (eq .purpose \"PASSWORD\") -}} {{ .value -}} {{ end -}} {{ end }} Info For 1Password CLI 1.x. {{ (onepassword \"$UUID\").details.password }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\").details.password }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").details.password }} {{ (onepassword \"$UUID\" \"\" \"$ACCOUNT_NAME\").details.password }} Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepassword template function is different and your templates will need updating. You may wish to use onepasswordDetailsFields or onepasswordItemFields instead of this function, as onepassword returns fields as a list of objects. However, this function may return values that are inaccessible from the other functions. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepassword \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepassword"},{"location":"reference/templates/1password-functions/onepassword/#onepassword-uuid-vault-uuid-account-name","text":"onepassword returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op item get $UUID --format json and the output from op is parsed as JSON. The output from op is cached so calling onepassword multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op item get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op item get call, which will help it look in the right account, in case you have multiple accounts (e.g., personal and work accounts). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example {{ (onepassword \"$UUID\").fields[1].value }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\").fields[1].value }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").fields[1].value }} {{ (onepassword \"$UUID\" \"\" \"$ACCOUNT_NAME\").fields[1].value }} A more robust way to get a password field would be something like: {{ range (onepassword \"$UUID\").fields -}} {{ if and (eq .label \"password\") (eq .purpose \"PASSWORD\") -}} {{ .value -}} {{ end -}} {{ end }} Info For 1Password CLI 1.x. {{ (onepassword \"$UUID\").details.password }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\").details.password }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").details.password }} {{ (onepassword \"$UUID\" \"\" \"$ACCOUNT_NAME\").details.password }} Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepassword template function is different and your templates will need updating. You may wish to use onepasswordDetailsFields or onepasswordItemFields instead of this function, as onepassword returns fields as a list of objects. However, this function may return values that are inaccessible from the other functions. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepassword \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepassword uuid [vault-uuid [account-name]]"},{"location":"reference/templates/1password-functions/onepasswordDetailsFields/","text":"onepasswordDetailsFields uuid [ vault-uuid [ account-name ]] onepasswordDetailsFields returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op get item $UUID , the output from op is parsed as JSON, and elements of details.fields are returned as a map indexed by each field's id (if set) or label (if set and id is not present). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Info For 1Password CLI 1.x, the map is indexed by each field's designation . The output from op is cached so calling onepasswordDetailsFields multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op get call, which will help it look in the right account, in case you have multiple accounts (e.g. personal and work accounts). Example {{ (onepasswordDetailsFields \"$UUID\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"$VAULT_UUID\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"\" \"$ACCOUNT_NAME\").password.value }} Example Given the output from op : { \"uuid\" : \"$UUID\" , \"details\" : { \"fields\" : [ { \"designation\" : \"username\" , \"name\" : \"username\" , \"type\" : \"T\" , \"value\" : \"exampleuser\" }, { \"designation\" : \"password\" , \"name\" : \"password\" , \"type\" : \"P\" , \"value\" : \"examplepassword\" } ] } } the return value of onepasswordDetailsFields will be the map: { \"username\" : { \"designation\" : \"username\" , \"name\" : \"username\" , \"type\" : \"T\" , \"value\" : \"exampleuser\" }, \"password\" : { \"designation\" : \"password\" , \"name\" : \"password\" , \"type\" : \"P\" , \"value\" : \"examplepassword\" } } Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepasswordDetailsFields template function is different and your templates will need updating. You may wish to use onepassword or onepasswordItemFields instead of this function, as it may not return expected values. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepasswordDetailsFields \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepasswordDetailsFields"},{"location":"reference/templates/1password-functions/onepasswordDetailsFields/#onepassworddetailsfields-uuid-vault-uuid-account-name","text":"onepasswordDetailsFields returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op get item $UUID , the output from op is parsed as JSON, and elements of details.fields are returned as a map indexed by each field's id (if set) or label (if set and id is not present). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Info For 1Password CLI 1.x, the map is indexed by each field's designation . The output from op is cached so calling onepasswordDetailsFields multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op get call, which will help it look in the right account, in case you have multiple accounts (e.g. personal and work accounts). Example {{ (onepasswordDetailsFields \"$UUID\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"$VAULT_UUID\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"\" \"$ACCOUNT_NAME\").password.value }} Example Given the output from op : { \"uuid\" : \"$UUID\" , \"details\" : { \"fields\" : [ { \"designation\" : \"username\" , \"name\" : \"username\" , \"type\" : \"T\" , \"value\" : \"exampleuser\" }, { \"designation\" : \"password\" , \"name\" : \"password\" , \"type\" : \"P\" , \"value\" : \"examplepassword\" } ] } } the return value of onepasswordDetailsFields will be the map: { \"username\" : { \"designation\" : \"username\" , \"name\" : \"username\" , \"type\" : \"T\" , \"value\" : \"exampleuser\" }, \"password\" : { \"designation\" : \"password\" , \"name\" : \"password\" , \"type\" : \"P\" , \"value\" : \"examplepassword\" } } Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepasswordDetailsFields template function is different and your templates will need updating. You may wish to use onepassword or onepasswordItemFields instead of this function, as it may not return expected values. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepasswordDetailsFields \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepasswordDetailsFields uuid [vault-uuid [account-name]]"},{"location":"reference/templates/1password-functions/onepasswordDocument/","text":"onepasswordDocument uuid [ vault-uuid [ account-name ]] onepasswordDocument returns a document from 1Password using the 1Password CLI ( op ). uuid is passed to op get document $UUID and the output from op is returned. The output from op is cached so calling onepasswordDocument multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op get call, which will help it look in the right account, in case you have multiple accounts (e.g., personal and work accounts). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example {{- onepasswordDocument \"$UUID\" -}} {{- onepasswordDocument \"$UUID\" \"$VAULT_UUID\" -}} {{- onepasswordDocument \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\" -}} {{- onepasswordDocument \"$UUID\" \"\" \"$ACCOUNT_NAME\" -}}","title":"onepasswordDocument"},{"location":"reference/templates/1password-functions/onepasswordDocument/#onepassworddocument-uuid-vault-uuid-account-name","text":"onepasswordDocument returns a document from 1Password using the 1Password CLI ( op ). uuid is passed to op get document $UUID and the output from op is returned. The output from op is cached so calling onepasswordDocument multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op get call, which will help it look in the right account, in case you have multiple accounts (e.g., personal and work accounts). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example {{- onepasswordDocument \"$UUID\" -}} {{- onepasswordDocument \"$UUID\" \"$VAULT_UUID\" -}} {{- onepasswordDocument \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\" -}} {{- onepasswordDocument \"$UUID\" \"\" \"$ACCOUNT_NAME\" -}}","title":"onepasswordDocument uuid [vault-uuid [account-name]]"},{"location":"reference/templates/1password-functions/onepasswordItemFields/","text":"onepasswordItemFields uuid [ vault-uuid [ account-name ]] onepasswordItemFields returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op item get $UUID --format json , the output from op is parsed as JSON, and each element of details.sections are iterated over and any fields are returned as a map indexed by each field's n . If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example The result of {{ (onepasswordItemFields \"abcdefghijklmnopqrstuvwxyz\").exampleLabel.value }} is equivalent to calling $ op item get abcdefghijklmnopqrstuvwxyz --fields label = exampleLabel # or $ op item get abcdefghijklmnopqrstuvwxyz --fields exampleLabel Info For 1Password CLI 1.x. {{ (onepasswordItemFields \"abcdefghijklmnopqrstuvwxyz\").exampleLabel.v }} is equivalent to calling $ op get item abcdefghijklmnopqrstuvwxyz --fields exampleLabel Example Given the output from op : { \"id\" : \"$UUID\" , \"title\" : \"$TITLE\" , \"version\" : 1 , \"vault\" : { \"id\" : \"$vaultUUID\" }, \"category\" : \"LOGIN\" , \"last_edited_by\" : \"userUUID\" , \"created_at\" : \"2022-01-12T16:29:26Z\" , \"updated_at\" : \"2022-01-12T16:29:26Z\" , \"sections\" : [ { \"id\" : \"$sectionID\" , \"label\" : \"Related Items\" } ], \"fields\" : [ { \"id\" : \"nerlnqbfzdm5q5g6ydsgdqgdw4\" , \"type\" : \"STRING\" , \"label\" : \"exampleLabel\" , \"value\" : \"exampleValue\" } ], } the return value of onepasswordItemFields will be the map: { \"exampleLabel\" : { \"id\" : \"string\" , \"type\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"label\" : \"exampleLabel\" , \"value\" : \"exampleValue\" } } Info For 1Password CLI 1.x, the output is this: { \"uuid\" : \"$UUID\" , \"details\" : { \"sections\" : [ { \"name\" : \"linked items\" , \"title\" : \"Related Items\" }, { \"fields\" : [ { \"k\" : \"string\" , \"n\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"t\" : \"exampleLabel\" , \"v\" : \"exampleValue\" } ], \"name\" : \"Section_20E0BD380789477D8904F830BFE8A121\" , \"title\" : \"\" } ] }, } the return value of onepasswordItemFields will be the map: { \"exampleLabel\" : { \"k\" : \"string\" , \"n\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"t\" : \"exampleLabel\" , \"v\" : \"exampleValue\" } } Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepasswordItemFields template function is different and your templates will need updating. You may wish to use onepassword or onepasswordDetailsFields instead of this function, as it may not return expected values. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepasswordItemFields \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepasswordItemFields"},{"location":"reference/templates/1password-functions/onepasswordItemFields/#onepassworditemfields-uuid-vault-uuid-account-name","text":"onepasswordItemFields returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op item get $UUID --format json , the output from op is parsed as JSON, and each element of details.sections are iterated over and any fields are returned as a map indexed by each field's n . If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example The result of {{ (onepasswordItemFields \"abcdefghijklmnopqrstuvwxyz\").exampleLabel.value }} is equivalent to calling $ op item get abcdefghijklmnopqrstuvwxyz --fields label = exampleLabel # or $ op item get abcdefghijklmnopqrstuvwxyz --fields exampleLabel Info For 1Password CLI 1.x. {{ (onepasswordItemFields \"abcdefghijklmnopqrstuvwxyz\").exampleLabel.v }} is equivalent to calling $ op get item abcdefghijklmnopqrstuvwxyz --fields exampleLabel Example Given the output from op : { \"id\" : \"$UUID\" , \"title\" : \"$TITLE\" , \"version\" : 1 , \"vault\" : { \"id\" : \"$vaultUUID\" }, \"category\" : \"LOGIN\" , \"last_edited_by\" : \"userUUID\" , \"created_at\" : \"2022-01-12T16:29:26Z\" , \"updated_at\" : \"2022-01-12T16:29:26Z\" , \"sections\" : [ { \"id\" : \"$sectionID\" , \"label\" : \"Related Items\" } ], \"fields\" : [ { \"id\" : \"nerlnqbfzdm5q5g6ydsgdqgdw4\" , \"type\" : \"STRING\" , \"label\" : \"exampleLabel\" , \"value\" : \"exampleValue\" } ], } the return value of onepasswordItemFields will be the map: { \"exampleLabel\" : { \"id\" : \"string\" , \"type\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"label\" : \"exampleLabel\" , \"value\" : \"exampleValue\" } } Info For 1Password CLI 1.x, the output is this: { \"uuid\" : \"$UUID\" , \"details\" : { \"sections\" : [ { \"name\" : \"linked items\" , \"title\" : \"Related Items\" }, { \"fields\" : [ { \"k\" : \"string\" , \"n\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"t\" : \"exampleLabel\" , \"v\" : \"exampleValue\" } ], \"name\" : \"Section_20E0BD380789477D8904F830BFE8A121\" , \"title\" : \"\" } ] }, } the return value of onepasswordItemFields will be the map: { \"exampleLabel\" : { \"k\" : \"string\" , \"n\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"t\" : \"exampleLabel\" , \"v\" : \"exampleValue\" } } Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepasswordItemFields template function is different and your templates will need updating. You may wish to use onepassword or onepasswordDetailsFields instead of this function, as it may not return expected values. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepasswordItemFields \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepasswordItemFields uuid [vault-uuid [account-name]]"},{"location":"reference/templates/bitwarden-functions/","text":"Bitwarden functions The bitwarden* functions return data from Bitwarden using the Bitwarden CLI ( bw ).","title":"Bitwarden functions"},{"location":"reference/templates/bitwarden-functions/#bitwarden-functions","text":"The bitwarden* functions return data from Bitwarden using the Bitwarden CLI ( bw ).","title":"Bitwarden functions"},{"location":"reference/templates/bitwarden-functions/bitwarden/","text":"bitwarden [ arg ...] bitwarden returns structured data retrieved from Bitwarden using the Bitwarden CLI ( bw ). arg s are passed to bw get unchanged and the output from bw get is parsed as JSON. The output from bw get is cached so calling bitwarden multiple times with the same arguments will only invoke bw once. Example username = {{ (bitwarden \"item\" \"$ITEMID\").login.username }} password = {{ (bitwarden \"item\" \"$ITEMID\").login.password }}","title":"bitwarden"},{"location":"reference/templates/bitwarden-functions/bitwarden/#bitwarden-arg","text":"bitwarden returns structured data retrieved from Bitwarden using the Bitwarden CLI ( bw ). arg s are passed to bw get unchanged and the output from bw get is parsed as JSON. The output from bw get is cached so calling bitwarden multiple times with the same arguments will only invoke bw once. Example username = {{ (bitwarden \"item\" \"$ITEMID\").login.username }} password = {{ (bitwarden \"item\" \"$ITEMID\").login.password }}","title":"bitwarden [arg...]"},{"location":"reference/templates/bitwarden-functions/bitwardenAttachment/","text":"bitwardenAttachment filename itemid bitwardenAttachment returns a document from Bitwarden using the Bitwarden CLI ( bw ). filename and itemid is passed to bw get attachment $FILENAME --itemid $ITEMID and the output from bw is returned. The output from bw is cached so calling bitwardenAttachment multiple times with the same filename and itemid will only invoke bw once. Example {{- bitwardenAttachment \"$FILENAME\" \"$ITEMID\" -}}","title":"bitwardenAttachment"},{"location":"reference/templates/bitwarden-functions/bitwardenAttachment/#bitwardenattachment-filename-itemid","text":"bitwardenAttachment returns a document from Bitwarden using the Bitwarden CLI ( bw ). filename and itemid is passed to bw get attachment $FILENAME --itemid $ITEMID and the output from bw is returned. The output from bw is cached so calling bitwardenAttachment multiple times with the same filename and itemid will only invoke bw once. Example {{- bitwardenAttachment \"$FILENAME\" \"$ITEMID\" -}}","title":"bitwardenAttachment filename itemid"},{"location":"reference/templates/bitwarden-functions/bitwardenFields/","text":"bitwardenFields [ arg ...] bitwardenFields returns structured data retrieved from Bitwarden using the Bitwarden CLI ( bw ). arg s are passed to bw get unchanged, the output from bw get is parsed as JSON, and elements of fields are returned as a map indexed by each field's name . The output from bw get is cached so calling bitwarden multiple times with the same arguments will only invoke bw get once. Example {{ (bitwardenFields \"item\" \"$ITEMID\").token.value }} Example Given the output from bw get : { \"object\" : \"item\" , \"id\" : \"bf22e4b4-ae4a-4d1c-8c98-ac620004b628\" , \"organizationId\" : null , \"folderId\" : null , \"type\" : 1 , \"name\" : \"example.com\" , \"notes\" : null , \"favorite\" : false , \"fields\" : [ { \"name\" : \"text\" , \"value\" : \"text-value\" , \"type\" : 0 }, { \"name\" : \"hidden\" , \"value\" : \"hidden-value\" , \"type\" : 1 } ], \"login\" : { \"username\" : \"username-value\" , \"password\" : \"password-value\" , \"totp\" : null , \"passwordRevisionDate\" : null }, \"collectionIds\" : [], \"revisionDate\" : \"2020-10-28T00:21:02.690Z\" } the return value if bitwardenFields will be the map: { \"hidden\" : { \"name\" : \"hidden\" , \"type\" : 1 , \"value\" : \"hidden-value\" }, \"token\" : { \"name\" : \"token\" , \"type\" : 0 , \"value\" : \"token-value\" } }","title":"bitwardenFields"},{"location":"reference/templates/bitwarden-functions/bitwardenFields/#bitwardenfields-arg","text":"bitwardenFields returns structured data retrieved from Bitwarden using the Bitwarden CLI ( bw ). arg s are passed to bw get unchanged, the output from bw get is parsed as JSON, and elements of fields are returned as a map indexed by each field's name . The output from bw get is cached so calling bitwarden multiple times with the same arguments will only invoke bw get once. Example {{ (bitwardenFields \"item\" \"$ITEMID\").token.value }} Example Given the output from bw get : { \"object\" : \"item\" , \"id\" : \"bf22e4b4-ae4a-4d1c-8c98-ac620004b628\" , \"organizationId\" : null , \"folderId\" : null , \"type\" : 1 , \"name\" : \"example.com\" , \"notes\" : null , \"favorite\" : false , \"fields\" : [ { \"name\" : \"text\" , \"value\" : \"text-value\" , \"type\" : 0 }, { \"name\" : \"hidden\" , \"value\" : \"hidden-value\" , \"type\" : 1 } ], \"login\" : { \"username\" : \"username-value\" , \"password\" : \"password-value\" , \"totp\" : null , \"passwordRevisionDate\" : null }, \"collectionIds\" : [], \"revisionDate\" : \"2020-10-28T00:21:02.690Z\" } the return value if bitwardenFields will be the map: { \"hidden\" : { \"name\" : \"hidden\" , \"type\" : 1 , \"value\" : \"hidden-value\" }, \"token\" : { \"name\" : \"token\" , \"type\" : 0 , \"value\" : \"token-value\" } }","title":"bitwardenFields [arg...]"},{"location":"reference/templates/functions/","text":"Functions All standard text/template and text template functions from sprig are included. chezmoi provides some additional functions.","title":"Functions"},{"location":"reference/templates/functions/#functions","text":"All standard text/template and text template functions from sprig are included. chezmoi provides some additional functions.","title":"Functions"},{"location":"reference/templates/functions/decrypt/","text":"decrypt ciphertext decrypt decrypts ciphertext using chezmoi's configured encryption method. Example {{ joinPath .chezmoi.sourceDir \".ignored-encrypted-file.age\" | include | decrypt }}","title":"decrypt"},{"location":"reference/templates/functions/decrypt/#decrypt-ciphertext","text":"decrypt decrypts ciphertext using chezmoi's configured encryption method. Example {{ joinPath .chezmoi.sourceDir \".ignored-encrypted-file.age\" | include | decrypt }}","title":"decrypt ciphertext"},{"location":"reference/templates/functions/encrypt/","text":"encrypt plaintext encrypt encrypts plaintext using chezmoi's configured encryption method.","title":"encrypt"},{"location":"reference/templates/functions/encrypt/#encrypt-plaintext","text":"encrypt encrypts plaintext using chezmoi's configured encryption method.","title":"encrypt plaintext"},{"location":"reference/templates/functions/fromYaml/","text":"fromYaml yamltext fromYaml returns the parsed value of yamltext . Example {{ (fromYaml \"key1: value\\nkey2: value\").key2 }}","title":"fromYaml"},{"location":"reference/templates/functions/fromYaml/#fromyaml-yamltext","text":"fromYaml returns the parsed value of yamltext . Example {{ (fromYaml \"key1: value\\nkey2: value\").key2 }}","title":"fromYaml yamltext"},{"location":"reference/templates/functions/glob/","text":"glob pattern glob returns the list of files matching pattern according to doublestar.Glob . Relative paths are interpreted relative to the destination directory.","title":"glob"},{"location":"reference/templates/functions/glob/#glob-pattern","text":"glob returns the list of files matching pattern according to doublestar.Glob . Relative paths are interpreted relative to the destination directory.","title":"glob pattern"},{"location":"reference/templates/functions/include/","text":"include filename include returns the literal contents of the file named *filename* . Relative paths are interpreted relative to the source directory.","title":"include"},{"location":"reference/templates/functions/include/#include-filename","text":"include returns the literal contents of the file named *filename* . Relative paths are interpreted relative to the source directory.","title":"include filename"},{"location":"reference/templates/functions/ioreg/","text":"ioreg On macOS, ioreg returns the structured output of the ioreg -a -l command, which includes detailed information about the I/O Kit registry. On non-macOS operating systems, ioreg returns nil . The output from ioreg is cached so multiple calls to the ioreg function will only execute the ioreg -a -l command once. Example {{ if eq .chezmoi.os \"darwin\" }} {{ $serialNumber := index ioreg \"IORegistryEntryChildren\" 0 \"IOPlatformSerialNumber\" }} {{ end }} Warning The ioreg function can be very slow and should not be used. It will be removed in a later version of chezmoi.","title":"ioreg"},{"location":"reference/templates/functions/ioreg/#ioreg","text":"On macOS, ioreg returns the structured output of the ioreg -a -l command, which includes detailed information about the I/O Kit registry. On non-macOS operating systems, ioreg returns nil . The output from ioreg is cached so multiple calls to the ioreg function will only execute the ioreg -a -l command once. Example {{ if eq .chezmoi.os \"darwin\" }} {{ $serialNumber := index ioreg \"IORegistryEntryChildren\" 0 \"IOPlatformSerialNumber\" }} {{ end }} Warning The ioreg function can be very slow and should not be used. It will be removed in a later version of chezmoi.","title":"ioreg"},{"location":"reference/templates/functions/joinPath/","text":"joinPath element ... joinPath joins any number of path elements into a single path, separating them with the OS-specific path separator. Empty elements are ignored. The result is cleaned. If the argument list is empty or all its elements are empty, joinPath returns an empty string. On Windows, the result will only be a UNC path if the first non-empty element is a UNC path. Example {{ joinPath .chezmoi.homeDir \".zshrc\" }}","title":"joinPath"},{"location":"reference/templates/functions/joinPath/#joinpath-element","text":"joinPath joins any number of path elements into a single path, separating them with the OS-specific path separator. Empty elements are ignored. The result is cleaned. If the argument list is empty or all its elements are empty, joinPath returns an empty string. On Windows, the result will only be a UNC path if the first non-empty element is a UNC path. Example {{ joinPath .chezmoi.homeDir \".zshrc\" }}","title":"joinPath element..."},{"location":"reference/templates/functions/lookPath/","text":"lookPath file lookPath searches for an executable named file in the directories named by the PATH environment variable. If file contains a slash, it is tried directly and the PATH is not consulted. The result may be an absolute path or a path relative to the current directory. If file is not found, lookPath returns an empty string. lookPath is not hermetic: its return value depends on the state of the environment and the filesystem at the moment the template is executed. Exercise caution when using it in your templates. Example {{ if lookPath \"diff-so-fancy\" }} # diff-so-fancy is in $PATH {{ end }}","title":"lookPath"},{"location":"reference/templates/functions/lookPath/#lookpath-file","text":"lookPath searches for an executable named file in the directories named by the PATH environment variable. If file contains a slash, it is tried directly and the PATH is not consulted. The result may be an absolute path or a path relative to the current directory. If file is not found, lookPath returns an empty string. lookPath is not hermetic: its return value depends on the state of the environment and the filesystem at the moment the template is executed. Exercise caution when using it in your templates. Example {{ if lookPath \"diff-so-fancy\" }} # diff-so-fancy is in $PATH {{ end }}","title":"lookPath file"},{"location":"reference/templates/functions/mozillaInstallHash/","text":"mozillaInstallHash path mozillaInstallHash returns the Mozilla install hash for path . This is a convenience function to assist the management of Firefox profiles.","title":"mozillaInstallHash"},{"location":"reference/templates/functions/mozillaInstallHash/#mozillainstallhash-path","text":"mozillaInstallHash returns the Mozilla install hash for path . This is a convenience function to assist the management of Firefox profiles.","title":"mozillaInstallHash path"},{"location":"reference/templates/functions/output/","text":"output name [ arg ...] output returns the output of executing the command name with arg s. If executing the command returns an error then template execution exits with an error. The execution occurs every time that the template is executed. It is the user's responsibility to ensure that executing the command is both idempotent and fast. Example current-context: {{ output \"kubectl\" \"config\" \"current-context\" | trim }}","title":"output"},{"location":"reference/templates/functions/output/#output-name-arg","text":"output returns the output of executing the command name with arg s. If executing the command returns an error then template execution exits with an error. The execution occurs every time that the template is executed. It is the user's responsibility to ensure that executing the command is both idempotent and fast. Example current-context: {{ output \"kubectl\" \"config\" \"current-context\" | trim }}","title":"output name [arg...]"},{"location":"reference/templates/functions/stat/","text":"stat name stat runs stat(2) on name . If name exists it returns structured data. If name does not exist then it returns a false value. If stat(2) returns any other error then it raises an error. The structured value returned if name exists contains the fields name , size , mode , perm , modTime , and isDir . stat is not hermetic: its return value depends on the state of the filesystem at the moment the template is executed. Exercise caution when using it in your templates. Example {{ if stat (joinPath .chezmoi.homeDir \".pyenv\") }} # ~/.pyenv exists {{ end }}","title":"stat"},{"location":"reference/templates/functions/stat/#stat-name","text":"stat runs stat(2) on name . If name exists it returns structured data. If name does not exist then it returns a false value. If stat(2) returns any other error then it raises an error. The structured value returned if name exists contains the fields name , size , mode , perm , modTime , and isDir . stat is not hermetic: its return value depends on the state of the filesystem at the moment the template is executed. Exercise caution when using it in your templates. Example {{ if stat (joinPath .chezmoi.homeDir \".pyenv\") }} # ~/.pyenv exists {{ end }}","title":"stat name"},{"location":"reference/templates/functions/toYaml/","text":"toYaml value toYaml returns the YAML representation of value . Example {{ dict \"key\" \"value\" | toYaml }}","title":"toYaml"},{"location":"reference/templates/functions/toYaml/#toyaml-value","text":"toYaml returns the YAML representation of value . Example {{ dict \"key\" \"value\" | toYaml }}","title":"toYaml value"},{"location":"reference/templates/github-functions/","text":"GitHub functions The gitHub* template functions return data from the GitHub API. By default, an anonymous GitHub API request will be made, which is subject to GitHub's rate limits (currently 60 requests per hour per source IP address). If any of the environment variables $CHEZMOI_GITHUB_ACCESS_TOKEN , $GITHUB_ACCESS_TOKEN , or $GITHUB_TOKEN are found, then the first one found will be used to authenticate the GitHub API request, with a higher rate limit (currently 5,000 requests per hour per user). In practice, GitHub API rate limits are high enough that you should rarely need to set a token, unless you are sharing a source IP address with many other GitHub users. If needed, the GitHub documentation describes how to create a personal access token .","title":"GitHub functions"},{"location":"reference/templates/github-functions/#github-functions","text":"The gitHub* template functions return data from the GitHub API. By default, an anonymous GitHub API request will be made, which is subject to GitHub's rate limits (currently 60 requests per hour per source IP address). If any of the environment variables $CHEZMOI_GITHUB_ACCESS_TOKEN , $GITHUB_ACCESS_TOKEN , or $GITHUB_TOKEN are found, then the first one found will be used to authenticate the GitHub API request, with a higher rate limit (currently 5,000 requests per hour per user). In practice, GitHub API rate limits are high enough that you should rarely need to set a token, unless you are sharing a source IP address with many other GitHub users. If needed, the GitHub documentation describes how to create a personal access token .","title":"GitHub functions"},{"location":"reference/templates/github-functions/gitHubKeys/","text":"gitHubKeys user gitHubKeys returns user 's public SSH keys from GitHub using the GitHub API. The returned value is a slice of structs with .ID and .Key fields. Warning If you use this function to populate your ~/.ssh/authorized_keys file then you potentially open SSH access to anyone who is able to modify or add to your GitHub public SSH keys, possibly including certain GitHub employees. You should not use this function on publicly-accessible machines and should always verify that no unwanted keys have been added, for example by using the -v / --verbose option when running chezmoi apply or chezmoi update . Example {{ range gitHubKeys \"user\" }} {{- .Key }} {{ end }}","title":"gitHubKeys"},{"location":"reference/templates/github-functions/gitHubKeys/#githubkeys-user","text":"gitHubKeys returns user 's public SSH keys from GitHub using the GitHub API. The returned value is a slice of structs with .ID and .Key fields. Warning If you use this function to populate your ~/.ssh/authorized_keys file then you potentially open SSH access to anyone who is able to modify or add to your GitHub public SSH keys, possibly including certain GitHub employees. You should not use this function on publicly-accessible machines and should always verify that no unwanted keys have been added, for example by using the -v / --verbose option when running chezmoi apply or chezmoi update . Example {{ range gitHubKeys \"user\" }} {{- .Key }} {{ end }}","title":"gitHubKeys user"},{"location":"reference/templates/github-functions/gitHubLatestRelease/","text":"gitHubLatestRelease user-repo gitHubLatestRelease calls the GitHub API to retrieve the latest release about the given user-repo , returning structured data as defined by the GitHub Go API bindings . Calls to gitHubLatestRelease are cached so calling gitHubLatestRelease with the same user-repo will only result in one call to the GitHub API. Example {{ (gitHubLatestRelease \"docker/compose\").TagName }}","title":"gitHubLatestRelease"},{"location":"reference/templates/github-functions/gitHubLatestRelease/#githublatestrelease-user-repo","text":"gitHubLatestRelease calls the GitHub API to retrieve the latest release about the given user-repo , returning structured data as defined by the GitHub Go API bindings . Calls to gitHubLatestRelease are cached so calling gitHubLatestRelease with the same user-repo will only result in one call to the GitHub API. Example {{ (gitHubLatestRelease \"docker/compose\").TagName }}","title":"gitHubLatestRelease user-repo"},{"location":"reference/templates/gopass-functions/","text":"gopass functions The gopass* template functions return data stored in gopass using the gopass CLI ( gopass ).","title":"gopass functions"},{"location":"reference/templates/gopass-functions/#gopass-functions","text":"The gopass* template functions return data stored in gopass using the gopass CLI ( gopass ).","title":"gopass functions"},{"location":"reference/templates/gopass-functions/gopass/","text":"gopass gopass-name gopass returns passwords stored in gopass using the gopass CLI ( gopass ). gopass-name is passed to gopass show --password $GOPASS_NAME and the first line of the output of gopass is returned with the trailing newline stripped. The output from gopass is cached so calling gopass multiple times with the same gopass-name will only invoke gopass once. Example {{ gopass \"$PASS_NAME\" }}","title":"gopass"},{"location":"reference/templates/gopass-functions/gopass/#gopass-gopass-name","text":"gopass returns passwords stored in gopass using the gopass CLI ( gopass ). gopass-name is passed to gopass show --password $GOPASS_NAME and the first line of the output of gopass is returned with the trailing newline stripped. The output from gopass is cached so calling gopass multiple times with the same gopass-name will only invoke gopass once. Example {{ gopass \"$PASS_NAME\" }}","title":"gopass gopass-name"},{"location":"reference/templates/gopass-functions/gopassRaw/","text":"gopassRaw gopass-name gopass returns raw passwords stored in gopass using the gopass CLI ( gopass ). gopass-name is passed to gopass show --noparsing $GOPASS_NAME and the output is returned. The output from gopassRaw is cached so calling gopassRaw multiple times with the same gopass-name will only invoke gopass once.","title":"gopassRaw"},{"location":"reference/templates/gopass-functions/gopassRaw/#gopassraw-gopass-name","text":"gopass returns raw passwords stored in gopass using the gopass CLI ( gopass ). gopass-name is passed to gopass show --noparsing $GOPASS_NAME and the output is returned. The output from gopassRaw is cached so calling gopassRaw multiple times with the same gopass-name will only invoke gopass once.","title":"gopassRaw gopass-name"},{"location":"reference/templates/init-functions/","text":"Init functions These template functions are only available when generating a config file with chezmoi init . For testing with chezmoi execute-template , pass the --init flag to enable them.","title":"Init functions"},{"location":"reference/templates/init-functions/#init-functions","text":"These template functions are only available when generating a config file with chezmoi init . For testing with chezmoi execute-template , pass the --init flag to enable them.","title":"Init functions"},{"location":"reference/templates/init-functions/exit/","text":"exit code exit stops template execution and causes chezmoi to exit with code .","title":"exit"},{"location":"reference/templates/init-functions/exit/#exit-code","text":"exit stops template execution and causes chezmoi to exit with code .","title":"exit code"},{"location":"reference/templates/init-functions/promptBool/","text":"promptBool prompt [ default ] promptBool prompts the user with prompt and returns the user's response interpreted as a boolean. If default is passed the user's response is empty then it returns default . The user's response is interpreted as follows (case insensitive): Response Result 1, on, t, true, y, yes true 0, off, f, false, n, no false","title":"promptBool"},{"location":"reference/templates/init-functions/promptBool/#promptbool-prompt-default","text":"promptBool prompts the user with prompt and returns the user's response interpreted as a boolean. If default is passed the user's response is empty then it returns default . The user's response is interpreted as follows (case insensitive): Response Result 1, on, t, true, y, yes true 0, off, f, false, n, no false","title":"promptBool prompt [default]"},{"location":"reference/templates/init-functions/promptInt/","text":"promptInt prompt [ default ] promptInt prompts the user with prompt and returns the user's response interpreted as an integer. If default is passed and the user's response is empty then it returns default .","title":"promptInt"},{"location":"reference/templates/init-functions/promptInt/#promptint-prompt-default","text":"promptInt prompts the user with prompt and returns the user's response interpreted as an integer. If default is passed and the user's response is empty then it returns default .","title":"promptInt prompt [default]"},{"location":"reference/templates/init-functions/promptString/","text":"promptString prompt [ default ] promptString prompts the user with prompt and returns the user's response with all leading and trailing spaces stripped. If default is passed and the user's response is empty then it returns default . Example {{ $email := promptString \"email\" -}} [data] email = {{ $email | quote }}","title":"promptString"},{"location":"reference/templates/init-functions/promptString/#promptstring-prompt-default","text":"promptString prompts the user with prompt and returns the user's response with all leading and trailing spaces stripped. If default is passed and the user's response is empty then it returns default . Example {{ $email := promptString \"email\" -}} [data] email = {{ $email | quote }}","title":"promptString prompt [default]"},{"location":"reference/templates/init-functions/stdinIsATTY/","text":"stdinIsATTY stdinIsATTY returns true if chezmoi's standard input is a TTY. It is primarily useful for determining whether prompt* functions should be called or default values be used. Example {{ $email := \"\" }} {{ if stdinIsATTY }} {{ $email = promptString \"email\" }} {{ else }} {{ $email = \"user@example.com\" }} {{ end }}","title":"stdinIsATTY"},{"location":"reference/templates/init-functions/stdinIsATTY/#stdinisatty","text":"stdinIsATTY returns true if chezmoi's standard input is a TTY. It is primarily useful for determining whether prompt* functions should be called or default values be used. Example {{ $email := \"\" }} {{ if stdinIsATTY }} {{ $email = promptString \"email\" }} {{ else }} {{ $email = \"user@example.com\" }} {{ end }}","title":"stdinIsATTY"},{"location":"reference/templates/init-functions/writeToStdout/","text":"writeToStdout string ... writeToStdout writes each string to stdout. Example {{- writeToStdout \"Hello, world\\n\" -}}","title":"writeToStdout"},{"location":"reference/templates/init-functions/writeToStdout/#writetostdout-string","text":"writeToStdout writes each string to stdout. Example {{- writeToStdout \"Hello, world\\n\" -}}","title":"writeToStdout string..."},{"location":"reference/templates/keepassxc-functions/","text":"KeePassXC functions The keepassxc* template functions return structured data retrieved from a KeePassXC database using the KeePassXC CLI ( keepassxc-cli ) The database is configured by setting keepassxc.database in the configuration file. You will be prompted for the database password the first time keepassxc-cli is run, and the password is cached, in plain text, in memory until chezmoi terminates. The command used can by changed by setting the keepassxc.command configuration variable, and extra arguments can be added by setting keepassxc.args .","title":"KeePassXC functions"},{"location":"reference/templates/keepassxc-functions/#keepassxc-functions","text":"The keepassxc* template functions return structured data retrieved from a KeePassXC database using the KeePassXC CLI ( keepassxc-cli ) The database is configured by setting keepassxc.database in the configuration file. You will be prompted for the database password the first time keepassxc-cli is run, and the password is cached, in plain text, in memory until chezmoi terminates. The command used can by changed by setting the keepassxc.command configuration variable, and extra arguments can be added by setting keepassxc.args .","title":"KeePassXC functions"},{"location":"reference/templates/keepassxc-functions/keepassxc/","text":"keepassxc entry keepassxc returns structured data for entry using keepassxc-cli . The output from keepassxc-cli is parsed into key-value pairs and cached so calling keepassxc multiple times with the same entry will only invoke keepassxc-cli once. Example username = {{ (keepassxc \"example.com\").UserName }} password = {{ (keepassxc \"example.com\").Password }}","title":"keepassxc"},{"location":"reference/templates/keepassxc-functions/keepassxc/#keepassxc-entry","text":"keepassxc returns structured data for entry using keepassxc-cli . The output from keepassxc-cli is parsed into key-value pairs and cached so calling keepassxc multiple times with the same entry will only invoke keepassxc-cli once. Example username = {{ (keepassxc \"example.com\").UserName }} password = {{ (keepassxc \"example.com\").Password }}","title":"keepassxc entry"},{"location":"reference/templates/keepassxc-functions/keepassxcAttachment/","text":"keepassxcAttachment entry name keepassxcAttachment returns the attachment with name of entry using keepassxc-cli . Example {{- keepassxcAttachment \"SSH Config\" \"config\" -}}","title":"keepassxcAttachment"},{"location":"reference/templates/keepassxc-functions/keepassxcAttachment/#keepassxcattachment-entry-name","text":"keepassxcAttachment returns the attachment with name of entry using keepassxc-cli . Example {{- keepassxcAttachment \"SSH Config\" \"config\" -}}","title":"keepassxcAttachment entry name"},{"location":"reference/templates/keepassxc-functions/keepassxcAttribute/","text":"keepassxcAttribute entry attribute keepassxcAttribute returns the attribute attribute of entry using keepassxc-cli , with any leading or trailing whitespace removed. Example {{ keepassxcAttribute \"SSH Key\" \"private-key\" }}","title":"keepassxcAttribute"},{"location":"reference/templates/keepassxc-functions/keepassxcAttribute/#keepassxcattribute-entry-attribute","text":"keepassxcAttribute returns the attribute attribute of entry using keepassxc-cli , with any leading or trailing whitespace removed. Example {{ keepassxcAttribute \"SSH Key\" \"private-key\" }}","title":"keepassxcAttribute entry attribute"},{"location":"reference/templates/keeper-functions/","text":"Keeper functions The keeper* functions return data from Keeper Commander CLI ( keeper ). The command used can by changed by setting the keeper.command configuration variable, and extra arguments can be added by setting keeper.args .","title":"Keeper functions"},{"location":"reference/templates/keeper-functions/#keeper-functions","text":"The keeper* functions return data from Keeper Commander CLI ( keeper ). The command used can by changed by setting the keeper.command configuration variable, and extra arguments can be added by setting keeper.args .","title":"Keeper functions"},{"location":"reference/templates/keeper-functions/keeper/","text":"keeper uid keeper returns structured data retreived from Keeper using the Commander CLI . uid is passed to keeper get --format=json and the output is parsed as JSON.","title":"keeper"},{"location":"reference/templates/keeper-functions/keeper/#keeper-uid","text":"keeper returns structured data retreived from Keeper using the Commander CLI . uid is passed to keeper get --format=json and the output is parsed as JSON.","title":"keeper uid"},{"location":"reference/templates/keeper-functions/keeperDataFields/","text":"keeperDataFields uid keeperDataFields returns the .data.fields elements of keeper get --format=json *uid* indexed by type . Example url = {{ (keeperDataFields \"$UID\").url }} login = {{ index (keeperDataFields \"$UID\").login 0 }} password = {{ index (keeperDataFields \"$UID\").password 0 }}","title":"keeperDataFields"},{"location":"reference/templates/keeper-functions/keeperDataFields/#keeperdatafields-uid","text":"keeperDataFields returns the .data.fields elements of keeper get --format=json *uid* indexed by type .","title":"keeperDataFields uid"},{"location":"reference/templates/keeper-functions/keeperDataFields/#example","text":"url = {{ (keeperDataFields \"$UID\").url }} login = {{ index (keeperDataFields \"$UID\").login 0 }} password = {{ index (keeperDataFields \"$UID\").password 0 }}","title":"Example"},{"location":"reference/templates/keeper-functions/keeperFindPassword/","text":"keeperFindPassword query keeperFindPassword returns the output of keeper find-password query . query can be a UID or a path.","title":"keeperFindPassword"},{"location":"reference/templates/keeper-functions/keeperFindPassword/#keeperfindpassword-query","text":"keeperFindPassword returns the output of keeper find-password query . query can be a UID or a path.","title":"keeperFindPassword query"},{"location":"reference/templates/keyring-functions/keyring/","text":"keyring service user keyring retrieves the value associated with service and user from the user's keyring. OS Keyring macOS Keychain Linux GNOME Keyring Windows Windows Credentials Manager FreeBSD GNOME Keyring Example [github] user = {{ .github.user | quote }} token = {{ keyring \"github\" .github.user | quote }} Warning On FreeBSD, the keyring template function is only available if chezmoi was compiled with cgo enabled. The official release binaries of chezmoi are not compiled with cgo enabled, and keyring will always return an empty string.","title":"keyring"},{"location":"reference/templates/keyring-functions/keyring/#keyring-service-user","text":"keyring retrieves the value associated with service and user from the user's keyring. OS Keyring macOS Keychain Linux GNOME Keyring Windows Windows Credentials Manager FreeBSD GNOME Keyring Example [github] user = {{ .github.user | quote }} token = {{ keyring \"github\" .github.user | quote }} Warning On FreeBSD, the keyring template function is only available if chezmoi was compiled with cgo enabled. The official release binaries of chezmoi are not compiled with cgo enabled, and keyring will always return an empty string.","title":"keyring service user"},{"location":"reference/templates/lastpass-functions/","text":"LastPass functions The lastpass* template functions return structured data from LastPass using the LastPass CLI ( lpass ).","title":"LastPass functions"},{"location":"reference/templates/lastpass-functions/#lastpass-functions","text":"The lastpass* template functions return structured data from LastPass using the LastPass CLI ( lpass ).","title":"LastPass functions"},{"location":"reference/templates/lastpass-functions/lastpass/","text":"lastpass id lastpass returns structured data from LastPass using the LastPass CLI ( lpass ). id is passed to lpass show --json $ID and the output from lpass is parsed as JSON. In addition, the note field, if present, is further parsed as colon-separated key-value pairs. The structured data is an array so typically the index function is used to extract the first item. The output from lastpass is cached so calling lastpass multiple times with the same id will only invoke lpass once. Example githubPassword = {{ (index (lastpass \"GitHub\") 0).password | quote }} {{ (index (lastpass \"SSH\") 0).note.privateKey }}","title":"lastpass"},{"location":"reference/templates/lastpass-functions/lastpass/#lastpass-id","text":"lastpass returns structured data from LastPass using the LastPass CLI ( lpass ). id is passed to lpass show --json $ID and the output from lpass is parsed as JSON. In addition, the note field, if present, is further parsed as colon-separated key-value pairs. The structured data is an array so typically the index function is used to extract the first item. The output from lastpass is cached so calling lastpass multiple times with the same id will only invoke lpass once. Example githubPassword = {{ (index (lastpass \"GitHub\") 0).password | quote }} {{ (index (lastpass \"SSH\") 0).note.privateKey }}","title":"lastpass id"},{"location":"reference/templates/lastpass-functions/lastpassRaw/","text":"lastpassRaw id lastpassRaw returns structured data from LastPass using the LastPass CLI ( lpass ). It behaves identically to the lastpass function, except that no further parsing is done on the note field. Example {{ (index (lastpassRaw \"SSH Private Key\") 0).note }}","title":"lastpassRaw"},{"location":"reference/templates/lastpass-functions/lastpassRaw/#lastpassraw-id","text":"lastpassRaw returns structured data from LastPass using the LastPass CLI ( lpass ). It behaves identically to the lastpass function, except that no further parsing is done on the note field. Example {{ (index (lastpassRaw \"SSH Private Key\") 0).note }}","title":"lastpassRaw id"},{"location":"reference/templates/pass-functions/","text":"pass functions The pass template functions return passwords stored in pass using the pass CLI ( pass ).","title":"pass functions"},{"location":"reference/templates/pass-functions/#pass-functions","text":"The pass template functions return passwords stored in pass using the pass CLI ( pass ).","title":"pass functions"},{"location":"reference/templates/pass-functions/pass/","text":"pass pass-name pass returns passwords stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the first line of the output of pass is returned with the trailing newline stripped. The output from pass is cached so calling pass multiple times with the same pass-name will only invoke pass once. Example {{ pass \"$PASS_NAME\" }}","title":"pass"},{"location":"reference/templates/pass-functions/pass/#pass-pass-name","text":"pass returns passwords stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the first line of the output of pass is returned with the trailing newline stripped. The output from pass is cached so calling pass multiple times with the same pass-name will only invoke pass once. Example {{ pass \"$PASS_NAME\" }}","title":"pass pass-name"},{"location":"reference/templates/pass-functions/passFields/","text":"passFields pass-name passFields returns structured data stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the output is parsed as colon-separated key-value pairs, one per line. The return value is a map of keys to values. Example Given the output from pass : GitHub login: username password: secret the return value will be the map: { \"login\" : \"username\" , \"password\" : \"secret\" } Example {{ (passFields \"GitHub\").password }}","title":"passFields"},{"location":"reference/templates/pass-functions/passFields/#passfields-pass-name","text":"passFields returns structured data stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the output is parsed as colon-separated key-value pairs, one per line. The return value is a map of keys to values. Example Given the output from pass : GitHub login: username password: secret the return value will be the map: { \"login\" : \"username\" , \"password\" : \"secret\" } Example {{ (passFields \"GitHub\").password }}","title":"passFields pass-name"},{"location":"reference/templates/pass-functions/passRaw/","text":"passRaw pass-name passRaw returns passwords stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the output is returned. The output from pass is cached so calling passRaw multiple times with the same pass-name will only invoke pass once.","title":"passRaw"},{"location":"reference/templates/pass-functions/passRaw/#passraw-pass-name","text":"passRaw returns passwords stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the output is returned. The output from pass is cached so calling passRaw multiple times with the same pass-name will only invoke pass once.","title":"passRaw pass-name"},{"location":"reference/templates/secret-functions/","text":"Generic secret functions The secret* template functions return the output of the generic secret command defined by the secret.command configuration variable.","title":"Generic secret functions"},{"location":"reference/templates/secret-functions/#generic-secret-functions","text":"The secret* template functions return the output of the generic secret command defined by the secret.command configuration variable.","title":"Generic secret functions"},{"location":"reference/templates/secret-functions/secret/","text":"secret [ arg ...] secret returns the output of the generic secret command defined by the secret.command configuration variable with arg s with leading and trailing whitespace removed. The output is cached so multiple calls to secret with the same arg s will only invoke the generic secret command once.","title":"secret"},{"location":"reference/templates/secret-functions/secret/#secret-arg","text":"secret returns the output of the generic secret command defined by the secret.command configuration variable with arg s with leading and trailing whitespace removed. The output is cached so multiple calls to secret with the same arg s will only invoke the generic secret command once.","title":"secret [arg...]"},{"location":"reference/templates/secret-functions/secretJSON/","text":"secretJSON [ arg ...] secretJSON returns structured data from the generic secret command defined by the secret.command configuration variable with arg s. The output is parsed as JSON. The output is cached so multiple calls to secret with the same args will only invoke the generic secret command once.","title":"secretJSON"},{"location":"reference/templates/secret-functions/secretJSON/#secretjson-arg","text":"secretJSON returns structured data from the generic secret command defined by the secret.command configuration variable with arg s. The output is parsed as JSON. The output is cached so multiple calls to secret with the same args will only invoke the generic secret command once.","title":"secretJSON [arg...]"},{"location":"reference/templates/vault-functions/vault/","text":"vault key vault returns structured data from Vault using the Vault CLI ( vault ). key is passed to vault kv get -format=json $KEY and the output from vault is parsed as JSON. The output from vault is cached so calling vault multiple times with the same key will only invoke vault once. Example {{ (vault \"$KEY\").data.data.password }}","title":"vault"},{"location":"reference/templates/vault-functions/vault/#vault-key","text":"vault returns structured data from Vault using the Vault CLI ( vault ). key is passed to vault kv get -format=json $KEY and the output from vault is parsed as JSON. The output from vault is cached so calling vault multiple times with the same key will only invoke vault once. Example {{ (vault \"$KEY\").data.data.password }}","title":"vault key"},{"location":"user-guide/command-overview/","text":"Command overview Getting started chezmoi doctor checks for common problems. If you encounter something unexpected, run this first. chezmoi init creates chezmoi's source directory and a git repo on a new machine. Daily commands chezmoi add $FILE adds $FILE from your home directory to the source directory. chezmoi edit $FILE opens your editor with the file in the source directory that corresponds to $FILE . chezmoi status gives a quick summary of what files would change if you ran chezmoi apply . chezmoi diff shows the changes that chezmoi apply would make to your home directory. chezmoi apply updates your dotfiles from the source directory. chezmoi edit --apply $FILE is like chezmoi edit $FILE but also runs chezmoi apply $FILE afterwards. chezmoi cd opens a subshell in the source directory. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo H->>W: chezmoi add <file> W->>W: chezmoi edit <file> W-->>H: chezmoi status W-->>H: chezmoi diff W->>H: chezmoi apply W->>H: chezmoi edit --apply <file> H-->>W: chezmoi cd Using chezmoi across multiple machines chezmoi init $GITHUB_USERNAME clones your dotfiles from GitHub into the source directory. chezmoi init --apply $GITHUB_USERNAME clones your dotfiles from GitHub into the source directory and runs chezmoi apply . chezmoi update pulls the latest changes from your remote repo and runs chezmoi apply . Use normal git commands to add, commit, and push changes to your remote repo. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <github-username> R->>H: chezmoi init --apply <github-username> R->>H: chezmoi update <github-username> W->>L: git commit L->>R: git push Working with templates chezmoi data prints the available template data. chezmoi add --template $FILE adds $FILE as a template. chezmoi chattr +template $FILE makes an existing file a template. chezmoi cat $FILE prints the target contents of $FILE , without changing $FILE . chezmoi execute-template is useful for testing and debugging templates.","title":"Command overview"},{"location":"user-guide/command-overview/#command-overview","text":"","title":"Command overview"},{"location":"user-guide/command-overview/#getting-started","text":"chezmoi doctor checks for common problems. If you encounter something unexpected, run this first. chezmoi init creates chezmoi's source directory and a git repo on a new machine.","title":"Getting started"},{"location":"user-guide/command-overview/#daily-commands","text":"chezmoi add $FILE adds $FILE from your home directory to the source directory. chezmoi edit $FILE opens your editor with the file in the source directory that corresponds to $FILE . chezmoi status gives a quick summary of what files would change if you ran chezmoi apply . chezmoi diff shows the changes that chezmoi apply would make to your home directory. chezmoi apply updates your dotfiles from the source directory. chezmoi edit --apply $FILE is like chezmoi edit $FILE but also runs chezmoi apply $FILE afterwards. chezmoi cd opens a subshell in the source directory. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo H->>W: chezmoi add <file> W->>W: chezmoi edit <file> W-->>H: chezmoi status W-->>H: chezmoi diff W->>H: chezmoi apply W->>H: chezmoi edit --apply <file> H-->>W: chezmoi cd","title":"Daily commands"},{"location":"user-guide/command-overview/#using-chezmoi-across-multiple-machines","text":"chezmoi init $GITHUB_USERNAME clones your dotfiles from GitHub into the source directory. chezmoi init --apply $GITHUB_USERNAME clones your dotfiles from GitHub into the source directory and runs chezmoi apply . chezmoi update pulls the latest changes from your remote repo and runs chezmoi apply . Use normal git commands to add, commit, and push changes to your remote repo. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <github-username> R->>H: chezmoi init --apply <github-username> R->>H: chezmoi update <github-username> W->>L: git commit L->>R: git push","title":"Using chezmoi across multiple machines"},{"location":"user-guide/command-overview/#working-with-templates","text":"chezmoi data prints the available template data. chezmoi add --template $FILE adds $FILE as a template. chezmoi chattr +template $FILE makes an existing file a template. chezmoi cat $FILE prints the target contents of $FILE , without changing $FILE . chezmoi execute-template is useful for testing and debugging templates.","title":"Working with templates"},{"location":"user-guide/daily-operations/","text":"Daily operations Pull the latest changes from your repo and apply them You can pull the changes from your repo and apply them in a single command: $ chezmoi update This runs git pull --rebase in your source directory and then chezmoi apply . sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>H: chezmoi update Pull the latest changes from your repo and see what would change, without actually applying the changes Run: $ chezmoi git pull -- --rebase && chezmoi diff This runs git pull --rebase in your source directory and chezmoi diff then shows the difference between the target state computed from your source directory and the actual state. If you're happy with the changes, then you can run $ chezmoi apply to apply them. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi git pull W-->>H: chezmoi diff W->>H: chezmoi apply Automatically commit and push changes to your repo chezmoi can automatically commit and push changes to your source directory to your repo. This feature is disabled by default. To enable it, add the following to your config file: ~/.config/chezmoi/chezmoi.toml [git] autoCommit = true autoPush = true Whenever a change is made to your source directory, chezmoi will commit the changes with an automatically-generated commit message (if autoCommit is true) and push them to your repo (if autoPush is true). autoPush implies autoCommit , i.e. if autoPush is true then chezmoi will auto-commit your changes. If you only set autoCommit to true then changes will be committed but not pushed. Be careful when using autoPush . If your dotfiles repo is public and you accidentally add a secret in plain text, that secret will be pushed to your public repo. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo W->>L: autoCommit W->>R: autoPush Install chezmoi and your dotfiles on a new machine with a single command chezmoi's install script can run chezmoi init for you by passing extra arguments to the newly installed chezmoi binary. If your dotfiles repo is github.com/$GITHUB_USERNAME/dotfiles then installing chezmoi, running chezmoi init , and running chezmoi apply can be done in a single line of shell: $ sh -c \" $( curl -fsLS chezmoi.io/get ) \" -- init --apply $GITHUB_USERNAME If your dotfiles repo has a different name to dotfiles , or if you host your dotfiles on a different service, then see the reference manual for chezmoi init . For setting up transitory environments (e.g. short-lived Linux containers) you can install chezmoi, install your dotfiles, and then remove all traces of chezmoi, including the source directory and chezmoi's configuration directory, with a single command: $ sh -c \" $( curl -fsLS chezmoi.io/get ) \" -- init --one-shot $GITHUB_USERNAME","title":"Daily operations"},{"location":"user-guide/daily-operations/#daily-operations","text":"","title":"Daily operations"},{"location":"user-guide/daily-operations/#pull-the-latest-changes-from-your-repo-and-apply-them","text":"You can pull the changes from your repo and apply them in a single command: $ chezmoi update This runs git pull --rebase in your source directory and then chezmoi apply . sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>H: chezmoi update","title":"Pull the latest changes from your repo and apply them"},{"location":"user-guide/daily-operations/#pull-the-latest-changes-from-your-repo-and-see-what-would-change-without-actually-applying-the-changes","text":"Run: $ chezmoi git pull -- --rebase && chezmoi diff This runs git pull --rebase in your source directory and chezmoi diff then shows the difference between the target state computed from your source directory and the actual state. If you're happy with the changes, then you can run $ chezmoi apply to apply them. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi git pull W-->>H: chezmoi diff W->>H: chezmoi apply","title":"Pull the latest changes from your repo and see what would change, without actually applying the changes"},{"location":"user-guide/daily-operations/#automatically-commit-and-push-changes-to-your-repo","text":"chezmoi can automatically commit and push changes to your source directory to your repo. This feature is disabled by default. To enable it, add the following to your config file: ~/.config/chezmoi/chezmoi.toml [git] autoCommit = true autoPush = true Whenever a change is made to your source directory, chezmoi will commit the changes with an automatically-generated commit message (if autoCommit is true) and push them to your repo (if autoPush is true). autoPush implies autoCommit , i.e. if autoPush is true then chezmoi will auto-commit your changes. If you only set autoCommit to true then changes will be committed but not pushed. Be careful when using autoPush . If your dotfiles repo is public and you accidentally add a secret in plain text, that secret will be pushed to your public repo. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo W->>L: autoCommit W->>R: autoPush","title":"Automatically commit and push changes to your repo"},{"location":"user-guide/daily-operations/#install-chezmoi-and-your-dotfiles-on-a-new-machine-with-a-single-command","text":"chezmoi's install script can run chezmoi init for you by passing extra arguments to the newly installed chezmoi binary. If your dotfiles repo is github.com/$GITHUB_USERNAME/dotfiles then installing chezmoi, running chezmoi init , and running chezmoi apply can be done in a single line of shell: $ sh -c \" $( curl -fsLS chezmoi.io/get ) \" -- init --apply $GITHUB_USERNAME If your dotfiles repo has a different name to dotfiles , or if you host your dotfiles on a different service, then see the reference manual for chezmoi init . For setting up transitory environments (e.g. short-lived Linux containers) you can install chezmoi, install your dotfiles, and then remove all traces of chezmoi, including the source directory and chezmoi's configuration directory, with a single command: $ sh -c \" $( curl -fsLS chezmoi.io/get ) \" -- init --one-shot $GITHUB_USERNAME","title":"Install chezmoi and your dotfiles on a new machine with a single command"},{"location":"user-guide/include-files-from-elsewhere/","text":"Include dotfiles from elsewhere The sections below contain examples of how to use .chezmoiexternal.toml to include files from external sources. For more details, check the reference manual . Include a subdirectory from a URL To include a subdirectory from another repository, e.g. Oh My Zsh , you cannot use git submodules because chezmoi uses its own format for the source state and Oh My Zsh is not distributed in this format. Instead, you can use the .chezmoiexternal.$FORMAT to tell chezmoi to import dotfiles from an external source. For example, to import Oh My Zsh, the zsh-syntax-highlighting plugin , and powerlevel10k , put the following in ~/.local/share/chezmoi/.chezmoiexternal.toml : ~/.local/share/chezmoi/.chezmoiexternal.toml [\".oh-my-zsh\"] type = \"archive\" url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/themes/powerlevel10k\"] type = \"archive\" url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\" exact = true stripComponents = 1 To apply the changes, run: $ chezmoi apply chezmoi will download the archives and unpack them as if they were part of the source state. chezmoi caches downloaded archives locally to avoid re-downloading them every time you run a chezmoi command, and will only re-download them at most every refreshPeriod (default never). In the above example refreshPeriod is set to 168h (one week) for .oh-my-zsh and .oh-my-zsh/custom/plugins/zsh-syntax-highlighting because the URL point to tarballs of the master branch, which changes over time. No refresh period is set for .oh-my-zsh/custom/themes/powerlevel10k because the URL points to the a tarball of a tagged version, which does not change over time. To bump the version of powerlevel10k, change the version in the URL. To force a refresh the downloaded archives, use the --refresh-externals flag to chezmoi apply : $ chezmoi --refresh-externals apply --refresh-externals can be shortened to -R : $ chezmoi -R apply When using Oh My Zsh, make sure you disable auto-updates by setting DISABLE_AUTO_UPDATE=\"true\" in ~/.zshrc . Auto updates will cause the ~/.oh-my-zsh directory to drift out of sync with chezmoi's source state. To update Oh My Zsh and its plugins, refresh the downloaded archives. Include a subdirectory with selected files from a URL Use include pattern filters to include only selected files from an archive URL. For example, to import just the required source files of the zsh-syntax-highlighting plugin in the example above, add in include filter to the zsh-syntax-highlighting section as shown below: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" include = [ \"*/*.zsh\" , \"*/.version\" , \"*/.revision-hash\" , \"*/highlighters/**\" ] Include a single file from a URL Including single files uses the same mechanism as including a subdirectory above, except with the external type file instead of archive . For example, to include plug.vim from github.com/junegunn/vim-plug in ~/.vim/autoload/plug.vim put the following in ~/.local/share/chezmoi/.chezmoiexternal.toml : ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/autoload/plug.vim\"] type = \"file\" url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" refreshPeriod = \"168h\" Include a subdirectory from a git repository You can configure chezmoi to keep a git repository up to date in a subdirectory by using the external type git-repo , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/pack/alker0/chezmoi.vim\"] type = \"git-repo\" url = \"https://github.com/alker0/chezmoi.vim.git\" refreshPeriod = \"168h\" If the directory does not exist then chezmoi will run git clone to clone it. If the directory does exist then chezmoi will run git pull to pull the latest changes, but not more often than every refreshPeriod . In the above example the refreshPeriod is 168h which is one week. The default refreshPeriod is zero, which disables refreshes. You can force a refresh (i.e. force a git pull ) by passing the --refresh-externals / -R flag to chezmoi apply . You can customize the arguments to git clone and git pull by setting the $DIR.clone.args and $DIR.pull.args variables in .chezmoiexternal.$FORMAT , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/pack/alker0/chezmoi.vim\"] type = \"git-repo\" url = \"https://github.com/alker0/chezmoi.vim.git\" refreshPeriod = \"168h\" [\".vim/pack/alker0/chezmoi.vim\".pull] args = [ \"--ff-only\" ] Note chezmoi's support for git-repo externals is limited to running git clone and/or git pull in a directory. The contents of git-repo externals are not manifested in commands like chezmoi archive or chezmoi dump . Note chezmoi's support for git-repo externals currently requires git to be in your $PATH . Extract a single file from an archive You can extract a single file from an archive using the $ENTRY.filter.command and $ENTRY.filter.args variables in .chezmoiexternal.$FORMAT , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml {{ $ ageVersion : = \"1.0.0\" - }} [\".local/bin/age\"] type = \"file\" url = \"https://github.com/FiloSottile/age/releases/download/v{{ $ageVersion }}/age-v{{ $ageVersion }}-{{ .chezmoi.os }}-{{ .chezmoi.arch }}.tar.gz\" executable = true refreshPeriod = \"168h\" [\".local/bin/age\".filter] command = \"tar\" args = [ \"--extract\" , \"--file\" , \"/dev/stdin\" , \"--gzip\" , \"--to-stdout\" , \"age/age\" ] This will extract the single archive member age/age from the given URL (which is computed for the current OS and architecture) to the target ./local/bin/age and set its executable bit. Import archives It is occasionally useful to import entire archives of configuration into your source state. The import command does this. For example, to import the latest version github.com/ohmyzsh/ohmyzsh to ~/.oh-my-zsh run: $ curl -s -L -o ${ TMPDIR } /oh-my-zsh-master.tar.gz https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz $ mkdir -p $( chezmoi source-path ) /dot_oh-my-zsh $ chezmoi import --strip-components 1 --destination ~/.oh-my-zsh ${ TMPDIR } /oh-my-zsh-master.tar.gz Note This only updates the source state. You will need to run: $ chezmoi apply to update your destination directory.","title":"Include files from elsewhere"},{"location":"user-guide/include-files-from-elsewhere/#include-dotfiles-from-elsewhere","text":"The sections below contain examples of how to use .chezmoiexternal.toml to include files from external sources. For more details, check the reference manual .","title":"Include dotfiles from elsewhere"},{"location":"user-guide/include-files-from-elsewhere/#include-a-subdirectory-from-a-url","text":"To include a subdirectory from another repository, e.g. Oh My Zsh , you cannot use git submodules because chezmoi uses its own format for the source state and Oh My Zsh is not distributed in this format. Instead, you can use the .chezmoiexternal.$FORMAT to tell chezmoi to import dotfiles from an external source. For example, to import Oh My Zsh, the zsh-syntax-highlighting plugin , and powerlevel10k , put the following in ~/.local/share/chezmoi/.chezmoiexternal.toml : ~/.local/share/chezmoi/.chezmoiexternal.toml [\".oh-my-zsh\"] type = \"archive\" url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/themes/powerlevel10k\"] type = \"archive\" url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\" exact = true stripComponents = 1 To apply the changes, run: $ chezmoi apply chezmoi will download the archives and unpack them as if they were part of the source state. chezmoi caches downloaded archives locally to avoid re-downloading them every time you run a chezmoi command, and will only re-download them at most every refreshPeriod (default never). In the above example refreshPeriod is set to 168h (one week) for .oh-my-zsh and .oh-my-zsh/custom/plugins/zsh-syntax-highlighting because the URL point to tarballs of the master branch, which changes over time. No refresh period is set for .oh-my-zsh/custom/themes/powerlevel10k because the URL points to the a tarball of a tagged version, which does not change over time. To bump the version of powerlevel10k, change the version in the URL. To force a refresh the downloaded archives, use the --refresh-externals flag to chezmoi apply : $ chezmoi --refresh-externals apply --refresh-externals can be shortened to -R : $ chezmoi -R apply When using Oh My Zsh, make sure you disable auto-updates by setting DISABLE_AUTO_UPDATE=\"true\" in ~/.zshrc . Auto updates will cause the ~/.oh-my-zsh directory to drift out of sync with chezmoi's source state. To update Oh My Zsh and its plugins, refresh the downloaded archives.","title":"Include a subdirectory from a URL"},{"location":"user-guide/include-files-from-elsewhere/#include-a-subdirectory-with-selected-files-from-a-url","text":"Use include pattern filters to include only selected files from an archive URL. For example, to import just the required source files of the zsh-syntax-highlighting plugin in the example above, add in include filter to the zsh-syntax-highlighting section as shown below: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" include = [ \"*/*.zsh\" , \"*/.version\" , \"*/.revision-hash\" , \"*/highlighters/**\" ]","title":"Include a subdirectory with selected files from a URL"},{"location":"user-guide/include-files-from-elsewhere/#include-a-single-file-from-a-url","text":"Including single files uses the same mechanism as including a subdirectory above, except with the external type file instead of archive . For example, to include plug.vim from github.com/junegunn/vim-plug in ~/.vim/autoload/plug.vim put the following in ~/.local/share/chezmoi/.chezmoiexternal.toml : ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/autoload/plug.vim\"] type = \"file\" url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" refreshPeriod = \"168h\"","title":"Include a single file from a URL"},{"location":"user-guide/include-files-from-elsewhere/#include-a-subdirectory-from-a-git-repository","text":"You can configure chezmoi to keep a git repository up to date in a subdirectory by using the external type git-repo , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/pack/alker0/chezmoi.vim\"] type = \"git-repo\" url = \"https://github.com/alker0/chezmoi.vim.git\" refreshPeriod = \"168h\" If the directory does not exist then chezmoi will run git clone to clone it. If the directory does exist then chezmoi will run git pull to pull the latest changes, but not more often than every refreshPeriod . In the above example the refreshPeriod is 168h which is one week. The default refreshPeriod is zero, which disables refreshes. You can force a refresh (i.e. force a git pull ) by passing the --refresh-externals / -R flag to chezmoi apply . You can customize the arguments to git clone and git pull by setting the $DIR.clone.args and $DIR.pull.args variables in .chezmoiexternal.$FORMAT , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/pack/alker0/chezmoi.vim\"] type = \"git-repo\" url = \"https://github.com/alker0/chezmoi.vim.git\" refreshPeriod = \"168h\" [\".vim/pack/alker0/chezmoi.vim\".pull] args = [ \"--ff-only\" ] Note chezmoi's support for git-repo externals is limited to running git clone and/or git pull in a directory. The contents of git-repo externals are not manifested in commands like chezmoi archive or chezmoi dump . Note chezmoi's support for git-repo externals currently requires git to be in your $PATH .","title":"Include a subdirectory from a git repository"},{"location":"user-guide/include-files-from-elsewhere/#extract-a-single-file-from-an-archive","text":"You can extract a single file from an archive using the $ENTRY.filter.command and $ENTRY.filter.args variables in .chezmoiexternal.$FORMAT , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml {{ $ ageVersion : = \"1.0.0\" - }} [\".local/bin/age\"] type = \"file\" url = \"https://github.com/FiloSottile/age/releases/download/v{{ $ageVersion }}/age-v{{ $ageVersion }}-{{ .chezmoi.os }}-{{ .chezmoi.arch }}.tar.gz\" executable = true refreshPeriod = \"168h\" [\".local/bin/age\".filter] command = \"tar\" args = [ \"--extract\" , \"--file\" , \"/dev/stdin\" , \"--gzip\" , \"--to-stdout\" , \"age/age\" ] This will extract the single archive member age/age from the given URL (which is computed for the current OS and architecture) to the target ./local/bin/age and set its executable bit.","title":"Extract a single file from an archive"},{"location":"user-guide/include-files-from-elsewhere/#import-archives","text":"It is occasionally useful to import entire archives of configuration into your source state. The import command does this. For example, to import the latest version github.com/ohmyzsh/ohmyzsh to ~/.oh-my-zsh run: $ curl -s -L -o ${ TMPDIR } /oh-my-zsh-master.tar.gz https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz $ mkdir -p $( chezmoi source-path ) /dot_oh-my-zsh $ chezmoi import --strip-components 1 --destination ~/.oh-my-zsh ${ TMPDIR } /oh-my-zsh-master.tar.gz Note This only updates the source state. You will need to run: $ chezmoi apply to update your destination directory.","title":"Import archives"},{"location":"user-guide/manage-different-types-of-file/","text":"Manage different types of file Have chezmoi create a directory, but ignore its contents If you want chezmoi to create a directory, but ignore its contents, say ~/src , first run: $ mkdir -p $( chezmoi source-path ) /src This creates the directory in the source state, which means that chezmoi will create it (if it does not already exist) when you run chezmoi apply . However, as this is an empty directory it will be ignored by git. So, create a file in the directory in the source state that will be seen by git (so git does not ignore the directory) but ignored by chezmoi (so chezmoi does not include it in the target state): $ touch $( chezmoi source-path ) /src/.keep chezmoi automatically creates .keep files when you add an empty directory with chezmoi add . Ensure that a target is removed Create a file called .chezmoiremove in the source directory containing a list of patterns of files to remove. chezmoi will remove anything in the target directory that matches the pattern. As this command is potentially dangerous, you should run chezmoi in verbose, dry-run mode beforehand to see what would be removed: $ chezmoi apply --dry-run --verbose .chezmoiremove is interpreted as a template, so you can remove different files on different machines. Negative matches (patterns prefixed with a ! ) or targets listed in .chezmoiignore will never be removed. Manage part, but not all, of a file chezmoi, by default, manages whole files, but there are two ways to manage just parts of a file. Firstly, a modify_ script receives the current contents of the file on the standard input and chezmoi reads the target contents of the file from the script's standard output. This can be used to change parts of a file, for example using sed . Hint If you need random access to the file to modify it, then you can write standard input to a temporary file, modify the temporary file, and then write the temporary file to the standard output, for example: #!/bin/sh tempfile = \" $( mktemp ) \" trap 'rm -rf \"${tempfile}\"' EXIT cat > \" ${ tempfile } \" # modify ${tempfile} cat \" ${ tempfile } \" Note If the file does not exist then the standard input to the modify_ script will be empty and it is the script's responsibility to write a complete file to the standard output. Secondly, if only a small part of the file changes then consider using a template to re-generate the full contents of the file from the current state. For example, Kubernetes configurations include a current context that can be substituted with: ~/.local/share/chezmoi/dot_kube/config.tmpl current-context: {{ output \"kubectl\" \"config\" \"current-context\" | trim }} Manage a file's permissions, but not its contents chezmoi's create_ attributes allows you to tell chezmoi to create a file if it does not already exist. chezmoi, however, will apply any permission changes from the executable_ , private_ , and readonly_ attributes. This can be used to control a file's permissions without altering its contents. For example, if you want to ensure that ~/.kube/config always has permissions 600 then if you create an empty file called dot_kube/private_dot_config in your source state, chezmoi will ensure ~/.kube/config 's permissions are 0600 when you run chezmoi apply without changing its contents. This approach does have the downside that chezmoi will create the file if it does not already exist. If you only want chezmoi apply to set a file's permissions if it already exists and not create the file otherwise, you can use a run_ script. For example, create a file in your source state called run_set_kube_config_permissions.sh containing: #!/bin/sh FILE = \" $HOME /.kube/config\" if [ -f \" $FILE \" ] ; then if [ \" $( stat -c %a \" $FILE \" ) \" ! = \"600\" ] ; then chmod 600 \" $FILE \" fi fi Handle configuration files which are externally modified Some programs modify their configuration files. When you next run chezmoi apply , any modifications made by the program will be lost. You can track changes to these files by replacing with a symlink back to a file in your source directory, which is under version control. Here is a worked example for VSCode's settings.json on Linux: Copy the configuration file to your source directory: $ cp ~/.config/Code/User/settings.json $( chezmoi source-path ) Tell chezmoi to ignore this file: $ echo settings.json >> $( chezmoi source-path ) /.chezmoiignore Tell chezmoi that ~/.config/Code/User/settings.json should be a symlink to the file in your source directory: $ mkdir -p $( chezmoi source-path ) /private_dot_config/private_Code/User $ echo -n \"{{ .chezmoi.sourceDir }}/settings.json\" > $( chezmoi source-path ) /private_dot_config/private_Code/User/symlink_settings.json.tmpl The prefix private_ is used because the ~/.config and ~/.config/Code directories are private by default. Apply the changes: $ chezmoi apply -v Now, when the program modifies its configuration file it will modify the file in the source state instead. Populate ~/.ssh/authorized_keys with your public SSH keys from GitHub chezmoi can retrieve your public SSH keys from GitHub, which can be useful for populating your ~/.ssh/authorized_keys . Put the following in your ~/.local/share/chezmoi/dot_ssh/authorized_keys.tmpl : {{ range gitHubKeys \"$GITHUB_USERNAME\" -}} {{ .Key }} {{ end -}}","title":"Manage different types of file"},{"location":"user-guide/manage-different-types-of-file/#manage-different-types-of-file","text":"","title":"Manage different types of file"},{"location":"user-guide/manage-different-types-of-file/#have-chezmoi-create-a-directory-but-ignore-its-contents","text":"If you want chezmoi to create a directory, but ignore its contents, say ~/src , first run: $ mkdir -p $( chezmoi source-path ) /src This creates the directory in the source state, which means that chezmoi will create it (if it does not already exist) when you run chezmoi apply . However, as this is an empty directory it will be ignored by git. So, create a file in the directory in the source state that will be seen by git (so git does not ignore the directory) but ignored by chezmoi (so chezmoi does not include it in the target state): $ touch $( chezmoi source-path ) /src/.keep chezmoi automatically creates .keep files when you add an empty directory with chezmoi add .","title":"Have chezmoi create a directory, but ignore its contents"},{"location":"user-guide/manage-different-types-of-file/#ensure-that-a-target-is-removed","text":"Create a file called .chezmoiremove in the source directory containing a list of patterns of files to remove. chezmoi will remove anything in the target directory that matches the pattern. As this command is potentially dangerous, you should run chezmoi in verbose, dry-run mode beforehand to see what would be removed: $ chezmoi apply --dry-run --verbose .chezmoiremove is interpreted as a template, so you can remove different files on different machines. Negative matches (patterns prefixed with a ! ) or targets listed in .chezmoiignore will never be removed.","title":"Ensure that a target is removed"},{"location":"user-guide/manage-different-types-of-file/#manage-part-but-not-all-of-a-file","text":"chezmoi, by default, manages whole files, but there are two ways to manage just parts of a file. Firstly, a modify_ script receives the current contents of the file on the standard input and chezmoi reads the target contents of the file from the script's standard output. This can be used to change parts of a file, for example using sed . Hint If you need random access to the file to modify it, then you can write standard input to a temporary file, modify the temporary file, and then write the temporary file to the standard output, for example: #!/bin/sh tempfile = \" $( mktemp ) \" trap 'rm -rf \"${tempfile}\"' EXIT cat > \" ${ tempfile } \" # modify ${tempfile} cat \" ${ tempfile } \" Note If the file does not exist then the standard input to the modify_ script will be empty and it is the script's responsibility to write a complete file to the standard output. Secondly, if only a small part of the file changes then consider using a template to re-generate the full contents of the file from the current state. For example, Kubernetes configurations include a current context that can be substituted with: ~/.local/share/chezmoi/dot_kube/config.tmpl current-context: {{ output \"kubectl\" \"config\" \"current-context\" | trim }}","title":"Manage part, but not all, of a file"},{"location":"user-guide/manage-different-types-of-file/#manage-a-files-permissions-but-not-its-contents","text":"chezmoi's create_ attributes allows you to tell chezmoi to create a file if it does not already exist. chezmoi, however, will apply any permission changes from the executable_ , private_ , and readonly_ attributes. This can be used to control a file's permissions without altering its contents. For example, if you want to ensure that ~/.kube/config always has permissions 600 then if you create an empty file called dot_kube/private_dot_config in your source state, chezmoi will ensure ~/.kube/config 's permissions are 0600 when you run chezmoi apply without changing its contents. This approach does have the downside that chezmoi will create the file if it does not already exist. If you only want chezmoi apply to set a file's permissions if it already exists and not create the file otherwise, you can use a run_ script. For example, create a file in your source state called run_set_kube_config_permissions.sh containing: #!/bin/sh FILE = \" $HOME /.kube/config\" if [ -f \" $FILE \" ] ; then if [ \" $( stat -c %a \" $FILE \" ) \" ! = \"600\" ] ; then chmod 600 \" $FILE \" fi fi","title":"Manage a file's permissions, but not its contents"},{"location":"user-guide/manage-different-types-of-file/#handle-configuration-files-which-are-externally-modified","text":"Some programs modify their configuration files. When you next run chezmoi apply , any modifications made by the program will be lost. You can track changes to these files by replacing with a symlink back to a file in your source directory, which is under version control. Here is a worked example for VSCode's settings.json on Linux: Copy the configuration file to your source directory: $ cp ~/.config/Code/User/settings.json $( chezmoi source-path ) Tell chezmoi to ignore this file: $ echo settings.json >> $( chezmoi source-path ) /.chezmoiignore Tell chezmoi that ~/.config/Code/User/settings.json should be a symlink to the file in your source directory: $ mkdir -p $( chezmoi source-path ) /private_dot_config/private_Code/User $ echo -n \"{{ .chezmoi.sourceDir }}/settings.json\" > $( chezmoi source-path ) /private_dot_config/private_Code/User/symlink_settings.json.tmpl The prefix private_ is used because the ~/.config and ~/.config/Code directories are private by default. Apply the changes: $ chezmoi apply -v Now, when the program modifies its configuration file it will modify the file in the source state instead.","title":"Handle configuration files which are externally modified"},{"location":"user-guide/manage-different-types-of-file/#populate-sshauthorized_keys-with-your-public-ssh-keys-from-github","text":"chezmoi can retrieve your public SSH keys from GitHub, which can be useful for populating your ~/.ssh/authorized_keys . Put the following in your ~/.local/share/chezmoi/dot_ssh/authorized_keys.tmpl : {{ range gitHubKeys \"$GITHUB_USERNAME\" -}} {{ .Key }} {{ end -}}","title":"Populate ~/.ssh/authorized_keys with your public SSH keys from GitHub"},{"location":"user-guide/manage-machine-to-machine-differences/","text":"Manage machine-to-machine differences Use templates The primary goal of chezmoi is to manage configuration files across multiple machines, for example your personal macOS laptop, your work Ubuntu desktop, and your work Linux laptop. You will want to keep much configuration the same across these, but also need machine-specific configurations for email addresses, credentials, etc. chezmoi achieves this functionality by using text/template for the source state where needed. For example, your home ~/.gitconfig on your personal machine might look like: ~/.gitconfig [user] email = \"me@home.org\" Whereas at work it might be: ~/.gitconfig [user] email = \"firstname.lastname@company.com\" To handle this, on each machine create a configuration file called ~/.config/chezmoi/chezmoi.toml defining variables that might vary from machine to machine. For example, for your home machine: ~/.config/chezmoi/chezmoi.toml [data] email = \"me@home.org\" Note All variable names will be converted to lowercase. This is due to a feature of a library used by chezmoi. See this GitHub issue for more information. If you intend to store private data (e.g. access tokens) in ~/.config/chezmoi/chezmoi.toml , make sure it has permissions 0600 . If you prefer, you can use any format supported by Viper for your configuration file. This includes JSON, YAML, and TOML. Variable names must start with a letter and be followed by zero or more letters or digits. Then, add ~/.gitconfig to chezmoi using the --autotemplate flag to turn it into a template and automatically detect variables from the data section of your ~/.config/chezmoi/chezmoi.toml file: $ chezmoi add --autotemplate ~/.gitconfig You can then open the template (which will be saved in the file ~/.local/share/chezmoi/dot_gitconfig.tmpl ): $ chezmoi edit ~/.gitconfig The file should look something like: ~/.local/share/chezmoi/dot_gitconfig.tmpl [user] email = {{ . email | quote }} To disable automatic variable detection, use the --template or -T option to chezmoi add instead of --autotemplate . Templates are often used to capture machine-specific differences. For example, in your ~/.local/share/chezmoi/dot_bashrc.tmpl you might have: ~/.local/share/chezmoi/dot_bashrc.tmpl # common config export EDITOR=vi # machine-specific configuration {{- if eq .chezmoi.hostname \"work-laptop\" }} # this will only be included in ~/.bashrc on work-laptop {{- end }} For a full list of variables, run: $ chezmoi data For more advanced usage, you can use the full power of the text/template language. chezmoi includes all of the text functions from sprig and its own functions for interacting with password managers . Templates can be executed directly from the command line, without the need to create a file on disk, with the execute-template command, for example: $ chezmoi execute-template \"{{ .chezmoi.os }}/{{ .chezmoi.arch }}\" This is useful when developing or debugging templates. Some password managers allow you to store complete files. The files can be retrieved with chezmoi's template functions. For example, if you have a file stored in 1Password with the UUID uuid then you can retrieve it with the template: {{- onepasswordDocument \"uuid\" -}} The - s inside the brackets remove any whitespace before or after the template expression, which is useful if your editor has added any newlines. If, after executing the template, the file contents are empty, the target file will be removed. This can be used to ensure that files are only present on certain machines. If you want an empty file to be created anyway, you will need to give it an empty_ prefix. Ignore files or a directory on different machines For coarser-grained control of files and entire directories managed on different machines, or to exclude certain files completely, you can create .chezmoiignore files in the source directory. These specify a list of patterns that chezmoi should ignore, and are interpreted as templates. An example .chezmoiignore file might look like: ~/.local/share/chezmoi/.chezmoiignore README.md {{- if ne .chezmoi.hostname \"work-laptop\" }} .work # only manage .work on work-laptop {{- end }} The use of ne (not equal) is deliberate. What we want to achieve is \"only install .work if hostname is work-laptop \" but chezmoi installs everything by default, so we have to turn the logic around and instead write \"ignore .work unless the hostname is work-laptop \". Patterns can be excluded by prefixing them with a ! , for example: ~/.local/share/chezmoi/.chezmoiignore f* !foo will ignore all files beginning with an f except foo . You can see what files chezmoi ignores with the command $ chezmoi ignored Handle different file locations on different systems with the same contents If you want to have the same file contents in different locations on different systems, but maintain only a single file in your source state, you can use a shared template. Create the common file in the .chezmoitemplates directory in the source state. For example, create .chezmoitemplates/file.conf . The contents of this file are available in templates with the template $NAME . function where $NAME is the name of the file ( . passes the current data to the template code in file.conf ; see https://pkg.go.dev/text/template#hdr-Actions for details). Then create files for each system, for example Library/Application Support/App/file.conf.tmpl for macOS and dot_config/app/file.conf.tmpl for Linux. Both template files should contain {{- template \"file.conf\" . -}} . Finally, tell chezmoi to ignore files where they are not needed by adding lines to your .chezmoiignore file, for example: ~/.local/share/chezmoi/.chezmoiignore {{ if ne .chezmoi.os \"darwin\" }} Library/Application Support/App/file.conf {{ end }} {{ if ne .chezmoi.os \"linux\" }} .config/app/file.conf {{ end }} Use completely different dotfiles on different machines chezmoi's template functionality allows you to change a file's contents based on any variable. For example, if you want ~/.bashrc to be different on Linux and macOS you would create a file in the source state called dot_bashrc.tmpl containing: ~/.local/share/chezmoi/dot_bashrc.tmpl {{ if eq .chezmoi.os \"darwin\" -}} # macOS .bashrc contents {{ else if eq .chezmoi.os \"linux\" -}} # Linux .bashrc contents {{ end -}} However, if the differences between the two versions are so large that you'd prefer to use completely separate files in the source state, you can achieve this using a symbolic link template. Create the following files: ~/.local/share/chezmoi/symlink_dot_bashrc.tmpl .bashrc_{{ .chezmoi.os }} ~/.local/share/chezmoi/dot_bashrc_darwin # macOS .bashrc contents ~/.local/share/chezmoi/dot_bashrc_linux # Linux .bashrc contents ~/.local/share/chezmoi/.chezmoiignore {{ if ne .chezmoi.os \"darwin\" }} .bashrc_darwin {{ end }} {{ if ne .chezmoi.os \"linux\" }} .bashrc_linux {{ end }} This will make ~/.bashrc a symlink to .bashrc_darwin on darwin and to .bashrc_linux on linux . The .chezmoiignore configuration ensures that only the OS-specific .bashrc_os file will be installed on each OS. Without using symlinks The same thing can be achieved using the include function. ~/.local/share/chezmoi/dot_bashrc.tmpl {{ if eq .chezmoi.os \"darwin\" }} {{ include \".bashrc_darwin\" }} {{ end }} {{ if eq .chezmoi.os \"linux\" }} {{ include \".bashrc_linux\" }} {{ end }}","title":"Manage machine-to-machine differences"},{"location":"user-guide/manage-machine-to-machine-differences/#manage-machine-to-machine-differences","text":"","title":"Manage machine-to-machine differences"},{"location":"user-guide/manage-machine-to-machine-differences/#use-templates","text":"The primary goal of chezmoi is to manage configuration files across multiple machines, for example your personal macOS laptop, your work Ubuntu desktop, and your work Linux laptop. You will want to keep much configuration the same across these, but also need machine-specific configurations for email addresses, credentials, etc. chezmoi achieves this functionality by using text/template for the source state where needed. For example, your home ~/.gitconfig on your personal machine might look like: ~/.gitconfig [user] email = \"me@home.org\" Whereas at work it might be: ~/.gitconfig [user] email = \"firstname.lastname@company.com\" To handle this, on each machine create a configuration file called ~/.config/chezmoi/chezmoi.toml defining variables that might vary from machine to machine. For example, for your home machine: ~/.config/chezmoi/chezmoi.toml [data] email = \"me@home.org\" Note All variable names will be converted to lowercase. This is due to a feature of a library used by chezmoi. See this GitHub issue for more information. If you intend to store private data (e.g. access tokens) in ~/.config/chezmoi/chezmoi.toml , make sure it has permissions 0600 . If you prefer, you can use any format supported by Viper for your configuration file. This includes JSON, YAML, and TOML. Variable names must start with a letter and be followed by zero or more letters or digits. Then, add ~/.gitconfig to chezmoi using the --autotemplate flag to turn it into a template and automatically detect variables from the data section of your ~/.config/chezmoi/chezmoi.toml file: $ chezmoi add --autotemplate ~/.gitconfig You can then open the template (which will be saved in the file ~/.local/share/chezmoi/dot_gitconfig.tmpl ): $ chezmoi edit ~/.gitconfig The file should look something like: ~/.local/share/chezmoi/dot_gitconfig.tmpl [user] email = {{ . email | quote }} To disable automatic variable detection, use the --template or -T option to chezmoi add instead of --autotemplate . Templates are often used to capture machine-specific differences. For example, in your ~/.local/share/chezmoi/dot_bashrc.tmpl you might have: ~/.local/share/chezmoi/dot_bashrc.tmpl # common config export EDITOR=vi # machine-specific configuration {{- if eq .chezmoi.hostname \"work-laptop\" }} # this will only be included in ~/.bashrc on work-laptop {{- end }} For a full list of variables, run: $ chezmoi data For more advanced usage, you can use the full power of the text/template language. chezmoi includes all of the text functions from sprig and its own functions for interacting with password managers . Templates can be executed directly from the command line, without the need to create a file on disk, with the execute-template command, for example: $ chezmoi execute-template \"{{ .chezmoi.os }}/{{ .chezmoi.arch }}\" This is useful when developing or debugging templates. Some password managers allow you to store complete files. The files can be retrieved with chezmoi's template functions. For example, if you have a file stored in 1Password with the UUID uuid then you can retrieve it with the template: {{- onepasswordDocument \"uuid\" -}} The - s inside the brackets remove any whitespace before or after the template expression, which is useful if your editor has added any newlines. If, after executing the template, the file contents are empty, the target file will be removed. This can be used to ensure that files are only present on certain machines. If you want an empty file to be created anyway, you will need to give it an empty_ prefix.","title":"Use templates"},{"location":"user-guide/manage-machine-to-machine-differences/#ignore-files-or-a-directory-on-different-machines","text":"For coarser-grained control of files and entire directories managed on different machines, or to exclude certain files completely, you can create .chezmoiignore files in the source directory. These specify a list of patterns that chezmoi should ignore, and are interpreted as templates. An example .chezmoiignore file might look like: ~/.local/share/chezmoi/.chezmoiignore README.md {{- if ne .chezmoi.hostname \"work-laptop\" }} .work # only manage .work on work-laptop {{- end }} The use of ne (not equal) is deliberate. What we want to achieve is \"only install .work if hostname is work-laptop \" but chezmoi installs everything by default, so we have to turn the logic around and instead write \"ignore .work unless the hostname is work-laptop \". Patterns can be excluded by prefixing them with a ! , for example: ~/.local/share/chezmoi/.chezmoiignore f* !foo will ignore all files beginning with an f except foo . You can see what files chezmoi ignores with the command $ chezmoi ignored","title":"Ignore files or a directory on different machines"},{"location":"user-guide/manage-machine-to-machine-differences/#handle-different-file-locations-on-different-systems-with-the-same-contents","text":"If you want to have the same file contents in different locations on different systems, but maintain only a single file in your source state, you can use a shared template. Create the common file in the .chezmoitemplates directory in the source state. For example, create .chezmoitemplates/file.conf . The contents of this file are available in templates with the template $NAME . function where $NAME is the name of the file ( . passes the current data to the template code in file.conf ; see https://pkg.go.dev/text/template#hdr-Actions for details). Then create files for each system, for example Library/Application Support/App/file.conf.tmpl for macOS and dot_config/app/file.conf.tmpl for Linux. Both template files should contain {{- template \"file.conf\" . -}} . Finally, tell chezmoi to ignore files where they are not needed by adding lines to your .chezmoiignore file, for example: ~/.local/share/chezmoi/.chezmoiignore {{ if ne .chezmoi.os \"darwin\" }} Library/Application Support/App/file.conf {{ end }} {{ if ne .chezmoi.os \"linux\" }} .config/app/file.conf {{ end }}","title":"Handle different file locations on different systems with the same contents"},{"location":"user-guide/manage-machine-to-machine-differences/#use-completely-different-dotfiles-on-different-machines","text":"chezmoi's template functionality allows you to change a file's contents based on any variable. For example, if you want ~/.bashrc to be different on Linux and macOS you would create a file in the source state called dot_bashrc.tmpl containing: ~/.local/share/chezmoi/dot_bashrc.tmpl {{ if eq .chezmoi.os \"darwin\" -}} # macOS .bashrc contents {{ else if eq .chezmoi.os \"linux\" -}} # Linux .bashrc contents {{ end -}} However, if the differences between the two versions are so large that you'd prefer to use completely separate files in the source state, you can achieve this using a symbolic link template. Create the following files: ~/.local/share/chezmoi/symlink_dot_bashrc.tmpl .bashrc_{{ .chezmoi.os }} ~/.local/share/chezmoi/dot_bashrc_darwin # macOS .bashrc contents ~/.local/share/chezmoi/dot_bashrc_linux # Linux .bashrc contents ~/.local/share/chezmoi/.chezmoiignore {{ if ne .chezmoi.os \"darwin\" }} .bashrc_darwin {{ end }} {{ if ne .chezmoi.os \"linux\" }} .bashrc_linux {{ end }} This will make ~/.bashrc a symlink to .bashrc_darwin on darwin and to .bashrc_linux on linux . The .chezmoiignore configuration ensures that only the OS-specific .bashrc_os file will be installed on each OS.","title":"Use completely different dotfiles on different machines"},{"location":"user-guide/manage-machine-to-machine-differences/#without-using-symlinks","text":"The same thing can be achieved using the include function. ~/.local/share/chezmoi/dot_bashrc.tmpl {{ if eq .chezmoi.os \"darwin\" }} {{ include \".bashrc_darwin\" }} {{ end }} {{ if eq .chezmoi.os \"linux\" }} {{ include \".bashrc_linux\" }} {{ end }}","title":"Without using symlinks"},{"location":"user-guide/setup/","text":"Setup Understand chezmoi's files and directories chezmoi generates your dotfiles for your local machine. It combines two main sources of data: The source directory , ~/.local/share/chezmoi , is common to all your machines, and is a clone of your dotfiles repo. Each file that chezmoi manages has a corresponding file in the source directory. The config file , typically ~/.config/chezmoi/chezmoi.toml (although you can use JSON or YAML if you prefer), is specific to the local machine. Files whose contents are the same on all of your machines are copied verbatim from the source directory. Files which vary from machine to machine are executed as templates, typically using data from the local machine's config file to tune the final contents specific to the local machine. Use a hosted repo to manage your dotfiles across multiple machines chezmoi relies on your version control system and hosted repo to share changes across multiple machines. You should create a repo on the source code repository of your choice (e.g. Bitbucket , GitHub , or GitLab , many people call their repo dotfiles ) and push the repo in the source directory here. For example: $ chezmoi cd $ git remote add origin https://github.com/username/dotfiles.git $ git push -u origin main $ exit On another machine you can checkout this repo: $ chezmoi init https://github.com/username/dotfiles.git You can then see what would be changed: $ chezmoi diff If you're happy with the changes then apply them: $ chezmoi apply The above commands can be combined into a single init, checkout, and apply: $ chezmoi init --apply --verbose https://github.com/username/dotfiles.git These commands are summarized this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <repo> W-->>H: chezmoi diff W->>H: chezmoi apply R->>H: chezmoi init --apply <repo> Use a private repo to store your dotfiles chezmoi supports storing your dotfiles in both public and private repos. chezmoi is designed so that your dotfiles repo can be public by making it easy for you to store your secrets either in your password manager, in encrypted files, or in private configuration files. Your dotfiles repo can still be private, if you choose. If you use a private repo for your dotfiles then you will typically need to enter your credentials (e.g. your username and password) each time you interact with the repo, for example when pulling or pushing changes. chezmoi itself does not store any credentials, but instead relies on your local git configuration for these operations. When using a private repo on GitHub without --ssh , when prompted for a password you will need to enter a GitHub personal access token . For more information on these changes, read the GitHub blog post on Token authentication requirements for Git operations Create a config file on a new machine automatically chezmoi init can also create a config file automatically, if one does not already exist. If your repo contains a file called .chezmoi.$FORMAT.tmpl where $FORMAT is one of the supported config file formats (e.g. json , toml , or yaml ) then chezmoi init will execute that template to generate your initial config file. Specifically, if you have .chezmoi.toml.tmpl that looks like this: ~/.local/share/chezmoi/.chezmoi.toml.tmpl {{- $email := promptString \"email\" -}} [data] email = {{ $email | quote }} Then chezmoi init will create an initial chezmoi.toml using this template. promptString is a special function that prompts the user (you) for a value. To test this template, use chezmoi execute-template with the --init and --promptString flags, for example: $ chezmoi execute-template --init --promptString email = me@home.org < ~/.local/share/chezmoi/.chezmoi.toml.tmpl Re-create your config file If you change your config file template, chezmoi will warn you if your current config file was not generated from that template. You can re-generate your config file by running: $ chezmoi init If you are using any prompt* template functions in your config file template you will be prompted again. However, you can avoid this with the following example template logic: {{- $email := \"\" -}} {{- if hasKey . \"email\" -}} {{- $email = .email -}} {{- else -}} {{- $email = promptString \"email\" -}} {{- end -}} [data] email = {{ $email | quote }} This will cause chezmoi to first try to re-use the existing $email variable and fallback to promptString only if it is not set.","title":"Setup"},{"location":"user-guide/setup/#setup","text":"","title":"Setup"},{"location":"user-guide/setup/#understand-chezmois-files-and-directories","text":"chezmoi generates your dotfiles for your local machine. It combines two main sources of data: The source directory , ~/.local/share/chezmoi , is common to all your machines, and is a clone of your dotfiles repo. Each file that chezmoi manages has a corresponding file in the source directory. The config file , typically ~/.config/chezmoi/chezmoi.toml (although you can use JSON or YAML if you prefer), is specific to the local machine. Files whose contents are the same on all of your machines are copied verbatim from the source directory. Files which vary from machine to machine are executed as templates, typically using data from the local machine's config file to tune the final contents specific to the local machine.","title":"Understand chezmoi's files and directories"},{"location":"user-guide/setup/#use-a-hosted-repo-to-manage-your-dotfiles-across-multiple-machines","text":"chezmoi relies on your version control system and hosted repo to share changes across multiple machines. You should create a repo on the source code repository of your choice (e.g. Bitbucket , GitHub , or GitLab , many people call their repo dotfiles ) and push the repo in the source directory here. For example: $ chezmoi cd $ git remote add origin https://github.com/username/dotfiles.git $ git push -u origin main $ exit On another machine you can checkout this repo: $ chezmoi init https://github.com/username/dotfiles.git You can then see what would be changed: $ chezmoi diff If you're happy with the changes then apply them: $ chezmoi apply The above commands can be combined into a single init, checkout, and apply: $ chezmoi init --apply --verbose https://github.com/username/dotfiles.git These commands are summarized this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <repo> W-->>H: chezmoi diff W->>H: chezmoi apply R->>H: chezmoi init --apply <repo>","title":"Use a hosted repo to manage your dotfiles across multiple machines"},{"location":"user-guide/setup/#use-a-private-repo-to-store-your-dotfiles","text":"chezmoi supports storing your dotfiles in both public and private repos. chezmoi is designed so that your dotfiles repo can be public by making it easy for you to store your secrets either in your password manager, in encrypted files, or in private configuration files. Your dotfiles repo can still be private, if you choose. If you use a private repo for your dotfiles then you will typically need to enter your credentials (e.g. your username and password) each time you interact with the repo, for example when pulling or pushing changes. chezmoi itself does not store any credentials, but instead relies on your local git configuration for these operations. When using a private repo on GitHub without --ssh , when prompted for a password you will need to enter a GitHub personal access token . For more information on these changes, read the GitHub blog post on Token authentication requirements for Git operations","title":"Use a private repo to store your dotfiles"},{"location":"user-guide/setup/#create-a-config-file-on-a-new-machine-automatically","text":"chezmoi init can also create a config file automatically, if one does not already exist. If your repo contains a file called .chezmoi.$FORMAT.tmpl where $FORMAT is one of the supported config file formats (e.g. json , toml , or yaml ) then chezmoi init will execute that template to generate your initial config file. Specifically, if you have .chezmoi.toml.tmpl that looks like this: ~/.local/share/chezmoi/.chezmoi.toml.tmpl {{- $email := promptString \"email\" -}} [data] email = {{ $email | quote }} Then chezmoi init will create an initial chezmoi.toml using this template. promptString is a special function that prompts the user (you) for a value. To test this template, use chezmoi execute-template with the --init and --promptString flags, for example: $ chezmoi execute-template --init --promptString email = me@home.org < ~/.local/share/chezmoi/.chezmoi.toml.tmpl","title":"Create a config file on a new machine automatically"},{"location":"user-guide/setup/#re-create-your-config-file","text":"If you change your config file template, chezmoi will warn you if your current config file was not generated from that template. You can re-generate your config file by running: $ chezmoi init If you are using any prompt* template functions in your config file template you will be prompted again. However, you can avoid this with the following example template logic: {{- $email := \"\" -}} {{- if hasKey . \"email\" -}} {{- $email = .email -}} {{- else -}} {{- $email = promptString \"email\" -}} {{- end -}} [data] email = {{ $email | quote }} This will cause chezmoi to first try to re-use the existing $email variable and fallback to promptString only if it is not set.","title":"Re-create your config file"},{"location":"user-guide/templating/","text":"Templating Introduction Templates are used to change the contents of a file depending on the environment. For example, you can use the hostname of the machine to create different configurations on different machines. chezmoi uses the text/template syntax from Go extended with text template functions from sprig . When reading files from the source state, chezmoi interprets them as a template if either of the following is true: The file name has a .tmpl suffix. The file is in the .chezmoitemplates directory, or a subdirectory of .chezmoitemplates . Template data chezmoi provides a variety of template variables. For a full list, run $ chezmoi data These come from a variety of sources (later data overwrite earlier ones): Variables populated by chezmoi are in .chezmoi , for example .chezmoi.os . Variables created by you in the .chezmoidata.$FORMAT configuration file. The various supported formats (json, toml and yaml) are read in alphabetical order. Variables created by you in the data section of the configuration file. Furthermore, chezmoi provides a variety of functions to retrieve data at runtime from password managers, environment variables, and the filesystem. Creating a template file There are several ways to create a template: When adding a file for the first time, pass the --template argument, for example: $ chezmoi add --template ~/.zshrc When adding a file for the first time, you can pass the --autotemplate argument, which tells chezmoi to make the file as a template and automatically replace variables that chezmoi knows about, for example: $ chezmoi add --autotemplate ~/.zshrc If a file is already managed by chezmoi, but is not a template, you can make it a template by running, for example: $ chezmoi chattr +template ~/.zshrc You can create a template manually in the source directory by giving it a .tmpl extension, for example: $ chezmoi cd $ $EDITOR dot_zshrc.tmpl Templates in .chezmoitemplates must be created manually, for example: $ chezmoi cd $ mkdir -p .chezmoitemplates $ cd .chezmoitemplates $ $EDITOR mytemplate Editing a template file The easiest way to edit a template is to use chezmoi edit , for example: $ chezmoi edit ~/.zshrc This will open the source file for ~/.zshrc in $EDITOR . When you quit the editor, chezmoi will check the template syntax. If you want the changes you make to be immediately applied after you quit the editor, use the --apply option, for example: $ chezmoi edit --apply ~/.zshrc Testing templates Templates can be tested with the chezmoi execute-template command which treats each of its arguments as a template and executes it. This can be useful for testing small fragments of templates, for example: $ chezmoi execute-template '{{ .chezmoi.hostname }}' If there are no arguments, chezmoi execute-template will read the template from the standard input. This can be useful for testing whole files, for example: $ chezmoi cd $ chezmoi execute-template < dot_zshrc.tmpl Template syntax Template actions are written inside double curly brackets, {{ and }} . Actions can be variables, pipelines, or control statements. Text outside actions is copied literally. Variables are written literally, for example: {{ .chezmoi.hostname }} Conditional expressions can be written using if , else if , else , and end , for example: {{ if eq .chezmoi.os \"darwin\" }} # darwin {{ else if eq .chezmoi.os \"linux\" }} # linux {{ else }} # other operating system {{ end }} For a full description of the template syntax, see the text/template documentation . Removing whitespace For formatting reasons you might want to leave some whitespace after or before the template code. This whitespace will remain in the final file, which you might not want. A solution for this is to place a minus sign and a space next to the brackets. So {{- for the left brackets and -}} for the right brackets. Here's an example: HOSTNAME={{- .chezmoi.hostname }} This will result in HOSTNAME=myhostname Notice that this will remove any number of tabs, spaces and even newlines and carriage returns. Debugging templates If there is a mistake in one of your templates and you want to debug it, chezmoi can help you. You can use this subcommand to test and play with the examples in these docs as well. There is a very handy subcommand called execute-template . chezmoi will interpret any data coming from stdin or at the end of the command. It will then interpret all templates and output the result to stdout. For example with the command: $ chezmoi execute-template '{{ .chezmoi.os }}/{{ .chezmoi.arch }}' chezmoi will output the current OS and architecture to stdout. You can also feed the contents of a file to this command by typing: $ cat foo.txt | chezmoi execute-template Simple logic A very useful feature of chezmoi templates is the ability to perform logical operations. # common config export EDITOR=vi # machine-specific configuration {{- if eq .chezmoi.hostname \"work-laptop\" }} # this will only be included in ~/.bashrc on work-laptop {{- end }} In this example chezmoi will look at the hostname of the machine and if that is equal to \"work-laptop\", the text between the if and the end will be included in the result. Boolean functions Function Return value eq Returns true if the first argument is equal to any of the other arguments not Returns the boolean negation of its single argument and Returns the boolean AND of its arguments by returning the first empty argument or the last argument, that is, and x y behaves as if x then y else x . All the arguments are evaluated or Returns the boolean OR of its arguments by returning the first non-empty argument or the last argument, that is, or x y behaves as if x then x else y All the arguments are evaluated Integer functions Function Return value len Returns the integer length of its argument eq Returns the boolean truth of arg1 == arg2 ne Returns the boolean truth of arg1 != arg2 lt Returns the boolean truth of arg1 < arg2 le Returns the boolean truth of arg1 <= arg2 gt Returns the boolean truth of arg1 > arg2 ge Returns the boolean truth of arg1 >= arg2 More complicated logic Up until now, we have only seen if statements that can handle at most two variables. In this part we will see how to create more complicated expressions. You can also create more complicated expressions. The eq command can accept multiple arguments. It will check if the first argument is equal to any of the other arguments. {{ if eq \"foo\" \"foo\" \"bar\" }}hello{{end}} {{ if eq \"foo\" \"bar\" \"foo\" }}hello{{end}} {{ if eq \"foo\" \"bar\" \"bar\" }}hello{{end}} The first two examples will output hello and the last example will output nothing. The operators or and and can also accept multiple arguments. Chaining operators You can perform multiple checks in one if statement. {{ if (and (eq .chezmoi.os \"linux\") (ne .email \"me@home.org\")) }} ... {{ end }} This will check if the operating system is Linux and the configured email is not the home email. The brackets are needed here, because otherwise all the arguments will be give to the and command. This way you can chain as many operators together as you like. Helper functions chezmoi has added multiple helper functions to the text/template syntax. chezmoi includes sprig , an extension to the text/template format that contains many helper functions. Take a look at their documentation for a list. chezmoi adds a few functions of its own as well. Take a look at the reference for complete list. Template variables chezmoi defines a few useful templates variables that depend on the system you are currently on. A list of the variables defined by chezmoi can be found here . There are, however more variables than that. To view the variables available on your system, execute: $ chezmoi data This outputs the variables in JSON format by default. To access the variable chezmoi.kernel.osrelease in a template, use {{ .chezmoi.kernel.osrelease }} This way you can also access the variables you defined yourself. Using .chezmoitemplates Files in the .chezmoitemplates subdirectory are parsed as templates and are available to be included in other templates using the template action with a name equal to their relative path to the .chezmoitemplates directory. By default, such templates will be executed with nil data. If you want to access template variables (e.g. .chezmoi.os ) in the template you must pass the data explicitly. For example: .chezmoitemplates/part.tmpl: {{ if eq .chezmoi.os \"linux\" }} # linux config {{ else }} # non-linux config {{ end }} dot_file.tmpl: {{ template \"part.tmpl\" . }} Using .chezmoitemplates for creating similar files When you have multiple similar files, but they aren't quite the same, you can create a template file in the directory .chezmoitemplates . This template can be inserted in other template files, for example: Create .local/share/chezmoi/.chezmoitemplates/alacritty : some: config fontsize: {{ . }} more: config Notice the file name doesn't have to end in .tmpl , as all files in the directory .chezmoitemplates are interpreted as templates. Create other files using the template ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" 12 -}} ~/.local/share/chezmoi/big-font.yml.tmpl {{- template \"alacritty\" 18 -}} Here we're calling the shared alacritty template with the font size as the . value passed in. You can test this with chezmoi cat : $ chezmoi cat ~/small-font.yml some: config fontsize: 12 more: config $ chezmoi cat ~/big-font.yml some: config fontsize: 18 more: config Passing multiple arguments In the example above only one arguments is passed to the template. To pass more arguments to the template, you can do it in two ways. Via the config file This method is useful if you want to use the same template arguments multiple times, because you don't specify the arguments every time. Instead you specify them in the file ~/.config/chezmoi/chezmoi.toml : ~/.config/chezmoi/chezmoi.toml [data.alacritty.big] fontsize = 18 font = \"DejaVu Serif\" [data.alacritty.small] fontsize = 12 font = \"DejaVu Sans Mono\" Use the variables in ~/.local/share/chezmoi/.chezmoitemplates/alacritty : ~/.local/share/chezmoi/.chezmoitemplates/alacritty some: config fontsize: {{ .fontsize }} font: {{ .font }} more: config And connect them with ~/.local/share/chezmoi/small-font.yml.tmpl : ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" .alacritty.small -}} At the moment, this means that you'll have to duplicate the alacritty data in the config file on every machine, but a feature will be added to avoid this. By passing a dictionary Using the same alacritty configuration as above, you can pass the arguments to it with a dictionary, for example ~/.local/share/chezmoi/small-font.yml.tmpl : ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" dict \"fontsize\" 12 \"font\" \"DejaVu Sans Mono\" -}}","title":"Templating"},{"location":"user-guide/templating/#templating","text":"","title":"Templating"},{"location":"user-guide/templating/#introduction","text":"Templates are used to change the contents of a file depending on the environment. For example, you can use the hostname of the machine to create different configurations on different machines. chezmoi uses the text/template syntax from Go extended with text template functions from sprig . When reading files from the source state, chezmoi interprets them as a template if either of the following is true: The file name has a .tmpl suffix. The file is in the .chezmoitemplates directory, or a subdirectory of .chezmoitemplates .","title":"Introduction"},{"location":"user-guide/templating/#template-data","text":"chezmoi provides a variety of template variables. For a full list, run $ chezmoi data These come from a variety of sources (later data overwrite earlier ones): Variables populated by chezmoi are in .chezmoi , for example .chezmoi.os . Variables created by you in the .chezmoidata.$FORMAT configuration file. The various supported formats (json, toml and yaml) are read in alphabetical order. Variables created by you in the data section of the configuration file. Furthermore, chezmoi provides a variety of functions to retrieve data at runtime from password managers, environment variables, and the filesystem.","title":"Template data"},{"location":"user-guide/templating/#creating-a-template-file","text":"There are several ways to create a template: When adding a file for the first time, pass the --template argument, for example: $ chezmoi add --template ~/.zshrc When adding a file for the first time, you can pass the --autotemplate argument, which tells chezmoi to make the file as a template and automatically replace variables that chezmoi knows about, for example: $ chezmoi add --autotemplate ~/.zshrc If a file is already managed by chezmoi, but is not a template, you can make it a template by running, for example: $ chezmoi chattr +template ~/.zshrc You can create a template manually in the source directory by giving it a .tmpl extension, for example: $ chezmoi cd $ $EDITOR dot_zshrc.tmpl Templates in .chezmoitemplates must be created manually, for example: $ chezmoi cd $ mkdir -p .chezmoitemplates $ cd .chezmoitemplates $ $EDITOR mytemplate","title":"Creating a template file"},{"location":"user-guide/templating/#editing-a-template-file","text":"The easiest way to edit a template is to use chezmoi edit , for example: $ chezmoi edit ~/.zshrc This will open the source file for ~/.zshrc in $EDITOR . When you quit the editor, chezmoi will check the template syntax. If you want the changes you make to be immediately applied after you quit the editor, use the --apply option, for example: $ chezmoi edit --apply ~/.zshrc","title":"Editing a template file"},{"location":"user-guide/templating/#testing-templates","text":"Templates can be tested with the chezmoi execute-template command which treats each of its arguments as a template and executes it. This can be useful for testing small fragments of templates, for example: $ chezmoi execute-template '{{ .chezmoi.hostname }}' If there are no arguments, chezmoi execute-template will read the template from the standard input. This can be useful for testing whole files, for example: $ chezmoi cd $ chezmoi execute-template < dot_zshrc.tmpl","title":"Testing templates"},{"location":"user-guide/templating/#template-syntax","text":"Template actions are written inside double curly brackets, {{ and }} . Actions can be variables, pipelines, or control statements. Text outside actions is copied literally. Variables are written literally, for example: {{ .chezmoi.hostname }} Conditional expressions can be written using if , else if , else , and end , for example: {{ if eq .chezmoi.os \"darwin\" }} # darwin {{ else if eq .chezmoi.os \"linux\" }} # linux {{ else }} # other operating system {{ end }} For a full description of the template syntax, see the text/template documentation .","title":"Template syntax"},{"location":"user-guide/templating/#removing-whitespace","text":"For formatting reasons you might want to leave some whitespace after or before the template code. This whitespace will remain in the final file, which you might not want. A solution for this is to place a minus sign and a space next to the brackets. So {{- for the left brackets and -}} for the right brackets. Here's an example: HOSTNAME={{- .chezmoi.hostname }} This will result in HOSTNAME=myhostname Notice that this will remove any number of tabs, spaces and even newlines and carriage returns.","title":"Removing whitespace"},{"location":"user-guide/templating/#debugging-templates","text":"If there is a mistake in one of your templates and you want to debug it, chezmoi can help you. You can use this subcommand to test and play with the examples in these docs as well. There is a very handy subcommand called execute-template . chezmoi will interpret any data coming from stdin or at the end of the command. It will then interpret all templates and output the result to stdout. For example with the command: $ chezmoi execute-template '{{ .chezmoi.os }}/{{ .chezmoi.arch }}' chezmoi will output the current OS and architecture to stdout. You can also feed the contents of a file to this command by typing: $ cat foo.txt | chezmoi execute-template","title":"Debugging templates"},{"location":"user-guide/templating/#simple-logic","text":"A very useful feature of chezmoi templates is the ability to perform logical operations. # common config export EDITOR=vi # machine-specific configuration {{- if eq .chezmoi.hostname \"work-laptop\" }} # this will only be included in ~/.bashrc on work-laptop {{- end }} In this example chezmoi will look at the hostname of the machine and if that is equal to \"work-laptop\", the text between the if and the end will be included in the result.","title":"Simple logic"},{"location":"user-guide/templating/#boolean-functions","text":"Function Return value eq Returns true if the first argument is equal to any of the other arguments not Returns the boolean negation of its single argument and Returns the boolean AND of its arguments by returning the first empty argument or the last argument, that is, and x y behaves as if x then y else x . All the arguments are evaluated or Returns the boolean OR of its arguments by returning the first non-empty argument or the last argument, that is, or x y behaves as if x then x else y All the arguments are evaluated","title":"Boolean functions"},{"location":"user-guide/templating/#integer-functions","text":"Function Return value len Returns the integer length of its argument eq Returns the boolean truth of arg1 == arg2 ne Returns the boolean truth of arg1 != arg2 lt Returns the boolean truth of arg1 < arg2 le Returns the boolean truth of arg1 <= arg2 gt Returns the boolean truth of arg1 > arg2 ge Returns the boolean truth of arg1 >= arg2","title":"Integer functions"},{"location":"user-guide/templating/#more-complicated-logic","text":"Up until now, we have only seen if statements that can handle at most two variables. In this part we will see how to create more complicated expressions. You can also create more complicated expressions. The eq command can accept multiple arguments. It will check if the first argument is equal to any of the other arguments. {{ if eq \"foo\" \"foo\" \"bar\" }}hello{{end}} {{ if eq \"foo\" \"bar\" \"foo\" }}hello{{end}} {{ if eq \"foo\" \"bar\" \"bar\" }}hello{{end}} The first two examples will output hello and the last example will output nothing. The operators or and and can also accept multiple arguments.","title":"More complicated logic"},{"location":"user-guide/templating/#chaining-operators","text":"You can perform multiple checks in one if statement. {{ if (and (eq .chezmoi.os \"linux\") (ne .email \"me@home.org\")) }} ... {{ end }} This will check if the operating system is Linux and the configured email is not the home email. The brackets are needed here, because otherwise all the arguments will be give to the and command. This way you can chain as many operators together as you like.","title":"Chaining operators"},{"location":"user-guide/templating/#helper-functions","text":"chezmoi has added multiple helper functions to the text/template syntax. chezmoi includes sprig , an extension to the text/template format that contains many helper functions. Take a look at their documentation for a list. chezmoi adds a few functions of its own as well. Take a look at the reference for complete list.","title":"Helper functions"},{"location":"user-guide/templating/#template-variables","text":"chezmoi defines a few useful templates variables that depend on the system you are currently on. A list of the variables defined by chezmoi can be found here . There are, however more variables than that. To view the variables available on your system, execute: $ chezmoi data This outputs the variables in JSON format by default. To access the variable chezmoi.kernel.osrelease in a template, use {{ .chezmoi.kernel.osrelease }} This way you can also access the variables you defined yourself.","title":"Template variables"},{"location":"user-guide/templating/#using-chezmoitemplates","text":"Files in the .chezmoitemplates subdirectory are parsed as templates and are available to be included in other templates using the template action with a name equal to their relative path to the .chezmoitemplates directory. By default, such templates will be executed with nil data. If you want to access template variables (e.g. .chezmoi.os ) in the template you must pass the data explicitly. For example: .chezmoitemplates/part.tmpl: {{ if eq .chezmoi.os \"linux\" }} # linux config {{ else }} # non-linux config {{ end }} dot_file.tmpl: {{ template \"part.tmpl\" . }}","title":"Using .chezmoitemplates"},{"location":"user-guide/templating/#using-chezmoitemplates-for-creating-similar-files","text":"When you have multiple similar files, but they aren't quite the same, you can create a template file in the directory .chezmoitemplates . This template can be inserted in other template files, for example: Create .local/share/chezmoi/.chezmoitemplates/alacritty : some: config fontsize: {{ . }} more: config Notice the file name doesn't have to end in .tmpl , as all files in the directory .chezmoitemplates are interpreted as templates. Create other files using the template ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" 12 -}} ~/.local/share/chezmoi/big-font.yml.tmpl {{- template \"alacritty\" 18 -}} Here we're calling the shared alacritty template with the font size as the . value passed in. You can test this with chezmoi cat : $ chezmoi cat ~/small-font.yml some: config fontsize: 12 more: config $ chezmoi cat ~/big-font.yml some: config fontsize: 18 more: config","title":"Using .chezmoitemplates for creating similar files"},{"location":"user-guide/templating/#passing-multiple-arguments","text":"In the example above only one arguments is passed to the template. To pass more arguments to the template, you can do it in two ways.","title":"Passing multiple arguments"},{"location":"user-guide/templating/#via-the-config-file","text":"This method is useful if you want to use the same template arguments multiple times, because you don't specify the arguments every time. Instead you specify them in the file ~/.config/chezmoi/chezmoi.toml : ~/.config/chezmoi/chezmoi.toml [data.alacritty.big] fontsize = 18 font = \"DejaVu Serif\" [data.alacritty.small] fontsize = 12 font = \"DejaVu Sans Mono\" Use the variables in ~/.local/share/chezmoi/.chezmoitemplates/alacritty : ~/.local/share/chezmoi/.chezmoitemplates/alacritty some: config fontsize: {{ .fontsize }} font: {{ .font }} more: config And connect them with ~/.local/share/chezmoi/small-font.yml.tmpl : ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" .alacritty.small -}} At the moment, this means that you'll have to duplicate the alacritty data in the config file on every machine, but a feature will be added to avoid this.","title":"Via the config file"},{"location":"user-guide/templating/#by-passing-a-dictionary","text":"Using the same alacritty configuration as above, you can pass the arguments to it with a dictionary, for example ~/.local/share/chezmoi/small-font.yml.tmpl : ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" dict \"fontsize\" 12 \"font\" \"DejaVu Sans Mono\" -}}","title":"By passing a dictionary"},{"location":"user-guide/use-scripts-to-perform-actions/","text":"Use scripts to perform actions Understand how scripts work chezmoi supports scripts, which are executed when you run chezmoi apply . The scripts can either run every time you run chezmoi apply , or only when their contents have changed. In verbose mode, the script's contents will be printed before executing it. In dry-run mode, the script is not executed. Scripts are any file in the source directory with the prefix run_ , and are executed in alphabetical order. Scripts that should only be run if they have not been run before have the prefix run_once_ . Scripts that should be run whenever their contents change have the run_onchange_ prefix. Scripts break chezmoi's declarative approach, and as such should be used sparingly. Any script should be idempotent, even run_once_ and run_onchange_ scripts. Scripts must be created manually in the source directory, typically by running chezmoi cd and then creating a file with a run_ prefix. There is no need to set the executable bit on the script, as chezmoi will set the executable bit before executing the script. Scripts with the suffix .tmpl are treated as templates, with the usual template variables available. If, after executing the template, the result is only whitespace or an empty string, then the script is not executed. This is useful for disabling scripts. When chezmoi executes a script, it first generates the script contents in a file in a temporary directory with the executable bit set, and then executes the contents with exec(3) . Consequently, the script's contents must either include a #! line or be an executable binary. Note By default, chezmoi diff will print the contents of scripts that would be run by chezmoi apply . To exclude scripts from the output of chezmoi diff , set diff.exclude in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml [diff] exclude = [ \"scripts\" ] Similarly, chezmoi status will print the names of the scripts that it will execute with the status R . This can similarly disabled by setting status.exclude to [\"scripts\"] in your configuration file. Install packages with scripts Change to the source directory and create a file called run_once_install-packages.sh : $ chezmoi cd $ $EDITOR run_once_install-packages.sh In this file create your package installation script, e.g. #!/bin/sh sudo apt install ripgrep The next time you run chezmoi apply or chezmoi update this script will be run. As it has the run_once_ prefix, it will not be run again unless its contents change, for example if you add more packages to be installed. This script can also be a template. For example, if you create run_once_install-packages.sh.tmpl with the contents: ~/.local/share/chezmoi/run_once_install-packages.sh.tmpl {{ if eq .chezmoi.os \"linux\" -}} #!/bin/sh sudo apt install ripgrep {{ else if eq .chezmoi.os \"darwin\" -}} #!/bin/sh brew install ripgrep {{ end -}} This will install ripgrep on both Debian/Ubuntu Linux systems and macOS. Run a script when the contents of another file changes chezmoi's run_ scripts are run every time you run chezmoi apply , whereas run_once_ scripts are run only when their contents have changed, after executing them as templates. You can use this to cause a run_once_ script to run when the contents of another file has changed by including a checksum of the other file's contents in the script. For example, if your dconf settings are stored in dconf.ini in your source directory then you can make chezmoi apply only load them when the contents of dconf.ini has changed by adding the following script as run_once_dconf-load.sh.tmpl : ~/.local/share/chezmoi/run_once_dconf-load.sh.tmpl #!/bin/bash # dconf.ini hash: {{ include \"dconf.ini\" | sha256sum }} dconf load / < {{ joinPath .chezmoi.sourceDir \"dconf.ini\" | quote }} As the SHA256 sum of dconf.ini is included in a comment in the script, the contents of the script will change whenever the contents of dconf.ini are changed, so chezmoi will re-run the script whenever the contents of dconf.ini change. In this example you should also add dconf.ini to .chezmoiignore so chezmoi does not create dconf.ini in your home directory. Clear the state of run_once_ scripts chezmoi stores whether and when run_once_ scripts have been run in the scriptState bucket of its persistent state. To clear the state of run_once_ scripts, run: $ chezmoi state delete-bucket --bucket = scriptState","title":"Use scripts to perform actions"},{"location":"user-guide/use-scripts-to-perform-actions/#use-scripts-to-perform-actions","text":"","title":"Use scripts to perform actions"},{"location":"user-guide/use-scripts-to-perform-actions/#understand-how-scripts-work","text":"chezmoi supports scripts, which are executed when you run chezmoi apply . The scripts can either run every time you run chezmoi apply , or only when their contents have changed. In verbose mode, the script's contents will be printed before executing it. In dry-run mode, the script is not executed. Scripts are any file in the source directory with the prefix run_ , and are executed in alphabetical order. Scripts that should only be run if they have not been run before have the prefix run_once_ . Scripts that should be run whenever their contents change have the run_onchange_ prefix. Scripts break chezmoi's declarative approach, and as such should be used sparingly. Any script should be idempotent, even run_once_ and run_onchange_ scripts. Scripts must be created manually in the source directory, typically by running chezmoi cd and then creating a file with a run_ prefix. There is no need to set the executable bit on the script, as chezmoi will set the executable bit before executing the script. Scripts with the suffix .tmpl are treated as templates, with the usual template variables available. If, after executing the template, the result is only whitespace or an empty string, then the script is not executed. This is useful for disabling scripts. When chezmoi executes a script, it first generates the script contents in a file in a temporary directory with the executable bit set, and then executes the contents with exec(3) . Consequently, the script's contents must either include a #! line or be an executable binary. Note By default, chezmoi diff will print the contents of scripts that would be run by chezmoi apply . To exclude scripts from the output of chezmoi diff , set diff.exclude in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml [diff] exclude = [ \"scripts\" ] Similarly, chezmoi status will print the names of the scripts that it will execute with the status R . This can similarly disabled by setting status.exclude to [\"scripts\"] in your configuration file.","title":"Understand how scripts work"},{"location":"user-guide/use-scripts-to-perform-actions/#install-packages-with-scripts","text":"Change to the source directory and create a file called run_once_install-packages.sh : $ chezmoi cd $ $EDITOR run_once_install-packages.sh In this file create your package installation script, e.g. #!/bin/sh sudo apt install ripgrep The next time you run chezmoi apply or chezmoi update this script will be run. As it has the run_once_ prefix, it will not be run again unless its contents change, for example if you add more packages to be installed. This script can also be a template. For example, if you create run_once_install-packages.sh.tmpl with the contents: ~/.local/share/chezmoi/run_once_install-packages.sh.tmpl {{ if eq .chezmoi.os \"linux\" -}} #!/bin/sh sudo apt install ripgrep {{ else if eq .chezmoi.os \"darwin\" -}} #!/bin/sh brew install ripgrep {{ end -}} This will install ripgrep on both Debian/Ubuntu Linux systems and macOS.","title":"Install packages with scripts"},{"location":"user-guide/use-scripts-to-perform-actions/#run-a-script-when-the-contents-of-another-file-changes","text":"chezmoi's run_ scripts are run every time you run chezmoi apply , whereas run_once_ scripts are run only when their contents have changed, after executing them as templates. You can use this to cause a run_once_ script to run when the contents of another file has changed by including a checksum of the other file's contents in the script. For example, if your dconf settings are stored in dconf.ini in your source directory then you can make chezmoi apply only load them when the contents of dconf.ini has changed by adding the following script as run_once_dconf-load.sh.tmpl : ~/.local/share/chezmoi/run_once_dconf-load.sh.tmpl #!/bin/bash # dconf.ini hash: {{ include \"dconf.ini\" | sha256sum }} dconf load / < {{ joinPath .chezmoi.sourceDir \"dconf.ini\" | quote }} As the SHA256 sum of dconf.ini is included in a comment in the script, the contents of the script will change whenever the contents of dconf.ini are changed, so chezmoi will re-run the script whenever the contents of dconf.ini change. In this example you should also add dconf.ini to .chezmoiignore so chezmoi does not create dconf.ini in your home directory.","title":"Run a script when the contents of another file changes"},{"location":"user-guide/use-scripts-to-perform-actions/#clear-the-state-of-run_once_-scripts","text":"chezmoi stores whether and when run_once_ scripts have been run in the scriptState bucket of its persistent state. To clear the state of run_once_ scripts, run: $ chezmoi state delete-bucket --bucket = scriptState","title":"Clear the state of run_once_ scripts"},{"location":"user-guide/advanced/customize-your-source-directory/","text":"Customize your source directory Use a subdirectory of your dotfiles repo as the root of the source state By default, chezmoi uses the root of your dotfiles repo as the root of the source state. If your source state contains many entries in its root, then your target directory (usually your home directory) will in turn be filled with many entries in its root as well. You can reduce the number of entries by keeping .chezmoiignore up to date, but this can become tiresome. Instead, you can specify that chezmoi should read the source state from a subdirectory of the source directory instead by creating a file called .chezmoiroot containing the relative path to this subdirectory. For example, given: ~/.local/share/chezmoi/.chezmoiroot home Then chezmoi will read the source state from the home subdirectory of your source directory, for example the desired state of ~/.gitconfig will be read from ~/.local/share/chezmoi/home/dot_gitconfig (instead of ~/.local/share/chezmoi/dot_gitconfig ). When migrating an existing chezmoi dotfiles repo to use .chezmoiroot you will need to move the relevant files in to the new root subdirectory manually. You do not need to move files that are ignored by chezmoi in all cases (i.e. are listed in .chezmoiignore when executed as a template on all machines), and you can afterwards remove their entries from home/.chezmoiignore .","title":"Customize your source directory"},{"location":"user-guide/advanced/customize-your-source-directory/#customize-your-source-directory","text":"","title":"Customize your source directory"},{"location":"user-guide/advanced/customize-your-source-directory/#use-a-subdirectory-of-your-dotfiles-repo-as-the-root-of-the-source-state","text":"By default, chezmoi uses the root of your dotfiles repo as the root of the source state. If your source state contains many entries in its root, then your target directory (usually your home directory) will in turn be filled with many entries in its root as well. You can reduce the number of entries by keeping .chezmoiignore up to date, but this can become tiresome. Instead, you can specify that chezmoi should read the source state from a subdirectory of the source directory instead by creating a file called .chezmoiroot containing the relative path to this subdirectory. For example, given: ~/.local/share/chezmoi/.chezmoiroot home Then chezmoi will read the source state from the home subdirectory of your source directory, for example the desired state of ~/.gitconfig will be read from ~/.local/share/chezmoi/home/dot_gitconfig (instead of ~/.local/share/chezmoi/dot_gitconfig ). When migrating an existing chezmoi dotfiles repo to use .chezmoiroot you will need to move the relevant files in to the new root subdirectory manually. You do not need to move files that are ignored by chezmoi in all cases (i.e. are listed in .chezmoiignore when executed as a template on all machines), and you can afterwards remove their entries from home/.chezmoiignore .","title":"Use a subdirectory of your dotfiles repo as the root of the source state"},{"location":"user-guide/advanced/migrate-away-from-chezmoi/","text":"Migrate away from chezmoi chezmoi provides several mechanisms to help you move to an alternative dotfile manager (or even no dotfile manager at all) in the future: chezmoi creates your dotfiles just as if you were not using a dotfile manager at all. Your dotfiles are regular files, directories, and symlinks. You can run chezmoi purge to delete all traces of chezmoi and then, if you're migrating to a new dotfile manager, then you can use whatever mechanism it provides to add your dotfiles to your new system. chezmoi has a chezmoi archive command that generates a tarball of your dotfiles. You can replace the contents of your dotfiles repo with the contents of the archive and you've effectively immediately migrated away from chezmoi. chezmoi has a chezmoi dump command that dumps the interpreted (target) state in a machine-readable form, so you can write scripts around chezmoi.","title":"Migrate away from chezmoi"},{"location":"user-guide/advanced/migrate-away-from-chezmoi/#migrate-away-from-chezmoi","text":"chezmoi provides several mechanisms to help you move to an alternative dotfile manager (or even no dotfile manager at all) in the future: chezmoi creates your dotfiles just as if you were not using a dotfile manager at all. Your dotfiles are regular files, directories, and symlinks. You can run chezmoi purge to delete all traces of chezmoi and then, if you're migrating to a new dotfile manager, then you can use whatever mechanism it provides to add your dotfiles to your new system. chezmoi has a chezmoi archive command that generates a tarball of your dotfiles. You can replace the contents of your dotfiles repo with the contents of the archive and you've effectively immediately migrated away from chezmoi. chezmoi has a chezmoi dump command that dumps the interpreted (target) state in a machine-readable form, so you can write scripts around chezmoi.","title":"Migrate away from chezmoi"},{"location":"user-guide/encryption/","text":"Encryption chezmoi supports encrypting whole files with age and gpg . Encrypted files are stored in ASCII-armored format in the source directory with the encrypted_ attribute and are automatically decrypted when needed. Add files to be encrypted with the --encrypt flag, for example: $ chezmoi add --encrypt ~/.ssh/id_rsa chezmoi edit will transparently decrypt the file before editing and re-encrypt it afterwards.","title":"Encryption"},{"location":"user-guide/encryption/#encryption","text":"chezmoi supports encrypting whole files with age and gpg . Encrypted files are stored in ASCII-armored format in the source directory with the encrypted_ attribute and are automatically decrypted when needed. Add files to be encrypted with the --encrypt flag, for example: $ chezmoi add --encrypt ~/.ssh/id_rsa chezmoi edit will transparently decrypt the file before editing and re-encrypt it afterwards.","title":"Encryption"},{"location":"user-guide/encryption/age/","text":"age chezmoi supports encrypting files with age . Generate a key using age-keygen : $ age-keygen -o $HOME /key.txt Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p Specify age encryption in your configuration file, being sure to specify at least the identity and one recipient: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] identity = \"/home/user/key.txt\" recipient = \"age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\" chezmoi supports multiple recipients and recipient files, and multiple identities. Symmetric encryption To use age's symmetric encryption, specify a single identity and enable symmetric encryption in your config file, for example: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] identity = \"~/.ssh/id_rsa\" symmetric = true Symmetric encryption with a passphrase To use age's symmetric encryption with a passphrase, set age.passphrase to true in your config file, for example: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] passphrase = true You will be prompted for the passphrase whenever you run chezmoi add --encrypt and whenever chezmoi needs to decrypt the file, for example when you run chezmoi apply , chezmoi diff , or chezmoi status . Builtin age encryption chezmoi has builtin support for age encryption which is automatically used if the age command is not found in $PATH . Info The builtin age encryption not support passphrases, symmetric encryption, or SSH keys. Passphrases are not supported because chezmoi needs to decrypt files regularly, e.g. when running a chezmoi diff or a chezmoi status command, not just when running chezmoi apply . Prompting for a passphrase each time would quickly become tiresome. Symmetric encryption may be supported in the future. Please open an issue if you want this. SSH keys are not supported as the author of age explicitly recommends not using them : When integrating age into a new system, it's recommended that you only support X25519 keys, and not SSH keys. The latter are supported for manual encryption operations.","title":"age"},{"location":"user-guide/encryption/age/#age","text":"chezmoi supports encrypting files with age . Generate a key using age-keygen : $ age-keygen -o $HOME /key.txt Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p Specify age encryption in your configuration file, being sure to specify at least the identity and one recipient: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] identity = \"/home/user/key.txt\" recipient = \"age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\" chezmoi supports multiple recipients and recipient files, and multiple identities.","title":"age"},{"location":"user-guide/encryption/age/#symmetric-encryption","text":"To use age's symmetric encryption, specify a single identity and enable symmetric encryption in your config file, for example: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] identity = \"~/.ssh/id_rsa\" symmetric = true","title":"Symmetric encryption"},{"location":"user-guide/encryption/age/#symmetric-encryption-with-a-passphrase","text":"To use age's symmetric encryption with a passphrase, set age.passphrase to true in your config file, for example: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] passphrase = true You will be prompted for the passphrase whenever you run chezmoi add --encrypt and whenever chezmoi needs to decrypt the file, for example when you run chezmoi apply , chezmoi diff , or chezmoi status .","title":"Symmetric encryption with a passphrase"},{"location":"user-guide/encryption/age/#builtin-age-encryption","text":"chezmoi has builtin support for age encryption which is automatically used if the age command is not found in $PATH . Info The builtin age encryption not support passphrases, symmetric encryption, or SSH keys. Passphrases are not supported because chezmoi needs to decrypt files regularly, e.g. when running a chezmoi diff or a chezmoi status command, not just when running chezmoi apply . Prompting for a passphrase each time would quickly become tiresome. Symmetric encryption may be supported in the future. Please open an issue if you want this. SSH keys are not supported as the author of age explicitly recommends not using them : When integrating age into a new system, it's recommended that you only support X25519 keys, and not SSH keys. The latter are supported for manual encryption operations.","title":"Builtin age encryption"},{"location":"user-guide/encryption/gpg/","text":"gpg chezmoi supports encrypting files with gpg . Encrypted files are stored in the source state and automatically be decrypted when generating the target state or printing a file's contents with chezmoi cat . Asymmetric (private/public-key) encryption Specify the encryption key to use in your configuration file ( chezmoi.toml ) with the gpg.recipient key: ~/.config/chezmoi/chezmoi.toml encryption = \"gpg\" [gpg] recipient = \"...\" chezmoi will encrypt files: gpg --armor --recipient $RECIPIENT --encrypt and store the encrypted file in the source state. The file will automatically be decrypted when generating the target state. Hint The gpg.recipient key must be ultimately trusted, otherwise encryption will fail because gpg will prompt for input, which chezmoi does not handle. You can check the trust level by running: $ gpg --export-ownertrust The trust level for the recipient's key should be 6 . If it is not, you can change the trust level by running: $ gpg --edit-key $RECIPIENT Enter trust at the prompt and chose 5 = I trust ultimately . Symmetric encryption Specify symmetric encryption in your configuration file: ~/.config/chezmoi/chezmoi.toml encryption = \"gpg\" [gpg] symmetric = true chezmoi will encrypt files: gpg --armor --symmetric Encrypting files with a passphrase If you want to encrypt your files with a passphrase, but don't mind the passphrase being stored in plaintext on your machines, then you can use the following configuration: ~/.local/share/chezmoi/.chezmoi.toml.tmpl {{ $passphrase := \"\" -}} {{ if hasKey . \"passphrase\" -}} {{ $passphrase = .passphrase -}} {{ else -}} {{ $passphrase = promptString \"passphrase\" -}} {{ end -}} encryption = \"gpg\" [data] passphrase = {{ $passphrase | quote }} [gpg] symmetric = true args = [\"--batch\", \"--passphrase\", {{ $passphrase | quote }}, \"--no-symkey-cache\"] This will prompt you for the passphrase the first time you run chezmoi init on a new machine, and then remember the passphrase in your configuration file.","title":"gpg"},{"location":"user-guide/encryption/gpg/#gpg","text":"chezmoi supports encrypting files with gpg . Encrypted files are stored in the source state and automatically be decrypted when generating the target state or printing a file's contents with chezmoi cat .","title":"gpg"},{"location":"user-guide/encryption/gpg/#asymmetric-privatepublic-key-encryption","text":"Specify the encryption key to use in your configuration file ( chezmoi.toml ) with the gpg.recipient key: ~/.config/chezmoi/chezmoi.toml encryption = \"gpg\" [gpg] recipient = \"...\" chezmoi will encrypt files: gpg --armor --recipient $RECIPIENT --encrypt and store the encrypted file in the source state. The file will automatically be decrypted when generating the target state. Hint The gpg.recipient key must be ultimately trusted, otherwise encryption will fail because gpg will prompt for input, which chezmoi does not handle. You can check the trust level by running: $ gpg --export-ownertrust The trust level for the recipient's key should be 6 . If it is not, you can change the trust level by running: $ gpg --edit-key $RECIPIENT Enter trust at the prompt and chose 5 = I trust ultimately .","title":"Asymmetric (private/public-key) encryption"},{"location":"user-guide/encryption/gpg/#symmetric-encryption","text":"Specify symmetric encryption in your configuration file: ~/.config/chezmoi/chezmoi.toml encryption = \"gpg\" [gpg] symmetric = true chezmoi will encrypt files: gpg --armor --symmetric","title":"Symmetric encryption"},{"location":"user-guide/encryption/gpg/#encrypting-files-with-a-passphrase","text":"If you want to encrypt your files with a passphrase, but don't mind the passphrase being stored in plaintext on your machines, then you can use the following configuration: ~/.local/share/chezmoi/.chezmoi.toml.tmpl {{ $passphrase := \"\" -}} {{ if hasKey . \"passphrase\" -}} {{ $passphrase = .passphrase -}} {{ else -}} {{ $passphrase = promptString \"passphrase\" -}} {{ end -}} encryption = \"gpg\" [data] passphrase = {{ $passphrase | quote }} [gpg] symmetric = true args = [\"--batch\", \"--passphrase\", {{ $passphrase | quote }}, \"--no-symkey-cache\"] This will prompt you for the passphrase the first time you run chezmoi init on a new machine, and then remember the passphrase in your configuration file.","title":"Encrypting files with a passphrase"},{"location":"user-guide/frequently-asked-questions/design/","text":"Design Do I have to use chezmoi edit to edit my dotfiles? No. chezmoi edit is a convenience command that has a couple of useful features, but you don't have to use it. You can also run chezmoi cd and then just edit the files in the source state directly. After saving an edited file you can run chezmoi diff to check what effect the changes would have, and run chezmoi apply if you're happy with them. If there are inconsistencies that you want to keep, then chezmoi merge-all will help you resolve any differences. chezmoi edit provides the following useful features: The arguments to chezmoi edit are the files in their target location, so you don't have to think about source state attributes and your editor's syntax highlighting will work. If the dotfile is encrypted in the source state, then chezmoi edit will decrypt it to a private directory, open that file in your $EDITOR , and then re-encrypt the file when you quit your editor. This makes encryption transparent. With the --diff and --apply options you can see what would change and apply those changes without having to run chezmoi diff or chezmoi apply . If you have configured git auto commits or git auto pushes then chezmoi edit will create commits and push them for you. If you chose to edit files in the source state and you're using VIM then github.com/alker0/chezmoi.vim gives you syntax highlighting, however you edit your files. Why doesn't chezmoi use symlinks like GNU Stow? Symlinks are first class citizens in chezmoi: chezmoi supports creating them, updating them, removing them, and even more advanced features not found in other dotfile managers like having the same symlink point to different targets on different machines by using a template. With chezmoi, you only use a symlink where you really need a symlink, in contrast to some other dotfile managers (e.g. GNU Stow) which require the use of symlinks as a layer of indirection between a dotfile's location (which can be anywhere in your home directory) and a dotfile's content (which needs to be in a centralized directory that you manage with version control). chezmoi solves this problem in a different way. Instead of using a symlink to redirect from the dotfile's location to the centralized directory, chezmoi generates the dotfile as a regular file in its final location from the contents of the centralized directory. This approach allows chezmoi to provide features that are not possible when using symlinks, for example having files that are encrypted, executable, private, or templates. There is nothing special about dotfiles managed by chezmoi whereas dotfiles managed with GNU Stow are special because they're actually symlinks to somewhere else. The only advantage to using GNU Stow-style symlinks is that changes that you make to the dotfile's contents in the centralized directory are immediately visible, whereas chezmoi currently requires you to run chezmoi apply or chezmoi edit --apply . chezmoi will likely get an alternative solution to this too, see #752 . If you really want to use symlinks, then chezmoi provides a symlink mode which uses symlinks where possible. This configures chezmoi to work like GNU Stow and have it create a set of symlinks back to a central directory, but this currently requires a bit of manual work (as described in #167 ). chezmoi might get some automation to help (see #886 for example) but it does need some convincing use cases that demonstrate that a symlink from a dotfile's location to its contents in a central directory is better than just having the correct dotfile contents. What are the limitations of chezmoi's symlink mode? In symlink mode chezmoi replaces targets with symlinks to the source directory if the the target is a regular file and is not encrypted, executable, private, or a template. Symlinks cannot be used for encrypted files because the source state contains the ciphertext, not the plaintext. Symlinks cannot be used for executable files as the executable bit would need to be set on the file in the source directory and chezmoi uses only regular files and directories in its source state for portability across operating systems. This may change in the future. Symlinks cannot be used for private files because git does not persist group and world permission bits. Symlinks cannot be used for templated files because the source state contains the template, not the result of executing the template. Symlinks cannot be used for entire directories because of chezmoi's use of attributes in the filename mangles entries in the directory, directories might have the exact_ attribute and contain empty files, and the directory's entries might not be usable with symlinks. In symlink mode, running chezmoi add does not immediately replace the targets with a symlink. You must run chezmoi apply to create the symlinks. Why does chezmoi use weird filenames? There are a number of criticisms of how chezmoi uses filenames: The long source file names are weird and verbose. Not all possible file permissions can be represented. Everything is in a single directory, which can end up containing many entries. chezmoi's decision to store metadata in filenames is a deliberate, practical, compromise. Firstly, almost all programs store metadata in filenames: the filename's extension. chezmoi extends the filename to storing metadata in attributes in the filename's prefix as well. The dot_ attribute makes it transparent which dotfiles are managed by chezmoi and which files are ignored by chezmoi. chezmoi ignores all files and directories that start with . so no special whitelists are needed for version control systems and their control files (e.g. .git and .gitignore ). chezmoi needs per-file metadata to know how to interpret the source file's contents, for example to know when the source file is a template or if the file's contents are encrypted. By storing this metadata in the filename, the metadata is unambiguously associated with a single file and adding, updating, or removing a single file touches only a single file in the source state. Changes to the metadata (e.g. chezmoi chattr +template $TARGET ) are simple file renames and isolated to the affected file. If chezmoi were to, say, use a common configuration file listing which files were templates and/or encrypted, then changes to any file would require updates to the common configuration file. Automating updates to configuration files requires a round trip (read config file, update config, write config) and it is not always possible preserve comments and formatting. chezmoi's attributes of executable_ , private_ , and readonly_ allow the file permissions 0o644 , 0o755 , 0o600 , 0o700 , 0o444 , 0o555 , 0o400 , and 0o500 to be represented. Directories can only have permissions 0o755 , 0o700 , or 0o500 . In practice, these cover all permissions typically used for dotfiles. If this does cause a genuine problem for you, please open an issue on GitHub . File permissions and modes like executable_ , private_ , readonly_ , and symlink_ could also be stored in the filesystem, rather than in the filename. However, this requires the permissions to be preserved and handled by the underlying version control system and filesystem. chezmoi provides first-class support for Windows, where the executable_ and private_ attributes have no direct equivalents and symbolic links are not always permitted. By using regular files and directories, chezmoi avoids variations in the operating system, version control system, and filesystem making it both more robust and more portable. chezmoi uses a 1:1 mapping between entries in the source state and entries in the target state. This mapping is bi-directional and unambiguous. However, this also means that dotfiles that in the same directory in the target state must be in the same directory in the source state. In particular, every entry managed by chezmoi in the root of your home directory has a corresponding entry in the root of your source directory, which can mean that you end up with a lot of entries in the root of your source directory. This can be mitigated by using .chezmoiroot file. If chezmoi were to permit, say, multiple separate source directories (so you could, say, put dot_bashrc in a bash/ subdirectory, and dot_vimrc in a vim/ subdirectory, but have chezmoi apply map these to ~/.bashrc and ~/.vimrc in the root of your home directory) then the mapping between source and target states is no longer bidirectional nor unambiguous, which significantly increases complexity and requires more user interaction. For example, if both bash/dot_bashrc and vim/dot_bashrc exist, what should be the contents of ~/.bashrc ? If you run chezmoi add ~/.zshrc , should dot_zshrc be stored in the source bash/ directory, the source vim/ directory, or somewhere else? How does the user communicate their preferences? chezmoi has many users and any changes to the source state representation must be backwards-compatible. In summary, chezmoi's source state representation is a compromise with both advantages and disadvantages. Changes to the representation will be considered, but must meet the following criteria, in order of importance: Be fully backwards-compatible for existing users. Fix a genuine problem encountered in practice. Be independent of the underlying operating system, version control system, and filesystem. Not add significant extra complexity to the user interface or underlying implementation. Why does chezmoi convert all my template variables to lowercase? This is due to a feature in github.com/spf13/viper , the library that chezmoi uses to read its configuration file. For more information see this GitHub issue . Why does chezmoi cd spawn a shell instead of just changing directory? chezmoi cd spawns a shell because it is not possible for a program to change the working directory of its parent process. You can add a shell function instead: chezmoi-cd () { cd $( chezmoi source-path ) } Typing chezmoi-cd will then change the directory of your current shell to chezmoi's source directory. Why not use Ansible/Chef/Puppet/Salt, or similar to manage my dotfiles instead? Whole system management tools are more than capable of managing your dotfiles, but they are large systems that entail several disadvantages. Compared to whole system management tools, chezmoi offers: Small, focused feature set designed for dotfiles. There's simply less to learn with chezmoi compared to whole system management tools. Easy installation and execution on every platform, without root access. Installing chezmoi requires only copying a single binary file with no external dependencies. Executing chezmoi just involves running the binary. In contrast, installing and running a whole system management tool typically requires installing a scripting language runtime, several packages, and running a system service, all typically requiring root access. chezmoi's focus and simple installation means that it runs almost everywhere: from tiny ARM-based Linux systems to Windows desktops, from inside lightweight containers to FreeBSD-based virtual machines in the cloud. Can I use chezmoi to manage files outside my home directory? In practice, yes, you can, but this usage is strongly discouraged beyond using your system's package manager to install the packages you need. chezmoi is designed to operate on your home directory, and is explicitly not a full system configuration management tool. That said, there are some ways to have chezmoi manage a few files outside your home directory. chezmoi's scripts can execute arbitrary commands, so you can use a run_ script that is run every time you run chezmoi apply , to, for example: Make the target file outside your home directory a symlink to a file managed by chezmoi in your home directory. Copy a file managed by chezmoi inside your home directory to the target file. Execute a template with chezmoi execute-template --output=$FILENAME template where $FILENAME is outside the target directory. chezmoi executes all scripts as the user executing chezmoi, so you may need to add extra privilege elevation commands like sudo or PowerShell start -verb runas -wait to your script. chezmoi, by default, operates on your home directory but this can be overridden with the --destination command line flag or by specifying destDir in your config file, and could even be the root directory ( / or C:\\ ). This allows you, in theory, to use chezmoi to manage any file in your filesystem, but this usage is extremely strongly discouraged. If your needs extend beyond modifying a handful of files outside your target system, then existing configuration management tools like Puppet , Chef , Ansible , and Salt are much better suited - and of course can be called from a chezmoi run_ script. Put your Puppet Manifests, Chef Recipes, Ansible Modules, and Salt Modules in a directory ignored by .chezmoiignore so they do not pollute your home directory. What inspired chezmoi? chezmoi was inspired by Puppet , but was created because Puppet is an overkill for managing your personal configuration files. The focus of chezmoi will always be personal home directory management. If your needs grow beyond that, switch to a whole system configuration management tool. Where does the name \"chezmoi\" come from? \"chezmoi\" splits to \"chez moi\" and pronounced /\u0283e\u026a mwa/ (shay-moi) meaning \"at my house\" in French. It's seven letters long, which is an appropriate length for a command that is only run occasionally. If you prefer a shorter command, add an alias to your shell configuration, for example: alias cz = chezmoi","title":"Design"},{"location":"user-guide/frequently-asked-questions/design/#design","text":"","title":"Design"},{"location":"user-guide/frequently-asked-questions/design/#do-i-have-to-use-chezmoi-edit-to-edit-my-dotfiles","text":"No. chezmoi edit is a convenience command that has a couple of useful features, but you don't have to use it. You can also run chezmoi cd and then just edit the files in the source state directly. After saving an edited file you can run chezmoi diff to check what effect the changes would have, and run chezmoi apply if you're happy with them. If there are inconsistencies that you want to keep, then chezmoi merge-all will help you resolve any differences. chezmoi edit provides the following useful features: The arguments to chezmoi edit are the files in their target location, so you don't have to think about source state attributes and your editor's syntax highlighting will work. If the dotfile is encrypted in the source state, then chezmoi edit will decrypt it to a private directory, open that file in your $EDITOR , and then re-encrypt the file when you quit your editor. This makes encryption transparent. With the --diff and --apply options you can see what would change and apply those changes without having to run chezmoi diff or chezmoi apply . If you have configured git auto commits or git auto pushes then chezmoi edit will create commits and push them for you. If you chose to edit files in the source state and you're using VIM then github.com/alker0/chezmoi.vim gives you syntax highlighting, however you edit your files.","title":"Do I have to use chezmoi edit to edit my dotfiles?"},{"location":"user-guide/frequently-asked-questions/design/#why-doesnt-chezmoi-use-symlinks-like-gnu-stow","text":"Symlinks are first class citizens in chezmoi: chezmoi supports creating them, updating them, removing them, and even more advanced features not found in other dotfile managers like having the same symlink point to different targets on different machines by using a template. With chezmoi, you only use a symlink where you really need a symlink, in contrast to some other dotfile managers (e.g. GNU Stow) which require the use of symlinks as a layer of indirection between a dotfile's location (which can be anywhere in your home directory) and a dotfile's content (which needs to be in a centralized directory that you manage with version control). chezmoi solves this problem in a different way. Instead of using a symlink to redirect from the dotfile's location to the centralized directory, chezmoi generates the dotfile as a regular file in its final location from the contents of the centralized directory. This approach allows chezmoi to provide features that are not possible when using symlinks, for example having files that are encrypted, executable, private, or templates. There is nothing special about dotfiles managed by chezmoi whereas dotfiles managed with GNU Stow are special because they're actually symlinks to somewhere else. The only advantage to using GNU Stow-style symlinks is that changes that you make to the dotfile's contents in the centralized directory are immediately visible, whereas chezmoi currently requires you to run chezmoi apply or chezmoi edit --apply . chezmoi will likely get an alternative solution to this too, see #752 . If you really want to use symlinks, then chezmoi provides a symlink mode which uses symlinks where possible. This configures chezmoi to work like GNU Stow and have it create a set of symlinks back to a central directory, but this currently requires a bit of manual work (as described in #167 ). chezmoi might get some automation to help (see #886 for example) but it does need some convincing use cases that demonstrate that a symlink from a dotfile's location to its contents in a central directory is better than just having the correct dotfile contents.","title":"Why doesn't chezmoi use symlinks like GNU Stow?"},{"location":"user-guide/frequently-asked-questions/design/#what-are-the-limitations-of-chezmois-symlink-mode","text":"In symlink mode chezmoi replaces targets with symlinks to the source directory if the the target is a regular file and is not encrypted, executable, private, or a template. Symlinks cannot be used for encrypted files because the source state contains the ciphertext, not the plaintext. Symlinks cannot be used for executable files as the executable bit would need to be set on the file in the source directory and chezmoi uses only regular files and directories in its source state for portability across operating systems. This may change in the future. Symlinks cannot be used for private files because git does not persist group and world permission bits. Symlinks cannot be used for templated files because the source state contains the template, not the result of executing the template. Symlinks cannot be used for entire directories because of chezmoi's use of attributes in the filename mangles entries in the directory, directories might have the exact_ attribute and contain empty files, and the directory's entries might not be usable with symlinks. In symlink mode, running chezmoi add does not immediately replace the targets with a symlink. You must run chezmoi apply to create the symlinks.","title":"What are the limitations of chezmoi's symlink mode?"},{"location":"user-guide/frequently-asked-questions/design/#why-does-chezmoi-use-weird-filenames","text":"There are a number of criticisms of how chezmoi uses filenames: The long source file names are weird and verbose. Not all possible file permissions can be represented. Everything is in a single directory, which can end up containing many entries. chezmoi's decision to store metadata in filenames is a deliberate, practical, compromise. Firstly, almost all programs store metadata in filenames: the filename's extension. chezmoi extends the filename to storing metadata in attributes in the filename's prefix as well. The dot_ attribute makes it transparent which dotfiles are managed by chezmoi and which files are ignored by chezmoi. chezmoi ignores all files and directories that start with . so no special whitelists are needed for version control systems and their control files (e.g. .git and .gitignore ). chezmoi needs per-file metadata to know how to interpret the source file's contents, for example to know when the source file is a template or if the file's contents are encrypted. By storing this metadata in the filename, the metadata is unambiguously associated with a single file and adding, updating, or removing a single file touches only a single file in the source state. Changes to the metadata (e.g. chezmoi chattr +template $TARGET ) are simple file renames and isolated to the affected file. If chezmoi were to, say, use a common configuration file listing which files were templates and/or encrypted, then changes to any file would require updates to the common configuration file. Automating updates to configuration files requires a round trip (read config file, update config, write config) and it is not always possible preserve comments and formatting. chezmoi's attributes of executable_ , private_ , and readonly_ allow the file permissions 0o644 , 0o755 , 0o600 , 0o700 , 0o444 , 0o555 , 0o400 , and 0o500 to be represented. Directories can only have permissions 0o755 , 0o700 , or 0o500 . In practice, these cover all permissions typically used for dotfiles. If this does cause a genuine problem for you, please open an issue on GitHub . File permissions and modes like executable_ , private_ , readonly_ , and symlink_ could also be stored in the filesystem, rather than in the filename. However, this requires the permissions to be preserved and handled by the underlying version control system and filesystem. chezmoi provides first-class support for Windows, where the executable_ and private_ attributes have no direct equivalents and symbolic links are not always permitted. By using regular files and directories, chezmoi avoids variations in the operating system, version control system, and filesystem making it both more robust and more portable. chezmoi uses a 1:1 mapping between entries in the source state and entries in the target state. This mapping is bi-directional and unambiguous. However, this also means that dotfiles that in the same directory in the target state must be in the same directory in the source state. In particular, every entry managed by chezmoi in the root of your home directory has a corresponding entry in the root of your source directory, which can mean that you end up with a lot of entries in the root of your source directory. This can be mitigated by using .chezmoiroot file. If chezmoi were to permit, say, multiple separate source directories (so you could, say, put dot_bashrc in a bash/ subdirectory, and dot_vimrc in a vim/ subdirectory, but have chezmoi apply map these to ~/.bashrc and ~/.vimrc in the root of your home directory) then the mapping between source and target states is no longer bidirectional nor unambiguous, which significantly increases complexity and requires more user interaction. For example, if both bash/dot_bashrc and vim/dot_bashrc exist, what should be the contents of ~/.bashrc ? If you run chezmoi add ~/.zshrc , should dot_zshrc be stored in the source bash/ directory, the source vim/ directory, or somewhere else? How does the user communicate their preferences? chezmoi has many users and any changes to the source state representation must be backwards-compatible. In summary, chezmoi's source state representation is a compromise with both advantages and disadvantages. Changes to the representation will be considered, but must meet the following criteria, in order of importance: Be fully backwards-compatible for existing users. Fix a genuine problem encountered in practice. Be independent of the underlying operating system, version control system, and filesystem. Not add significant extra complexity to the user interface or underlying implementation.","title":"Why does chezmoi use weird filenames?"},{"location":"user-guide/frequently-asked-questions/design/#why-does-chezmoi-convert-all-my-template-variables-to-lowercase","text":"This is due to a feature in github.com/spf13/viper , the library that chezmoi uses to read its configuration file. For more information see this GitHub issue .","title":"Why does chezmoi convert all my template variables to lowercase?"},{"location":"user-guide/frequently-asked-questions/design/#why-does-chezmoi-cd-spawn-a-shell-instead-of-just-changing-directory","text":"chezmoi cd spawns a shell because it is not possible for a program to change the working directory of its parent process. You can add a shell function instead: chezmoi-cd () { cd $( chezmoi source-path ) } Typing chezmoi-cd will then change the directory of your current shell to chezmoi's source directory.","title":"Why does chezmoi cd spawn a shell instead of just changing directory?"},{"location":"user-guide/frequently-asked-questions/design/#why-not-use-ansiblechefpuppetsalt-or-similar-to-manage-my-dotfiles-instead","text":"Whole system management tools are more than capable of managing your dotfiles, but they are large systems that entail several disadvantages. Compared to whole system management tools, chezmoi offers: Small, focused feature set designed for dotfiles. There's simply less to learn with chezmoi compared to whole system management tools. Easy installation and execution on every platform, without root access. Installing chezmoi requires only copying a single binary file with no external dependencies. Executing chezmoi just involves running the binary. In contrast, installing and running a whole system management tool typically requires installing a scripting language runtime, several packages, and running a system service, all typically requiring root access. chezmoi's focus and simple installation means that it runs almost everywhere: from tiny ARM-based Linux systems to Windows desktops, from inside lightweight containers to FreeBSD-based virtual machines in the cloud.","title":"Why not use Ansible/Chef/Puppet/Salt, or similar to manage my dotfiles instead?"},{"location":"user-guide/frequently-asked-questions/design/#can-i-use-chezmoi-to-manage-files-outside-my-home-directory","text":"In practice, yes, you can, but this usage is strongly discouraged beyond using your system's package manager to install the packages you need. chezmoi is designed to operate on your home directory, and is explicitly not a full system configuration management tool. That said, there are some ways to have chezmoi manage a few files outside your home directory. chezmoi's scripts can execute arbitrary commands, so you can use a run_ script that is run every time you run chezmoi apply , to, for example: Make the target file outside your home directory a symlink to a file managed by chezmoi in your home directory. Copy a file managed by chezmoi inside your home directory to the target file. Execute a template with chezmoi execute-template --output=$FILENAME template where $FILENAME is outside the target directory. chezmoi executes all scripts as the user executing chezmoi, so you may need to add extra privilege elevation commands like sudo or PowerShell start -verb runas -wait to your script. chezmoi, by default, operates on your home directory but this can be overridden with the --destination command line flag or by specifying destDir in your config file, and could even be the root directory ( / or C:\\ ). This allows you, in theory, to use chezmoi to manage any file in your filesystem, but this usage is extremely strongly discouraged. If your needs extend beyond modifying a handful of files outside your target system, then existing configuration management tools like Puppet , Chef , Ansible , and Salt are much better suited - and of course can be called from a chezmoi run_ script. Put your Puppet Manifests, Chef Recipes, Ansible Modules, and Salt Modules in a directory ignored by .chezmoiignore so they do not pollute your home directory.","title":"Can I use chezmoi to manage files outside my home directory?"},{"location":"user-guide/frequently-asked-questions/design/#what-inspired-chezmoi","text":"chezmoi was inspired by Puppet , but was created because Puppet is an overkill for managing your personal configuration files. The focus of chezmoi will always be personal home directory management. If your needs grow beyond that, switch to a whole system configuration management tool.","title":"What inspired chezmoi?"},{"location":"user-guide/frequently-asked-questions/design/#where-does-the-name-chezmoi-come-from","text":"\"chezmoi\" splits to \"chez moi\" and pronounced /\u0283e\u026a mwa/ (shay-moi) meaning \"at my house\" in French. It's seven letters long, which is an appropriate length for a command that is only run occasionally. If you prefer a shorter command, add an alias to your shell configuration, for example: alias cz = chezmoi","title":"Where does the name \"chezmoi\" come from?"},{"location":"user-guide/frequently-asked-questions/encryption/","text":"Encryption How do I configure chezmoi to encrypt files but only request a passphrase the first time chezmoi init is run? The following steps use age for encryption. This can be achieved with the following process: Generate an age private key. Encrypt the private key with a passphrase. Configure chezmoi to decrypt the private key if needed. Configure chezmoi to use the private key. Add encrypted files. First, change to chezmoi's source directory: $ chezmoi cd Generate an age private key encrypted with a passphrase with the command: $ age-keygen | age --passphrase > key.txt.age Public key: age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl Enter passphrase (leave empty to autogenerate a secure one): Confirm passphrase: Use a strong passphrase and make a note of the public key ( age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl in this case). Add key.txt.age to .chezmoiignore so that chezmoi does not try to create it: $ echo key.txt.age >> .chezmoiignore Configure chezmoi to decrypt the passphrase-encrypted private key if needed: $ cat > run_once_before_decrypt-private-key.sh.tmpl <<EOF # !/bin/sh if [ ! -f \"${HOME}/key.txt\" ]; then age --decrypt --output \"${HOME}/key.txt\" \"{{ .chezmoi.sourceDir }}/key.txt.age\" chmod 600 \"${HOME}/key.txt\" fi EOF Configure chezmoi to use the public and private key for encryption: $ cat >> .chezmoi.toml.tmpl <<EOF encryption = \"age\" [age] identity = \"~/key.txt\" recipient = \"age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl\" EOF age.recipient must be your public key from above. When you run chezmoi init --apply to generate the chezmoi's config file, you will be prompted for your passphrase to decrypt the private key: $ chezmoi init --apply Enter passphrase: At this stage everything is configured and git status should report: $ git status On branch main Untracked files: (use \"git add <file>...\" to include in what will be committed) .chezmoi.toml.tmpl .chezmoiignore key.txt.age run_once_before_decrypt-private-key.sh.tmpl nothing added to commit but untracked files present (use \"git add\" to track) If you're happy with the changes you can commit them. Add files that you want to encrypt using the --encrypt argument to chezmoi add , for example: $ chezmoi add --encrypt ~/.ssh/id_rsa","title":"Encryption"},{"location":"user-guide/frequently-asked-questions/encryption/#encryption","text":"","title":"Encryption"},{"location":"user-guide/frequently-asked-questions/encryption/#how-do-i-configure-chezmoi-to-encrypt-files-but-only-request-a-passphrase-the-first-time-chezmoi-init-is-run","text":"The following steps use age for encryption. This can be achieved with the following process: Generate an age private key. Encrypt the private key with a passphrase. Configure chezmoi to decrypt the private key if needed. Configure chezmoi to use the private key. Add encrypted files. First, change to chezmoi's source directory: $ chezmoi cd Generate an age private key encrypted with a passphrase with the command: $ age-keygen | age --passphrase > key.txt.age Public key: age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl Enter passphrase (leave empty to autogenerate a secure one): Confirm passphrase: Use a strong passphrase and make a note of the public key ( age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl in this case). Add key.txt.age to .chezmoiignore so that chezmoi does not try to create it: $ echo key.txt.age >> .chezmoiignore Configure chezmoi to decrypt the passphrase-encrypted private key if needed: $ cat > run_once_before_decrypt-private-key.sh.tmpl <<EOF # !/bin/sh if [ ! -f \"${HOME}/key.txt\" ]; then age --decrypt --output \"${HOME}/key.txt\" \"{{ .chezmoi.sourceDir }}/key.txt.age\" chmod 600 \"${HOME}/key.txt\" fi EOF Configure chezmoi to use the public and private key for encryption: $ cat >> .chezmoi.toml.tmpl <<EOF encryption = \"age\" [age] identity = \"~/key.txt\" recipient = \"age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl\" EOF age.recipient must be your public key from above. When you run chezmoi init --apply to generate the chezmoi's config file, you will be prompted for your passphrase to decrypt the private key: $ chezmoi init --apply Enter passphrase: At this stage everything is configured and git status should report: $ git status On branch main Untracked files: (use \"git add <file>...\" to include in what will be committed) .chezmoi.toml.tmpl .chezmoiignore key.txt.age run_once_before_decrypt-private-key.sh.tmpl nothing added to commit but untracked files present (use \"git add\" to track) If you're happy with the changes you can commit them. Add files that you want to encrypt using the --encrypt argument to chezmoi add , for example: $ chezmoi add --encrypt ~/.ssh/id_rsa","title":"How do I configure chezmoi to encrypt files but only request a passphrase the first time chezmoi init is run?"},{"location":"user-guide/frequently-asked-questions/general/","text":"General What other questions have been asked about chezmoi? See the issues and discussions . Where do I ask a question that isn't answered here? Please open an issue on GitHub or start a discussion . I like chezmoi. How do I say thanks? Thank you! chezmoi was written to scratch a personal itch, and I'm very happy that it's useful to you. Please give chezmoi a star on GitHub , and if you're happy to share your public dotfile repo then tag it with chezmoi . If you write an article or give a talk on chezmoi please inform the author (e.g. by opening an issue ) so it can be added to chezmoi's aricles, podcasts, and videos page . Contributions are very welcome and every bug report, support request, and feature request helps make chezmoi better. Thank you :)","title":"General"},{"location":"user-guide/frequently-asked-questions/general/#general","text":"","title":"General"},{"location":"user-guide/frequently-asked-questions/general/#what-other-questions-have-been-asked-about-chezmoi","text":"See the issues and discussions .","title":"What other questions have been asked about chezmoi?"},{"location":"user-guide/frequently-asked-questions/general/#where-do-i-ask-a-question-that-isnt-answered-here","text":"Please open an issue on GitHub or start a discussion .","title":"Where do I ask a question that isn't answered here?"},{"location":"user-guide/frequently-asked-questions/general/#i-like-chezmoi-how-do-i-say-thanks","text":"Thank you! chezmoi was written to scratch a personal itch, and I'm very happy that it's useful to you. Please give chezmoi a star on GitHub , and if you're happy to share your public dotfile repo then tag it with chezmoi . If you write an article or give a talk on chezmoi please inform the author (e.g. by opening an issue ) so it can be added to chezmoi's aricles, podcasts, and videos page . Contributions are very welcome and every bug report, support request, and feature request helps make chezmoi better. Thank you :)","title":"I like chezmoi. How do I say thanks?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/","text":"Troubleshooting How can I quickly check for problems with chezmoi on my machine? Run: $ chezmoi doctor Anything ok is fine, anything warning is only a problem if you want to use the related feature, and anything error indicates a definite problem. The output of chezmoi diff is broken and does not contain color. What could be wrong? By default, chezmoi's diff output includes ANSI color escape sequences (e.g. ESC[37m ) and is piped into your pager (by default less ). chezmoi assumes that your pager passes through the ANSI color escape sequences, as configured on many systems, but not all. If your pager does not pass through ANSI color escape sequences then you will see monochrome diff output with uninterpreted ANSI color escape sequences. This can typically by fixed by setting the environment variable $ export LESS = -R which instructs less to display \"raw\" control characters via the -R / --RAW-CONTROL-CHARS option. You can also set the pager configuration variable in your config file, for example: ~/.config/chezmoi/chezmoi.toml pager = \"less -R\" If you have set a different pager (via the pager configuration variable or PAGER environment variable) then you must ensure that it passes through raw control characters. Alternatively, you can use the --color=false option to chezmoi to disable colors or the --no-pager option to chezmoi to disable the pager. Why do I get a blank buffer or empty file when running chezmoi edit ? In this case, chezmoi edit typically prints a warning like: chezmoi: warning: $EDITOR $TMPDIR/$FILENAME: returned in less than 1s chezmoi edit performs a bit of magic to improve the experience of editing files in the source state by invoking your editor with filenames in a temporary directory that look like filenames in your home directory. What's happening here is that your editor command is exiting immediately, so chezmoi thinks you've finished editing and so removes the temporary directory, but actually your editor command has forked a edit process in the background, and that edit process opens a now non-existent file. To fix this you have to configure your editor command to remain in the foreground until you have finished editing the file, so chezmoi knows when to remove the temporary directory. VIM VSCode Pass the -f flag, e.g. by setting the edit.flags configuration variable to [\"-f\"] , or by setting the EDITOR environment variable to include the -f flag, e.g. export EDITOR=\"vim -f\" . Pass the --wait flag, e.g. by setting the edit.flags configuration variable to [\"--wait\"] or by setting the EDITOR environment variable to include the --wait flag, e.g. export EDITOR=\"code --wait\" . The \"bit of magic\" that chezmoi edit performs includes: chezmoi edit makes the filename opened by your editor more closely match the target filename, which can help your editor choose the correct syntax highlighting. For example, if you run chezmoi edit ~/.zshrc , your editor is be opened with $TMPDIR/.zshrc but you'll actually be editing ~/.local/share/chezmoi/dot_zshrc . Under the hood, chezmoi creates a hardlink in a temporary directory to the file in your source directory, so even though your editor thinks it's editing .zshrc , it is really editing dot_zshrc in your source directory. If the source file is encrypted then chezmoi edit transparently decrypts and re-encrypts the file for you. Specifically, chezmoi decrypts the file into a private temporary directory and open your editor with the decrypted file, and re-encrypts the file when you exit your editor. If the source file is a template, then chezmoi edit preserves the .tmpl extension. chezmoi makes ~/.ssh/config group writeable. How do I stop this? By default, chezmoi uses your system's umask when creating files. On most systems the default umask is 022 but some systems use 002 , which means that files and directories are group writeable by default. You can override this for chezmoi by setting the umask configuration variable in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml umask = 0 o022 Note This will apply to all files and directories that chezmoi manages and will ensure that none of them are group writeable. It is not currently possible to control group write permissions for individual files or directories. Please open an issue on GitHub if you need this. chezmoi reports chezmoi: user: lookup userid NNNNN: input/output error This is likely because the chezmoi binary you are using was statically compiled with musl and the machine you are running on uses LDAP or NIS. The immediate fix is to use a package built for your distribution (e.g a .deb or .rpm ) which is linked against glibc and includes LDAP/NIS support instead of the statically-compiled binary. If the problem still persists, then please open an issue on GitHub . chezmoi reports chezmoi: timeout or chezmoi: timeout obtaining persistent state lock chezmoi will report this when it is unable to lock its persistent state ( ~/.config/chezmoi/chezmoistate.boltdb ), typically because another instance of chezmoi is currently running and holding the lock. This can happen, for example, if you have a run_ script that invokes chezmoi , or are running chezmoi in another window. Under the hood, chezmoi uses bbolt which permits multiple simultaneous readers, but only one writer (with no readers). Commands that take a write lock include add , apply , edit , forget , import , init , state , unmanage , and update . Commands that take a read lock include diff , status , and verify . chezmoi reports chezmoi: fork/exec /tmp/XXXXXXXXXX.XX: permission denied when executing a script This error occurs when your temporary directory is mounted with the noexec option. As chezmoi scripts can be templates, encrypted, or both, chezmoi needs to write the final script's contents to a file so that it can be executed by the operating system. By default, chezmoi will use $TMPDIR for this. You can change the temporary directory into which chezmoi writes and executes scripts with the scriptTempDir configuration variable. For example, to use a subdirectory of your home directory you can use: ~/.config/chezmoi/chezmoi.toml scriptTempDir = \"~/tmp\" chezmoi reports chezmoi: mkdir xxxxx: no such file or directory when trying to manage file or directory This error occurs when you try to add directory/file to be managed via chezmoi but the same directory is only listed in .chezmoiexternal.$FORMAT . A workaround can be applied in a such case via manually creating import directory in chezmoi source directory (typically ~/.local/share/chezmoi ) and create .keep file. For example, if .chezmoiexternal.toml has the configuration: [\".config/nvim\"] type = \"git-repo\" url = \"https://github.com/NvChad/NvChad.git\" refreshPeriod = \"168h\" [\".config/nvim\".pull] args = [ \"--ff-only\" ] Now chezmoi add ~/.config/direnv/direnvrc will raise the error: chezmoi: mkdir /home/<user>/.local/share/chezmoi/dot_config/direnv: no such file or directory But the workaround can be applied: $ chezmoi cd $ mkdir -p dot_config/ $ touch dot_config/.keep Now once that done chezmoi add ~/.config/direnv/direnvrc should work. For reference see this issue chezmoi reports fork/exec ...: no such file or directory when running scripts on Termux You are likely using a hardcoded script interpreter in the shebang line of your scripts, e.g. #!/bin/bash /bin/bash does not exist on Termux. You must update the shebang line to point to the actual bash interpreter. The easiest way to do this is make the script a template and use the lookPath template function, for example: #!{{ lookPath \"bash\" }}","title":"Troubleshooting"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#how-can-i-quickly-check-for-problems-with-chezmoi-on-my-machine","text":"Run: $ chezmoi doctor Anything ok is fine, anything warning is only a problem if you want to use the related feature, and anything error indicates a definite problem.","title":"How can I quickly check for problems with chezmoi on my machine?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#the-output-of-chezmoi-diff-is-broken-and-does-not-contain-color-what-could-be-wrong","text":"By default, chezmoi's diff output includes ANSI color escape sequences (e.g. ESC[37m ) and is piped into your pager (by default less ). chezmoi assumes that your pager passes through the ANSI color escape sequences, as configured on many systems, but not all. If your pager does not pass through ANSI color escape sequences then you will see monochrome diff output with uninterpreted ANSI color escape sequences. This can typically by fixed by setting the environment variable $ export LESS = -R which instructs less to display \"raw\" control characters via the -R / --RAW-CONTROL-CHARS option. You can also set the pager configuration variable in your config file, for example: ~/.config/chezmoi/chezmoi.toml pager = \"less -R\" If you have set a different pager (via the pager configuration variable or PAGER environment variable) then you must ensure that it passes through raw control characters. Alternatively, you can use the --color=false option to chezmoi to disable colors or the --no-pager option to chezmoi to disable the pager.","title":"The output of chezmoi diff is broken and does not contain color. What could be wrong?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#why-do-i-get-a-blank-buffer-or-empty-file-when-running-chezmoi-edit","text":"In this case, chezmoi edit typically prints a warning like: chezmoi: warning: $EDITOR $TMPDIR/$FILENAME: returned in less than 1s chezmoi edit performs a bit of magic to improve the experience of editing files in the source state by invoking your editor with filenames in a temporary directory that look like filenames in your home directory. What's happening here is that your editor command is exiting immediately, so chezmoi thinks you've finished editing and so removes the temporary directory, but actually your editor command has forked a edit process in the background, and that edit process opens a now non-existent file. To fix this you have to configure your editor command to remain in the foreground until you have finished editing the file, so chezmoi knows when to remove the temporary directory. VIM VSCode Pass the -f flag, e.g. by setting the edit.flags configuration variable to [\"-f\"] , or by setting the EDITOR environment variable to include the -f flag, e.g. export EDITOR=\"vim -f\" . Pass the --wait flag, e.g. by setting the edit.flags configuration variable to [\"--wait\"] or by setting the EDITOR environment variable to include the --wait flag, e.g. export EDITOR=\"code --wait\" . The \"bit of magic\" that chezmoi edit performs includes: chezmoi edit makes the filename opened by your editor more closely match the target filename, which can help your editor choose the correct syntax highlighting. For example, if you run chezmoi edit ~/.zshrc , your editor is be opened with $TMPDIR/.zshrc but you'll actually be editing ~/.local/share/chezmoi/dot_zshrc . Under the hood, chezmoi creates a hardlink in a temporary directory to the file in your source directory, so even though your editor thinks it's editing .zshrc , it is really editing dot_zshrc in your source directory. If the source file is encrypted then chezmoi edit transparently decrypts and re-encrypts the file for you. Specifically, chezmoi decrypts the file into a private temporary directory and open your editor with the decrypted file, and re-encrypts the file when you exit your editor. If the source file is a template, then chezmoi edit preserves the .tmpl extension.","title":"Why do I get a blank buffer or empty file when running chezmoi edit?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-makes-sshconfig-group-writeable-how-do-i-stop-this","text":"By default, chezmoi uses your system's umask when creating files. On most systems the default umask is 022 but some systems use 002 , which means that files and directories are group writeable by default. You can override this for chezmoi by setting the umask configuration variable in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml umask = 0 o022 Note This will apply to all files and directories that chezmoi manages and will ensure that none of them are group writeable. It is not currently possible to control group write permissions for individual files or directories. Please open an issue on GitHub if you need this.","title":"chezmoi makes ~/.ssh/config group writeable. How do I stop this?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-user-lookup-userid-nnnnn-inputoutput-error","text":"This is likely because the chezmoi binary you are using was statically compiled with musl and the machine you are running on uses LDAP or NIS. The immediate fix is to use a package built for your distribution (e.g a .deb or .rpm ) which is linked against glibc and includes LDAP/NIS support instead of the statically-compiled binary. If the problem still persists, then please open an issue on GitHub .","title":"chezmoi reports chezmoi: user: lookup userid NNNNN: input/output error"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-timeout-or-chezmoi-timeout-obtaining-persistent-state-lock","text":"chezmoi will report this when it is unable to lock its persistent state ( ~/.config/chezmoi/chezmoistate.boltdb ), typically because another instance of chezmoi is currently running and holding the lock. This can happen, for example, if you have a run_ script that invokes chezmoi , or are running chezmoi in another window. Under the hood, chezmoi uses bbolt which permits multiple simultaneous readers, but only one writer (with no readers). Commands that take a write lock include add , apply , edit , forget , import , init , state , unmanage , and update . Commands that take a read lock include diff , status , and verify .","title":"chezmoi reports chezmoi: timeout or chezmoi: timeout obtaining persistent state lock"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-forkexec-tmpxxxxxxxxxxxx-permission-denied-when-executing-a-script","text":"This error occurs when your temporary directory is mounted with the noexec option. As chezmoi scripts can be templates, encrypted, or both, chezmoi needs to write the final script's contents to a file so that it can be executed by the operating system. By default, chezmoi will use $TMPDIR for this. You can change the temporary directory into which chezmoi writes and executes scripts with the scriptTempDir configuration variable. For example, to use a subdirectory of your home directory you can use: ~/.config/chezmoi/chezmoi.toml scriptTempDir = \"~/tmp\"","title":"chezmoi reports chezmoi: fork/exec /tmp/XXXXXXXXXX.XX: permission denied when executing a script"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-mkdir-xxxxx-no-such-file-or-directory-when-trying-to-manage-file-or-directory","text":"This error occurs when you try to add directory/file to be managed via chezmoi but the same directory is only listed in .chezmoiexternal.$FORMAT . A workaround can be applied in a such case via manually creating import directory in chezmoi source directory (typically ~/.local/share/chezmoi ) and create .keep file. For example, if .chezmoiexternal.toml has the configuration: [\".config/nvim\"] type = \"git-repo\" url = \"https://github.com/NvChad/NvChad.git\" refreshPeriod = \"168h\" [\".config/nvim\".pull] args = [ \"--ff-only\" ] Now chezmoi add ~/.config/direnv/direnvrc will raise the error: chezmoi: mkdir /home/<user>/.local/share/chezmoi/dot_config/direnv: no such file or directory But the workaround can be applied: $ chezmoi cd $ mkdir -p dot_config/ $ touch dot_config/.keep Now once that done chezmoi add ~/.config/direnv/direnvrc should work. For reference see this issue","title":"chezmoi reports chezmoi: mkdir xxxxx: no such file or directory when trying to manage file or directory"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-forkexec-no-such-file-or-directory-when-running-scripts-on-termux","text":"You are likely using a hardcoded script interpreter in the shebang line of your scripts, e.g. #!/bin/bash /bin/bash does not exist on Termux. You must update the shebang line to point to the actual bash interpreter. The easiest way to do this is make the script a template and use the lookPath template function, for example: #!{{ lookPath \"bash\" }}","title":"chezmoi reports fork/exec ...: no such file or directory when running scripts on Termux"},{"location":"user-guide/frequently-asked-questions/usage/","text":"Usage How do I edit my dotfiles with chezmoi? There are five popular approaches: Use chezmoi edit $FILE . This will open the source file for $FILE in your editor, including . For extra ease, use chezmoi edit --apply $FILE to apply the changes when you quit your editor. Use chezmoi cd and edit the files in the source directory directly. Run chezmoi diff to see what changes would be made, and chezmoi apply to make the changes. If your editor supports opening directories, run chezmoi edit with no arguments to open the source directory. Edit the file in your home directory, and then either re-add it by running chezmoi add $FILE or chezmoi re-add . Edit the file in your home directory, and then merge your changes with source state by running chezmoi merge $FILE . Note re-add doesn't work with templates. What are the consequences of \"bare\" modifications to the target files? If my .zshrc is managed by chezmoi and I edit ~/.zshrc without using chezmoi edit , what happens? Until you run chezmoi apply your modified ~/.zshrc will remain in place. When you run chezmoi apply chezmoi will detect that ~/.zshrc has changed since chezmoi last wrote it and prompt you what to do. You can resolve differences with a merge tool by running chezmoi merge ~/.zshrc . How can I tell what dotfiles in my home directory aren't managed by chezmoi? Is there an easy way to have chezmoi manage a subset of them? chezmoi unmanaged will list everything not managed by chezmoi. You can add entire directories with chezmoi add . How can I tell what dotfiles in my home directory are currently managed by chezmoi? chezmoi managed will list everything managed by chezmoi. If there's a mechanism in place for the above, is there also a way to tell chezmoi to ignore specific files or groups of files (e.g. by directory name or by glob)? By default, chezmoi ignores everything that you haven't explicitly added. If you have files in your source directory that you don't want added to your destination directory when you run chezmoi apply add their names to a file called .chezmoiignore in the source state. Patterns are supported, and you can change what's ignored from machine to machine. The full usage and syntax is described in the reference manual . If the target already exists, but is \"behind\" the source, can chezmoi be configured to preserve the target version before replacing it with one derived from the source? Yes. Run chezmoi add will update the source state with the target. To see diffs of what would change, without actually changing anything, use chezmoi diff . Once I've made a change to the source directory, how do I commit it? You have several options: chezmoi cd opens a shell in the source directory, where you can run your usual version control commands, like git add and git commit . chezmoi git runs git in the source directory and pass extra arguments to the command. If you're passing any flags, you'll need to use -- to prevent chezmoi from consuming them, for example chezmoi git -- commit -m \"Update dotfiles\" . You can configure chezmoi to automatically commit and push changes to your source state, as described in the how-to guide . I've made changes to both the destination state and the source state that I want to keep. How can I keep them both? chezmoi merge will open a merge tool to resolve differences between the source state, target state, and destination state. Copy the changes you want to keep in to the source state.","title":"Usage"},{"location":"user-guide/frequently-asked-questions/usage/#usage","text":"","title":"Usage"},{"location":"user-guide/frequently-asked-questions/usage/#how-do-i-edit-my-dotfiles-with-chezmoi","text":"There are five popular approaches: Use chezmoi edit $FILE . This will open the source file for $FILE in your editor, including . For extra ease, use chezmoi edit --apply $FILE to apply the changes when you quit your editor. Use chezmoi cd and edit the files in the source directory directly. Run chezmoi diff to see what changes would be made, and chezmoi apply to make the changes. If your editor supports opening directories, run chezmoi edit with no arguments to open the source directory. Edit the file in your home directory, and then either re-add it by running chezmoi add $FILE or chezmoi re-add . Edit the file in your home directory, and then merge your changes with source state by running chezmoi merge $FILE . Note re-add doesn't work with templates.","title":"How do I edit my dotfiles with chezmoi?"},{"location":"user-guide/frequently-asked-questions/usage/#what-are-the-consequences-of-bare-modifications-to-the-target-files-if-my-zshrc-is-managed-by-chezmoi-and-i-edit-zshrc-without-using-chezmoi-edit-what-happens","text":"Until you run chezmoi apply your modified ~/.zshrc will remain in place. When you run chezmoi apply chezmoi will detect that ~/.zshrc has changed since chezmoi last wrote it and prompt you what to do. You can resolve differences with a merge tool by running chezmoi merge ~/.zshrc .","title":"What are the consequences of \"bare\" modifications to the target files? If my .zshrc is managed by chezmoi and I edit ~/.zshrc without using chezmoi edit, what happens?"},{"location":"user-guide/frequently-asked-questions/usage/#how-can-i-tell-what-dotfiles-in-my-home-directory-arent-managed-by-chezmoi-is-there-an-easy-way-to-have-chezmoi-manage-a-subset-of-them","text":"chezmoi unmanaged will list everything not managed by chezmoi. You can add entire directories with chezmoi add .","title":"How can I tell what dotfiles in my home directory aren't managed by chezmoi? Is there an easy way to have chezmoi manage a subset of them?"},{"location":"user-guide/frequently-asked-questions/usage/#how-can-i-tell-what-dotfiles-in-my-home-directory-are-currently-managed-by-chezmoi","text":"chezmoi managed will list everything managed by chezmoi.","title":"How can I tell what dotfiles in my home directory are currently managed by chezmoi?"},{"location":"user-guide/frequently-asked-questions/usage/#if-theres-a-mechanism-in-place-for-the-above-is-there-also-a-way-to-tell-chezmoi-to-ignore-specific-files-or-groups-of-files-eg-by-directory-name-or-by-glob","text":"By default, chezmoi ignores everything that you haven't explicitly added. If you have files in your source directory that you don't want added to your destination directory when you run chezmoi apply add their names to a file called .chezmoiignore in the source state. Patterns are supported, and you can change what's ignored from machine to machine. The full usage and syntax is described in the reference manual .","title":"If there's a mechanism in place for the above, is there also a way to tell chezmoi to ignore specific files or groups of files (e.g. by directory name or by glob)?"},{"location":"user-guide/frequently-asked-questions/usage/#if-the-target-already-exists-but-is-behind-the-source-can-chezmoi-be-configured-to-preserve-the-target-version-before-replacing-it-with-one-derived-from-the-source","text":"Yes. Run chezmoi add will update the source state with the target. To see diffs of what would change, without actually changing anything, use chezmoi diff .","title":"If the target already exists, but is \"behind\" the source, can chezmoi be configured to preserve the target version before replacing it with one derived from the source?"},{"location":"user-guide/frequently-asked-questions/usage/#once-ive-made-a-change-to-the-source-directory-how-do-i-commit-it","text":"You have several options: chezmoi cd opens a shell in the source directory, where you can run your usual version control commands, like git add and git commit . chezmoi git runs git in the source directory and pass extra arguments to the command. If you're passing any flags, you'll need to use -- to prevent chezmoi from consuming them, for example chezmoi git -- commit -m \"Update dotfiles\" . You can configure chezmoi to automatically commit and push changes to your source state, as described in the how-to guide .","title":"Once I've made a change to the source directory, how do I commit it?"},{"location":"user-guide/frequently-asked-questions/usage/#ive-made-changes-to-both-the-destination-state-and-the-source-state-that-i-want-to-keep-how-can-i-keep-them-both","text":"chezmoi merge will open a merge tool to resolve differences between the source state, target state, and destination state. Copy the changes you want to keep in to the source state.","title":"I've made changes to both the destination state and the source state that I want to keep. How can I keep them both?"},{"location":"user-guide/machines/containers-and-vms/","text":"Containers and VMs You can use chezmoi to manage your dotfiles in GitHub Codespaces , Visual Studio Codespaces , and Visual Studio Code Remote - Containers . For a quick start, you can clone the chezmoi/dotfiles repository which supports Codespaces out of the box. The workflow is different to using chezmoi on a new machine, notably: These systems will automatically clone your dotfiles repo to ~/dotfiles , so there is no need to clone your repo yourself. The installation script must be non-interactive. When running in a Codespace, the environment variable CODESPACES will be set to true . You can read its value with the env template function . First, if you are using a chezmoi configuration file template, ensure that it is non-interactive when running in Codespaces, for example, .chezmoi.toml.tmpl might contain: {{- $codespaces:= env \"CODESPACES\" | not | not -}} sourceDir = {{ .chezmoi.sourceDir | quote }} [data] name = \"Your name\" codespaces = {{ $codespaces }} {{- if $codespaces }}{{/* Codespaces dotfiles setup is non-interactive, so set an email address */}} email = \"your@email.com\" {{- else }}{{/* Interactive setup, so prompt for an email address */}} email = {{ promptString \"email\" | quote }} {{- end }} This sets the codespaces template variable, so you don't have to repeat (env \"CODESPACES\") in your templates. It also sets the sourceDir configuration to the --source argument passed in chezmoi init . Second, create an install.sh script that installs chezmoi and your dotfiles: #!/bin/sh set -e # -e: exit on error if [ ! \" $( command -v chezmoi ) \" ] ; then bin_dir = \" $HOME /.local/bin\" chezmoi = \" $bin_dir /chezmoi\" if [ \" $( command -v curl ) \" ] ; then sh -c \" $( curl -fsLS https://chezmoi.io/get ) \" -- -b \" $bin_dir \" elif [ \" $( command -v wget ) \" ] ; then sh -c \" $( wget -qO- https://chezmoi.io/get ) \" -- -b \" $bin_dir \" else echo \"To install chezmoi, you must have curl or wget installed.\" > & 2 exit 1 fi else chezmoi = chezmoi fi # POSIX way to get script's dir: https://stackoverflow.com/a/29834779/12156188 script_dir = \" $( cd -P -- \" $( dirname -- \" $( command -v -- \" $0 \" ) \" ) \" && pwd -P ) \" # exec: replace current process with chezmoi init exec \" $chezmoi \" init --apply \"--source= $script_dir \" Ensure that this file is executable ( chmod a+x install.sh ), and add install.sh to your .chezmoiignore file. It installs the latest version of chezmoi in ~/.local/bin if needed, and then chezmoi init ... invokes chezmoi to create its configuration file and initialize your dotfiles. --apply tells chezmoi to apply the changes immediately, and --source=... tells chezmoi where to find the cloned dotfiles repo, which in this case is the same folder in which the script is running from. If you do not use a chezmoi configuration file template you can use chezmoi apply --source=$HOME/dotfiles instead of chezmoi init ... in install.sh . Finally, modify any of your templates to use the codespaces variable if needed. For example, to install vim-gtk on Linux but not in Codespaces, your run_once_install-packages.sh.tmpl might contain: {{- if (and (eq .chezmoi.os \"linux\") (not .codespaces)) -}} #!/bin/sh sudo apt install -y vim-gtk {{- end -}}","title":"Containers and VMs"},{"location":"user-guide/machines/containers-and-vms/#containers-and-vms","text":"You can use chezmoi to manage your dotfiles in GitHub Codespaces , Visual Studio Codespaces , and Visual Studio Code Remote - Containers . For a quick start, you can clone the chezmoi/dotfiles repository which supports Codespaces out of the box. The workflow is different to using chezmoi on a new machine, notably: These systems will automatically clone your dotfiles repo to ~/dotfiles , so there is no need to clone your repo yourself. The installation script must be non-interactive. When running in a Codespace, the environment variable CODESPACES will be set to true . You can read its value with the env template function . First, if you are using a chezmoi configuration file template, ensure that it is non-interactive when running in Codespaces, for example, .chezmoi.toml.tmpl might contain: {{- $codespaces:= env \"CODESPACES\" | not | not -}} sourceDir = {{ .chezmoi.sourceDir | quote }} [data] name = \"Your name\" codespaces = {{ $codespaces }} {{- if $codespaces }}{{/* Codespaces dotfiles setup is non-interactive, so set an email address */}} email = \"your@email.com\" {{- else }}{{/* Interactive setup, so prompt for an email address */}} email = {{ promptString \"email\" | quote }} {{- end }} This sets the codespaces template variable, so you don't have to repeat (env \"CODESPACES\") in your templates. It also sets the sourceDir configuration to the --source argument passed in chezmoi init . Second, create an install.sh script that installs chezmoi and your dotfiles: #!/bin/sh set -e # -e: exit on error if [ ! \" $( command -v chezmoi ) \" ] ; then bin_dir = \" $HOME /.local/bin\" chezmoi = \" $bin_dir /chezmoi\" if [ \" $( command -v curl ) \" ] ; then sh -c \" $( curl -fsLS https://chezmoi.io/get ) \" -- -b \" $bin_dir \" elif [ \" $( command -v wget ) \" ] ; then sh -c \" $( wget -qO- https://chezmoi.io/get ) \" -- -b \" $bin_dir \" else echo \"To install chezmoi, you must have curl or wget installed.\" > & 2 exit 1 fi else chezmoi = chezmoi fi # POSIX way to get script's dir: https://stackoverflow.com/a/29834779/12156188 script_dir = \" $( cd -P -- \" $( dirname -- \" $( command -v -- \" $0 \" ) \" ) \" && pwd -P ) \" # exec: replace current process with chezmoi init exec \" $chezmoi \" init --apply \"--source= $script_dir \" Ensure that this file is executable ( chmod a+x install.sh ), and add install.sh to your .chezmoiignore file. It installs the latest version of chezmoi in ~/.local/bin if needed, and then chezmoi init ... invokes chezmoi to create its configuration file and initialize your dotfiles. --apply tells chezmoi to apply the changes immediately, and --source=... tells chezmoi where to find the cloned dotfiles repo, which in this case is the same folder in which the script is running from. If you do not use a chezmoi configuration file template you can use chezmoi apply --source=$HOME/dotfiles instead of chezmoi init ... in install.sh . Finally, modify any of your templates to use the codespaces variable if needed. For example, to install vim-gtk on Linux but not in Codespaces, your run_once_install-packages.sh.tmpl might contain: {{- if (and (eq .chezmoi.os \"linux\") (not .codespaces)) -}} #!/bin/sh sudo apt install -y vim-gtk {{- end -}}","title":"Containers and VMs"},{"location":"user-guide/machines/general/","text":"General Determine whether the current machine is a laptop or desktop The following template sets the $chassisType variable to \"desktop\" or \"laptop\" on macOS, Linux, and Windows. {{- $chassisType := \"desktop\" }} {{- if eq .chezmoi.os \"darwin\" }} {{- if contains \"MacBook\" (output \"sysctl\" \"-n\" \"hw.model\") }} {{- $chassisType = \"laptop\" }} {{- else }} {{- $chassisType = \"desktop\" }} {{- end }} {{- else if eq .chezmoi.os \"linux\" }} {{- $chassisType = (output \"hostnamectl\" \"--json=short\" | mustFromJson).Chassis }} {{- else if eq .chezmoi.os \"windows\" }} {{- $chassisType = (output \"powershell.exe\" \"-noprofile\" \"-command\" \"if (Get-WmiObject -Class win32_battery -ComputerName localhost) { echo laptop } else { echo desktop }\") }} {{- end }}","title":"General"},{"location":"user-guide/machines/general/#general","text":"","title":"General"},{"location":"user-guide/machines/general/#determine-whether-the-current-machine-is-a-laptop-or-desktop","text":"The following template sets the $chassisType variable to \"desktop\" or \"laptop\" on macOS, Linux, and Windows. {{- $chassisType := \"desktop\" }} {{- if eq .chezmoi.os \"darwin\" }} {{- if contains \"MacBook\" (output \"sysctl\" \"-n\" \"hw.model\") }} {{- $chassisType = \"laptop\" }} {{- else }} {{- $chassisType = \"desktop\" }} {{- end }} {{- else if eq .chezmoi.os \"linux\" }} {{- $chassisType = (output \"hostnamectl\" \"--json=short\" | mustFromJson).Chassis }} {{- else if eq .chezmoi.os \"windows\" }} {{- $chassisType = (output \"powershell.exe\" \"-noprofile\" \"-command\" \"if (Get-WmiObject -Class win32_battery -ComputerName localhost) { echo laptop } else { echo desktop }\") }} {{- end }}","title":"Determine whether the current machine is a laptop or desktop"},{"location":"user-guide/machines/linux/","text":"Linux Combine operating system and Linux distribution conditionals There can be as much variation between Linux distributions as there is between operating systems. Due to text/template 's eager evaluation of conditionals, this means you often have to write templates with nested conditionals: {{ if eq .chezmoi.os \"darwin\" }} # macOS-specific code {{ else if eq .chezmoi.os \"linux\" }} {{ if eq .chezmoi.osRelease.id \"debian\" }} # Debian-specific code {{ else if eq .chezmoi.osRelease.id \"fedora\" }} # Fedora-specific code {{ end }} {{ end }} This can be simplified by combining the operating system and distribution into a single custom template variable. Put the following in your configuration file template: {{- $osid := .chezmoi.os -}} {{- if hasKey .chezmoi.osRelease \"id\" -}} {{- $osid = printf \"%s-%s\" .chezmoi.os .chezmoi.osRelease.id -}} {{- end -}} [data] osid = {{ $osid | quote }} This defines the .osid template variable to be {{ .chezmoi.os }} on machines without an os-release file , or to be {{ .chezmoi.os }}-{{ .chezmoi.osRelease.id }} on machines with an os-release file. You can then simplify your conditionals to be: {{ if eq .osid \"darwin\" }} # macOS-specific code {{ else if eq .osid \"linux-debian\" }} # Debian-specific code {{ else if eq .osid \"linux-fedora\" }} # Fedora-specific code {{ end }}","title":"Linux"},{"location":"user-guide/machines/linux/#linux","text":"","title":"Linux"},{"location":"user-guide/machines/linux/#combine-operating-system-and-linux-distribution-conditionals","text":"There can be as much variation between Linux distributions as there is between operating systems. Due to text/template 's eager evaluation of conditionals, this means you often have to write templates with nested conditionals: {{ if eq .chezmoi.os \"darwin\" }} # macOS-specific code {{ else if eq .chezmoi.os \"linux\" }} {{ if eq .chezmoi.osRelease.id \"debian\" }} # Debian-specific code {{ else if eq .chezmoi.osRelease.id \"fedora\" }} # Fedora-specific code {{ end }} {{ end }} This can be simplified by combining the operating system and distribution into a single custom template variable. Put the following in your configuration file template: {{- $osid := .chezmoi.os -}} {{- if hasKey .chezmoi.osRelease \"id\" -}} {{- $osid = printf \"%s-%s\" .chezmoi.os .chezmoi.osRelease.id -}} {{- end -}} [data] osid = {{ $osid | quote }} This defines the .osid template variable to be {{ .chezmoi.os }} on machines without an os-release file , or to be {{ .chezmoi.os }}-{{ .chezmoi.osRelease.id }} on machines with an os-release file. You can then simplify your conditionals to be: {{ if eq .osid \"darwin\" }} # macOS-specific code {{ else if eq .osid \"linux-debian\" }} # Debian-specific code {{ else if eq .osid \"linux-fedora\" }} # Fedora-specific code {{ end }}","title":"Combine operating system and Linux distribution conditionals"},{"location":"user-guide/machines/macos/","text":"macOS Use brew bundle to manage your brews and casks Homebrew's brew bundle subcommand allows you to specify a list of brews and casks to be installed. You can integrate this with chezmoi by creating a run_once_ script. For example, create a file in your source directory called run_once_before_install-packages-darwin.sh.tmpl containing: {{- if eq .chezmoi.os \"darwin\" -}} #!/bin/bash brew bundle --no-lock --file=/dev/stdin <<EOF brew \"git\" cask \"google-chrome\" EOF {{ end -}} Note The Brewfile is embedded directly in the script with a bash here document. chezmoi will run this script whenever its contents change, i.e. when you add or remove brews or casks. Determine the hostname The result of the hostname command on macOS depends on the network that the machine is connected to. For a stable result, use the scutil command: {{ $computerName := output \"scutil\" \"--get\" \"ComputerName\" | trim }}","title":"macOS"},{"location":"user-guide/machines/macos/#macos","text":"","title":"macOS"},{"location":"user-guide/machines/macos/#use-brew-bundle-to-manage-your-brews-and-casks","text":"Homebrew's brew bundle subcommand allows you to specify a list of brews and casks to be installed. You can integrate this with chezmoi by creating a run_once_ script. For example, create a file in your source directory called run_once_before_install-packages-darwin.sh.tmpl containing: {{- if eq .chezmoi.os \"darwin\" -}} #!/bin/bash brew bundle --no-lock --file=/dev/stdin <<EOF brew \"git\" cask \"google-chrome\" EOF {{ end -}} Note The Brewfile is embedded directly in the script with a bash here document. chezmoi will run this script whenever its contents change, i.e. when you add or remove brews or casks.","title":"Use brew bundle to manage your brews and casks"},{"location":"user-guide/machines/macos/#determine-the-hostname","text":"The result of the hostname command on macOS depends on the network that the machine is connected to. For a stable result, use the scutil command: {{ $computerName := output \"scutil\" \"--get\" \"ComputerName\" | trim }}","title":"Determine the hostname"},{"location":"user-guide/machines/windows/","text":"Windows Detect Windows Subsystem for Linux (WSL) WSL can be detected by looking for the string Microsoft or microsoft in /proc/sys/kernel/osrelease , which is available in the template variable .chezmoi.kernel.osrelease , for example: {{ if eq .chezmoi.os \"linux\" }} {{ if (.chezmoi.kernel.osrelease | lower | contains \"microsoft\") }} # WSL-specific code {{ end }} {{ end }} Run a PowerShell script as admin on Windows Put the following at the top of your script: # Self-elevate the script if required if ( -Not ( [Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity] :: GetCurrent ()). IsInRole ( [Security.Principal.WindowsBuiltInRole] 'Administrator' )) { if ( [int] ( Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber ) -ge 6000 ) { $CommandLine = \"-NoExit -File `\" \" + $MyInvocation . MyCommand . Path + \" `\" \" + $MyInvocation . UnboundArguments Start-Process -FilePath PowerShell . exe -Verb Runas -ArgumentList $CommandLine Exit } }","title":"Windows"},{"location":"user-guide/machines/windows/#windows","text":"","title":"Windows"},{"location":"user-guide/machines/windows/#detect-windows-subsystem-for-linux-wsl","text":"WSL can be detected by looking for the string Microsoft or microsoft in /proc/sys/kernel/osrelease , which is available in the template variable .chezmoi.kernel.osrelease , for example: {{ if eq .chezmoi.os \"linux\" }} {{ if (.chezmoi.kernel.osrelease | lower | contains \"microsoft\") }} # WSL-specific code {{ end }} {{ end }}","title":"Detect Windows Subsystem for Linux (WSL)"},{"location":"user-guide/machines/windows/#run-a-powershell-script-as-admin-on-windows","text":"Put the following at the top of your script: # Self-elevate the script if required if ( -Not ( [Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity] :: GetCurrent ()). IsInRole ( [Security.Principal.WindowsBuiltInRole] 'Administrator' )) { if ( [int] ( Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber ) -ge 6000 ) { $CommandLine = \"-NoExit -File `\" \" + $MyInvocation . MyCommand . Path + \" `\" \" + $MyInvocation . UnboundArguments Start-Process -FilePath PowerShell . exe -Verb Runas -ArgumentList $CommandLine Exit } }","title":"Run a PowerShell script as admin on Windows"},{"location":"user-guide/password-managers/","text":"Password manager integration Template functions allow you to retrieve secrets from many popular password managers. Using a password manager allows you to keep all your secrets in one place, make your dotfiles repo public, and synchronize changes to secrets across multiple machines.","title":"Password manager integration"},{"location":"user-guide/password-managers/#password-manager-integration","text":"Template functions allow you to retrieve secrets from many popular password managers. Using a password manager allows you to keep all your secrets in one place, make your dotfiles repo public, and synchronize changes to secrets across multiple machines.","title":"Password manager integration"},{"location":"user-guide/password-managers/1password/","text":"1Password chezmoi includes support for 1Password using the 1Password CLI to expose data as a template function. Note The 1Password CLI 2.0 has been released. Examples will be shown using the changed details for this version and examples for 1Password CLI 1.x will follow. Log in and get a session using: $ op account add --address $SUBDOMAIN .1password.com --email $EMAIL $ eval $( op signin --account $SUBDOMAIN ) This is not necessary if you are using biometric authentication. Info For 1Password CLI 1.x, use: $ eval $( op signin $SUBDOMAIN .1password.com $EMAIL ) The output of op item get $UUID--format json ( op get item $UUID ) is available as the onepassword template function. chezmoi parses the JSON output and returns it as structured data. For example, if the output is: { \"id\" : \"$UUID\" , \"title\" : \"$TITLE\" , \"version\" : 2 , \"vault\" : { \"id\" : \"$vaultUUID\" }, \"category\" : \"LOGIN\" , \"last_edited_by\" : \"$userUUID\" , \"created_at\" : \"2010-08-23T13:18:43Z\" , \"updated_at\" : \"2014-07-20T04:40:11Z\" , \"fields\" : [ { \"id\" : \"username\" , \"type\" : \"STRING\" , \"purpose\" : \"USERNAME\" , \"label\" : \"username\" , \"value\" : \"$USERNAME\" }, { \"id\" : \"password\" , \"type\" : \"CONCEALED\" , \"purpose\" : \"PASSWORD\" , \"label\" : \"password\" , \"value\" : \"$PASSWORD\" , \"password_details\" : { \"strength\" : \"FANTASTIC\" , \"history\" : [] } } ], \"urls\" : [ { \"primary\" : true , \"href\" : \"$URL\" } ] } Then you can access the password field with the syntax {{ (index (onepassword \"$UUID\").fields 1).value }} or: {{ range (onepassword \"$UUID\").fields -}} {{ if and (eq .label \"password\") (eq .purpose \"PASSWORD\") -}} {{ .value -}} {{ end -}} {{ end }} Info 1Password CLI 1.x returns a simpler structure: { \"uuid\" : \"$UUID\" , \"details\" : { \"password\" : \"$PASSWORD\" } } This allows for the syntax: {{ (onepassword \"$UUID\").details.password }} onepasswordDetailsFields returns a reworked version of the structure that allows the fields to be queried by key: { \"password\" : { \"id\" : \"password\" , \"label\" : \"password\" , \"password_details\" : { \"history\" : [], \"strength\" : \"FANTASTIC\" }, \"purpose\" : \"PASSWORD\" , \"type\" : \"CONCEALED\" , \"value\" : \"$PASSWORD\" }, \"username\" : { \"id\" : \"username\" , \"label\" : \"username\" , \"purpose\" : \"USERNAME\" , \"type\" : \"STRING\" , \"value\" : \"$USERNAME\" } } {{- (onepasswordDetailsFields \"$UUID\").password.value }} Additional fields may be obtained with onePasswordItemFields ; not all objects in 1Password have item fields. This can be tested with: $ chezmoi execute-template \"{{ onepasswordItemFields \\\" $UUID \\\" | toJson }}\" | jq . Documents can be retrieved with: {{- onepasswordDocument \"$UUID\" -}} Note The extra - after the opening {{ and before the closing }} instructs the template language to remove any whitespace before and after the substitution. This removes any trailing newline added by your editor when saving the template. Sign-in prompt chezmoi will verify the availability and validity of a session token in the current environment. If it is missing or expired, you will be interactively prompted to sign-in again. In the past chezmoi used to simply exit with an error when no valid session was available. If you'd like to restore this behavior, set the the onepassword.prompt configuration variable to false , for example: ~/.config/chezmoi/chezmoi.toml [onepassword] prompt = false Danger Do not use the prompt on shared machines. A session token verified or acquired interactively will be passed to the 1Password CLI through a command line parameter, which is visible to other users of the same system.","title":"1Password"},{"location":"user-guide/password-managers/1password/#1password","text":"chezmoi includes support for 1Password using the 1Password CLI to expose data as a template function. Note The 1Password CLI 2.0 has been released. Examples will be shown using the changed details for this version and examples for 1Password CLI 1.x will follow. Log in and get a session using: $ op account add --address $SUBDOMAIN .1password.com --email $EMAIL $ eval $( op signin --account $SUBDOMAIN ) This is not necessary if you are using biometric authentication. Info For 1Password CLI 1.x, use: $ eval $( op signin $SUBDOMAIN .1password.com $EMAIL ) The output of op item get $UUID--format json ( op get item $UUID ) is available as the onepassword template function. chezmoi parses the JSON output and returns it as structured data. For example, if the output is: { \"id\" : \"$UUID\" , \"title\" : \"$TITLE\" , \"version\" : 2 , \"vault\" : { \"id\" : \"$vaultUUID\" }, \"category\" : \"LOGIN\" , \"last_edited_by\" : \"$userUUID\" , \"created_at\" : \"2010-08-23T13:18:43Z\" , \"updated_at\" : \"2014-07-20T04:40:11Z\" , \"fields\" : [ { \"id\" : \"username\" , \"type\" : \"STRING\" , \"purpose\" : \"USERNAME\" , \"label\" : \"username\" , \"value\" : \"$USERNAME\" }, { \"id\" : \"password\" , \"type\" : \"CONCEALED\" , \"purpose\" : \"PASSWORD\" , \"label\" : \"password\" , \"value\" : \"$PASSWORD\" , \"password_details\" : { \"strength\" : \"FANTASTIC\" , \"history\" : [] } } ], \"urls\" : [ { \"primary\" : true , \"href\" : \"$URL\" } ] } Then you can access the password field with the syntax {{ (index (onepassword \"$UUID\").fields 1).value }} or: {{ range (onepassword \"$UUID\").fields -}} {{ if and (eq .label \"password\") (eq .purpose \"PASSWORD\") -}} {{ .value -}} {{ end -}} {{ end }} Info 1Password CLI 1.x returns a simpler structure: { \"uuid\" : \"$UUID\" , \"details\" : { \"password\" : \"$PASSWORD\" } } This allows for the syntax: {{ (onepassword \"$UUID\").details.password }} onepasswordDetailsFields returns a reworked version of the structure that allows the fields to be queried by key: { \"password\" : { \"id\" : \"password\" , \"label\" : \"password\" , \"password_details\" : { \"history\" : [], \"strength\" : \"FANTASTIC\" }, \"purpose\" : \"PASSWORD\" , \"type\" : \"CONCEALED\" , \"value\" : \"$PASSWORD\" }, \"username\" : { \"id\" : \"username\" , \"label\" : \"username\" , \"purpose\" : \"USERNAME\" , \"type\" : \"STRING\" , \"value\" : \"$USERNAME\" } } {{- (onepasswordDetailsFields \"$UUID\").password.value }} Additional fields may be obtained with onePasswordItemFields ; not all objects in 1Password have item fields. This can be tested with: $ chezmoi execute-template \"{{ onepasswordItemFields \\\" $UUID \\\" | toJson }}\" | jq . Documents can be retrieved with: {{- onepasswordDocument \"$UUID\" -}} Note The extra - after the opening {{ and before the closing }} instructs the template language to remove any whitespace before and after the substitution. This removes any trailing newline added by your editor when saving the template.","title":"1Password"},{"location":"user-guide/password-managers/1password/#sign-in-prompt","text":"chezmoi will verify the availability and validity of a session token in the current environment. If it is missing or expired, you will be interactively prompted to sign-in again. In the past chezmoi used to simply exit with an error when no valid session was available. If you'd like to restore this behavior, set the the onepassword.prompt configuration variable to false , for example: ~/.config/chezmoi/chezmoi.toml [onepassword] prompt = false Danger Do not use the prompt on shared machines. A session token verified or acquired interactively will be passed to the 1Password CLI through a command line parameter, which is visible to other users of the same system.","title":"Sign-in prompt"},{"location":"user-guide/password-managers/bitwarden/","text":"Bitwarden chezmoi includes support for Bitwarden using the Bitwarden CLI to expose data as a template function. Log in to Bitwarden using: $ bw login $BITWARDEN_EMAIL Unlock your Bitwarden vault: $ bw unlock Set the BW_SESSION environment variable, as instructed. The structured data from bw get is available as the bitwarden template function in your config files, for example: username = {{ (bitwarden \"item\" \"example.com\").login.username }} password = {{ (bitwarden \"item\" \"example.com\").login.password }} Custom fields can be accessed with the bitwardenFields template function. For example, if you have a custom field named token you can retrieve its value with: {{ (bitwardenFields \"item\" \"example.com\").token.value }}","title":"Bitwarden"},{"location":"user-guide/password-managers/bitwarden/#bitwarden","text":"chezmoi includes support for Bitwarden using the Bitwarden CLI to expose data as a template function. Log in to Bitwarden using: $ bw login $BITWARDEN_EMAIL Unlock your Bitwarden vault: $ bw unlock Set the BW_SESSION environment variable, as instructed. The structured data from bw get is available as the bitwarden template function in your config files, for example: username = {{ (bitwarden \"item\" \"example.com\").login.username }} password = {{ (bitwarden \"item\" \"example.com\").login.password }} Custom fields can be accessed with the bitwardenFields template function. For example, if you have a custom field named token you can retrieve its value with: {{ (bitwardenFields \"item\" \"example.com\").token.value }}","title":"Bitwarden"},{"location":"user-guide/password-managers/custom/","text":"Custom You can use any command line tool that outputs secrets either as a string or in JSON format. Choose the binary by setting secret.command in your configuration file. You can then invoke this command with the secret and secretJSON template functions which return the raw output and JSON-decoded output respectively. All of the above secret managers can be supported in this way: Secret Manager secret.command Template skeleton 1Password op {{ secretJSON \"get\" \"item\" \"$ID\" }} Bitwarden bw {{ secretJSON \"get\" \"$ID\" }} HashiCorp Vault vault {{ secretJSON \"kv\" \"get\" \"-format=json\" \"$ID\" }} LastPass lpass {{ secretJSON \"show\" \"--json\" \"$ID\" }} KeePassXC keepassxc-cli Not possible (interactive command only) Keeper keeper {{ secretJSON \"get\" \"--format=json\" \"$ID\" }} pass pass {{ secret \"show\" \"$ID\" }}","title":"Custom"},{"location":"user-guide/password-managers/custom/#custom","text":"You can use any command line tool that outputs secrets either as a string or in JSON format. Choose the binary by setting secret.command in your configuration file. You can then invoke this command with the secret and secretJSON template functions which return the raw output and JSON-decoded output respectively. All of the above secret managers can be supported in this way: Secret Manager secret.command Template skeleton 1Password op {{ secretJSON \"get\" \"item\" \"$ID\" }} Bitwarden bw {{ secretJSON \"get\" \"$ID\" }} HashiCorp Vault vault {{ secretJSON \"kv\" \"get\" \"-format=json\" \"$ID\" }} LastPass lpass {{ secretJSON \"show\" \"--json\" \"$ID\" }} KeePassXC keepassxc-cli Not possible (interactive command only) Keeper keeper {{ secretJSON \"get\" \"--format=json\" \"$ID\" }} pass pass {{ secret \"show\" \"$ID\" }}","title":"Custom"},{"location":"user-guide/password-managers/gopass/","text":"gopass chezmoi includes support for gopass using the gopass CLI. The first line of the output of gopass show $PASS_NAME is available as the gopass template function, for example: {{ gopass \"$PASS_NAME\" }}","title":"gopass"},{"location":"user-guide/password-managers/gopass/#gopass","text":"chezmoi includes support for gopass using the gopass CLI. The first line of the output of gopass show $PASS_NAME is available as the gopass template function, for example: {{ gopass \"$PASS_NAME\" }}","title":"gopass"},{"location":"user-guide/password-managers/keepassxc/","text":"KeePassXC chezmoi includes support for KeePassXC using the KeePassXC CLI ( keepassxc-cli ) to expose data as a template function. Provide the path to your KeePassXC database in your configuration file: ~/.config/chezmoi/chezmoi.toml [keepassxc] database = \"/home/user/Passwords.kdbx\" The structured data from keepassxc-cli show $database is available as the keepassxc template function in your config files, for example: username = {{ (keepassxc \"example.com\").UserName }} password = {{ (keepassxc \"example.com\").Password }} Additional attributes are available through the keepassxcAttribute function. For example, if you have an entry called SSH Key with an additional attribute called private-key , its value is available as: {{ keepassxcAttribute \"SSH Key\" \"private-key\" }} Info The KeepassXC CLI does not currently support any persistent login, which means that you will have to enter your password every time you run chezmoi. Support for non-password authentication methods (e.g. YubiKey) is currently poor. For more information, see this GitHub issue .","title":"KeePassXC"},{"location":"user-guide/password-managers/keepassxc/#keepassxc","text":"chezmoi includes support for KeePassXC using the KeePassXC CLI ( keepassxc-cli ) to expose data as a template function. Provide the path to your KeePassXC database in your configuration file: ~/.config/chezmoi/chezmoi.toml [keepassxc] database = \"/home/user/Passwords.kdbx\" The structured data from keepassxc-cli show $database is available as the keepassxc template function in your config files, for example: username = {{ (keepassxc \"example.com\").UserName }} password = {{ (keepassxc \"example.com\").Password }} Additional attributes are available through the keepassxcAttribute function. For example, if you have an entry called SSH Key with an additional attribute called private-key , its value is available as: {{ keepassxcAttribute \"SSH Key\" \"private-key\" }} Info The KeepassXC CLI does not currently support any persistent login, which means that you will have to enter your password every time you run chezmoi. Support for non-password authentication methods (e.g. YubiKey) is currently poor. For more information, see this GitHub issue .","title":"KeePassXC"},{"location":"user-guide/password-managers/keeper/","text":"Keeper chezmoi includes support for Keeper using the Commander CLI to expose data as a template function. Create a persistent login session as described in the Command CLI documentation . Passwords can be retrieved with the keeperFindPassword template function, for example: examplePasswordFromPath = {{ keeperFindPassword \"$PATH\" }} examplePasswordFromUid = {{ keeperFindPassword \"$UID\" }} For retrieving more complex data, use the keeper template function with a UID to retrieve structured data from keeper get or the keeperDataFields template function which restructures the output of keeper get in to a more convenient form, for example: keeperDataTitle = {{ (keeper \"$UID\").data.title }} examplePassword = {{ index (keeperDataFields \"$UID\").password 0 }} Extra arguments can be passed to the Keeper CLI command by setting the keeper.args variable in chezmoi's config file, for example: ~/.config/chezmoi/chezmoi.toml [keeper] args = [ \"--config\" , \"/path/to/config.json\" ]","title":"Keeper"},{"location":"user-guide/password-managers/keeper/#keeper","text":"chezmoi includes support for Keeper using the Commander CLI to expose data as a template function. Create a persistent login session as described in the Command CLI documentation . Passwords can be retrieved with the keeperFindPassword template function, for example: examplePasswordFromPath = {{ keeperFindPassword \"$PATH\" }} examplePasswordFromUid = {{ keeperFindPassword \"$UID\" }} For retrieving more complex data, use the keeper template function with a UID to retrieve structured data from keeper get or the keeperDataFields template function which restructures the output of keeper get in to a more convenient form, for example: keeperDataTitle = {{ (keeper \"$UID\").data.title }} examplePassword = {{ index (keeperDataFields \"$UID\").password 0 }} Extra arguments can be passed to the Keeper CLI command by setting the keeper.args variable in chezmoi's config file, for example: ~/.config/chezmoi/chezmoi.toml [keeper] args = [ \"--config\" , \"/path/to/config.json\" ]","title":"Keeper"},{"location":"user-guide/password-managers/keychain-and-windows-credentials-manager/","text":"Keychain and Windows Credentials Manager chezmoi includes support for Keychain (on macOS), GNOME Keyring (on Linux and FreeBSD), and Windows Credentials Manager (on Windows) via the zalando/go-keyring library. Set values with: $ chezmoi secret keyring set --service = $SERVICE --user = $USER Value: xxxxxxxx The value can then be used in templates using the keyring function which takes the service and user as arguments. For example, save a GitHub access token in keyring with: $ chezmoi secret keyring set --service = github --user = $GITHUB_USERNAME Value: xxxxxxxx and then include it in your ~/.gitconfig file with: [github] user = {{ .github.user | quote }} token = {{ keyring \"github\" .github.user | quote }} You can query the keyring from the command line: $ chezmoi secret keyring get --service = github --user = $GITHUB_USERNAME","title":"Keychain and Windows Credentials Manager"},{"location":"user-guide/password-managers/keychain-and-windows-credentials-manager/#keychain-and-windows-credentials-manager","text":"chezmoi includes support for Keychain (on macOS), GNOME Keyring (on Linux and FreeBSD), and Windows Credentials Manager (on Windows) via the zalando/go-keyring library. Set values with: $ chezmoi secret keyring set --service = $SERVICE --user = $USER Value: xxxxxxxx The value can then be used in templates using the keyring function which takes the service and user as arguments. For example, save a GitHub access token in keyring with: $ chezmoi secret keyring set --service = github --user = $GITHUB_USERNAME Value: xxxxxxxx and then include it in your ~/.gitconfig file with: [github] user = {{ .github.user | quote }} token = {{ keyring \"github\" .github.user | quote }} You can query the keyring from the command line: $ chezmoi secret keyring get --service = github --user = $GITHUB_USERNAME","title":"Keychain and Windows Credentials Manager"},{"location":"user-guide/password-managers/lastpass/","text":"LastPass chezmoi includes support for LastPass using the LastPass CLI to expose data as a template function. Log in to LastPass using: $ lpass login $LASTPASS_USERNAME Check that lpass is working correctly by showing password data: $ lpass show --json $LASTPASS_ENTRY_ID where $LASTPASS_ENTRY_ID is a LastPass Entry Specification . The structured data from lpass show --json id is available as the lastpass template function. The value will be an array of objects. You can use the index function and .Field syntax of the text/template language to extract the field you want. For example, to extract the password field from first the \"GitHub\" entry, use: githubPassword = {{ (index (lastpass \"GitHub\") 0).password | quote }} chezmoi automatically parses the note value of the Lastpass entry as colon-separated key-value pairs, so, for example, you can extract a private SSH key like this: {{ (index (lastpass \"SSH\") 0).note.privateKey }} Keys in the note section written as CamelCase Words are converted to camelCaseWords . If the note value does not contain colon-separated key-value pairs, then you can use lastpassRaw to get its raw value, for example: {{ (index (lastpassRaw \"SSH Private Key\") 0).note }}","title":"LastPass"},{"location":"user-guide/password-managers/lastpass/#lastpass","text":"chezmoi includes support for LastPass using the LastPass CLI to expose data as a template function. Log in to LastPass using: $ lpass login $LASTPASS_USERNAME Check that lpass is working correctly by showing password data: $ lpass show --json $LASTPASS_ENTRY_ID where $LASTPASS_ENTRY_ID is a LastPass Entry Specification . The structured data from lpass show --json id is available as the lastpass template function. The value will be an array of objects. You can use the index function and .Field syntax of the text/template language to extract the field you want. For example, to extract the password field from first the \"GitHub\" entry, use: githubPassword = {{ (index (lastpass \"GitHub\") 0).password | quote }} chezmoi automatically parses the note value of the Lastpass entry as colon-separated key-value pairs, so, for example, you can extract a private SSH key like this: {{ (index (lastpass \"SSH\") 0).note.privateKey }} Keys in the note section written as CamelCase Words are converted to camelCaseWords . If the note value does not contain colon-separated key-value pairs, then you can use lastpassRaw to get its raw value, for example: {{ (index (lastpassRaw \"SSH Private Key\") 0).note }}","title":"LastPass"},{"location":"user-guide/password-managers/pass/","text":"pass chezmoi includes support for pass using the pass CLI. The first line of the output of pass show $PASS_NAME is available as the pass template function, for example: {{ pass \"$PASS_NAME\" }}","title":"pass"},{"location":"user-guide/password-managers/pass/#pass","text":"chezmoi includes support for pass using the pass CLI. The first line of the output of pass show $PASS_NAME is available as the pass template function, for example: {{ pass \"$PASS_NAME\" }}","title":"pass"},{"location":"user-guide/password-managers/vault/","text":"Vault chezmoi includes support for Vault using the Vault CLI to expose data as a template function. The vault CLI needs to be correctly configured on your machine, e.g. the VAULT_ADDR and VAULT_TOKEN environment variables must be set correctly. Verify that this is the case by running: $ vault kv get -format = json $KEY The structured data from vault kv get -format=json is available as the vault template function. You can use the .Field syntax of the text/template language to extract the data you want. For example: {{ (vault \"$KEY\").data.data.password }}","title":"Vault"},{"location":"user-guide/password-managers/vault/#vault","text":"chezmoi includes support for Vault using the Vault CLI to expose data as a template function. The vault CLI needs to be correctly configured on your machine, e.g. the VAULT_ADDR and VAULT_TOKEN environment variables must be set correctly. Verify that this is the case by running: $ vault kv get -format = json $KEY The structured data from vault kv get -format=json is available as the vault template function. You can use the .Field syntax of the text/template language to extract the data you want. For example: {{ (vault \"$KEY\").data.data.password }}","title":"Vault"},{"location":"user-guide/tools/diff/","text":"Diff Use a custom diff tool By default, chezmoi uses a built-in diff. You can use a custom tool by setting the diff.command and diff.args configuration variables. The elements of diff.args are interpreted as templates with the variables .Destination and .Target containing filenames of the file in the destination state and the target state respectively. For example, to use meld , specify: ~/.config/chezmoi/chezmoi.toml [diff] command = \"meld\" args = [ \"--diff\" , \"{{ .Destination }}\" , \"{{ .Target }}\" ] Don't show scripts in the diff output By default, chezmoi diff will show all changes, including the contents of scripts that will be run. You can exclude scripts from the diff output by setting the diff.exclude configuration variable in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml [diff] exclude = [ \"scripts\" ] Don't show externals in the diff output To exclude diffs from externals, either pass the --exclude=externals flag or set diff.exclude to [\"externals\"] in your config file. Customize the diff pager You can change the diff format, and/or pipe the output into a pager of your choice by setting diff.pager configuration variable. For example, to use diff-so-fancy specify: ~/.config/chezmoi/chezmoi.toml [diff] pager = \"diff-so-fancy\" The pager can be disabled using the --no-pager flag or by setting diff.pager to an empty string.","title":"Diff"},{"location":"user-guide/tools/diff/#diff","text":"","title":"Diff"},{"location":"user-guide/tools/diff/#use-a-custom-diff-tool","text":"By default, chezmoi uses a built-in diff. You can use a custom tool by setting the diff.command and diff.args configuration variables. The elements of diff.args are interpreted as templates with the variables .Destination and .Target containing filenames of the file in the destination state and the target state respectively. For example, to use meld , specify: ~/.config/chezmoi/chezmoi.toml [diff] command = \"meld\" args = [ \"--diff\" , \"{{ .Destination }}\" , \"{{ .Target }}\" ]","title":"Use a custom diff tool"},{"location":"user-guide/tools/diff/#dont-show-scripts-in-the-diff-output","text":"By default, chezmoi diff will show all changes, including the contents of scripts that will be run. You can exclude scripts from the diff output by setting the diff.exclude configuration variable in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml [diff] exclude = [ \"scripts\" ]","title":"Don't show scripts in the diff output"},{"location":"user-guide/tools/diff/#dont-show-externals-in-the-diff-output","text":"To exclude diffs from externals, either pass the --exclude=externals flag or set diff.exclude to [\"externals\"] in your config file.","title":"Don't show externals in the diff output"},{"location":"user-guide/tools/diff/#customize-the-diff-pager","text":"You can change the diff format, and/or pipe the output into a pager of your choice by setting diff.pager configuration variable. For example, to use diff-so-fancy specify: ~/.config/chezmoi/chezmoi.toml [diff] pager = \"diff-so-fancy\" The pager can be disabled using the --no-pager flag or by setting diff.pager to an empty string.","title":"Customize the diff pager"},{"location":"user-guide/tools/editor/","text":"Editor Use your preferred editor with chezmoi edit and chezmoi edit-config By default, chezmoi will use your preferred editor as defined by the $VISUAL or $EDITOR environment variables, falling back to a default editor depending on your operating system ( vi on UNIX-like operating systems, notepad.exe on Windows). You can configure chezmoi to use your preferred editor by either setting the $EDITOR environment variable or setting the edit.command variable in your configuration file. The editor command must only return when you have finished editing the files. chezmoi will emit a warning if your editor command returns too quickly. In the specific case of using VSCode or Codium as your editor, you must pass the --wait flag, for example, in your shell config: $ export EDITOR = \"code --wait\" Or in chezmoi's configuration file: ~/.config/chezmoi/chezmoi.toml [edit] command = \"code\" args = [ \"--wait\" ] Configure VIM to run chezmoi apply whenever you save a dotfile Put the following in your .vimrc : ~/.vimrc autocmd BufWritePost ~ /.local/ share /chezmoi/ * ! chezmoi apply -- source - path \"%\" Use chezmoi with emacs github.com/tuh8888/chezmoi.el provides convenience functions for interacting with chezmoi from emacs, and is available in MELPA .","title":"Editor"},{"location":"user-guide/tools/editor/#editor","text":"","title":"Editor"},{"location":"user-guide/tools/editor/#use-your-preferred-editor-with-chezmoi-edit-and-chezmoi-edit-config","text":"By default, chezmoi will use your preferred editor as defined by the $VISUAL or $EDITOR environment variables, falling back to a default editor depending on your operating system ( vi on UNIX-like operating systems, notepad.exe on Windows). You can configure chezmoi to use your preferred editor by either setting the $EDITOR environment variable or setting the edit.command variable in your configuration file. The editor command must only return when you have finished editing the files. chezmoi will emit a warning if your editor command returns too quickly. In the specific case of using VSCode or Codium as your editor, you must pass the --wait flag, for example, in your shell config: $ export EDITOR = \"code --wait\" Or in chezmoi's configuration file: ~/.config/chezmoi/chezmoi.toml [edit] command = \"code\" args = [ \"--wait\" ]","title":"Use your preferred editor with chezmoi edit and chezmoi edit-config"},{"location":"user-guide/tools/editor/#configure-vim-to-run-chezmoi-apply-whenever-you-save-a-dotfile","text":"Put the following in your .vimrc : ~/.vimrc autocmd BufWritePost ~ /.local/ share /chezmoi/ * ! chezmoi apply -- source - path \"%\"","title":"Configure VIM to run chezmoi apply whenever you save a dotfile"},{"location":"user-guide/tools/editor/#use-chezmoi-with-emacs","text":"github.com/tuh8888/chezmoi.el provides convenience functions for interacting with chezmoi from emacs, and is available in MELPA .","title":"Use chezmoi with emacs"},{"location":"user-guide/tools/http-or-socks5-proxy/","text":"HTTP or SOCKS5 proxy chezmoi supports HTTP, HTTPS, and SOCKS5 proxies. Set the HTTP_PROXY , HTTPS_PROXY , and NO_PROXY environment variables, or their lowercase equivalents, for example: $ HTTP_PROXY = socks5://127.0.0.1:1080 chezmoi apply --refresh-externals","title":"HTTP or SOCKS5 proxy"},{"location":"user-guide/tools/http-or-socks5-proxy/#http-or-socks5-proxy","text":"chezmoi supports HTTP, HTTPS, and SOCKS5 proxies. Set the HTTP_PROXY , HTTPS_PROXY , and NO_PROXY environment variables, or their lowercase equivalents, for example: $ HTTP_PROXY = socks5://127.0.0.1:1080 chezmoi apply --refresh-externals","title":"HTTP or SOCKS5 proxy"},{"location":"user-guide/tools/merge/","text":"Merge Use a custom merge command By default, chezmoi uses vimdiff. You can use a custom command by setting the merge.command and merge.args configuration variables. The elements of merge.args are interprested as templates with the variables .Destination , .Source , and .Target containing filenames of the file in the destination state, source state, and target state respectively. For example, to use neovim's diff mode , specify: ~/.config/chezmoi/chezmoi.toml [merge] command = \"nvim\" args = [ \"-d\" , \"{{ .Destination }}\" , \"{{ .Source }}\" , \"{{ .Target }}\" ]","title":"Merge"},{"location":"user-guide/tools/merge/#merge","text":"","title":"Merge"},{"location":"user-guide/tools/merge/#use-a-custom-merge-command","text":"By default, chezmoi uses vimdiff. You can use a custom command by setting the merge.command and merge.args configuration variables. The elements of merge.args are interprested as templates with the variables .Destination , .Source , and .Target containing filenames of the file in the destination state, source state, and target state respectively. For example, to use neovim's diff mode , specify: ~/.config/chezmoi/chezmoi.toml [merge] command = \"nvim\" args = [ \"-d\" , \"{{ .Destination }}\" , \"{{ .Source }}\" , \"{{ .Target }}\" ]","title":"Use a custom merge command"}]}